{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC190\\uD55C\\uC2B9\\\\Desktop\\\\project-subway\\\\src\\\\main\\\\frontend\\\\src\\\\components\\\\section\\\\Right.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst lineImages = {\n  1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n  1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n  1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n  1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n  1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n  1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n  1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n  1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n  1009: require('../../assets/img/subwaymapmarker/9호선마커.png')\n  // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\nconst Right = ({\n  isVisible,\n  toggleRightVisibility,\n  stationName,\n  stationLine\n}) => {\n  _s();\n  const [congestionData, setCongestionData] = useState(null);\n  const [FR_CODE, setFR_CODE] = useState(null);\n  const location = useLocation();\n  const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n  const printedDirections = [];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _xmlDoc$querySelector;\n        // Remove the last character from stationName\n        const simplifiedStationName = stationName.replace(/\\(.*/, '');\n\n        // Call API to get station information by simplified station name\n        console.log(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n        const response = await axios.get(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n        const code = (_xmlDoc$querySelector = xmlDoc.querySelector(\"FR_CODE\")) === null || _xmlDoc$querySelector === void 0 ? void 0 : _xmlDoc$querySelector.textContent;\n        console.log(code);\n        if (code) {\n          setFR_CODE(code);\n          const currentDate = new Date();\n          const roundedMinutes = Math.round(currentDate.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n          const roundedTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), roundedMinutes);\n          const dow = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"][roundedTime.getDay()];\n          const hh = String(roundedTime.getHours()).padStart(2, '0'); // Add leading zero if single digit\n          const options = {\n            headers: {\n              accept: 'application/json',\n              'Content-Type': 'application/json',\n              appkey: ''\n            }\n          };\n          const congestionResponse = await axios.get(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${code}?dow=${dow}&hh=${hh}`, options);\n          setCongestionData(congestionResponse.data);\n        } else {\n          console.error(\"Failed to get station ID from API response.\");\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, [stationName]);\n  const handleClose = () => {\n    toggleRightVisibility(false);\n  };\n  const getCurrentTimeSlot = () => {\n    if (!congestionData) return null;\n    const currentTime = new Date();\n    const roundedMinutes = Math.round(currentTime.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n    const roundedTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), roundedMinutes);\n    const currentTimeHHMM = `${String(roundedTime.getHours()).padStart(2, '0')}:${String(roundedTime.getMinutes()).padStart(2, '0')}`;\n    const timeSlots = congestionData.contents.stat[0].data;\n    for (let i = 0; i < timeSlots.length; i++) {\n      const timeSlotHHMM = `${timeSlots[i].hh}:${timeSlots[i].mm}`;\n      if (timeSlotHHMM === currentTimeHHMM) {\n        return timeSlots[i];\n      }\n    }\n    return null;\n  };\n  const fetchDataFromFlask = async () => {\n    try {\n      // 요청을 보냄\n      const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"stationName\": stationName\n        }) // 데이터를 JSON 문자열로 변환하여 전송\n      });\n\n      // 응답을 JSON 형식으로 파싱\n      const data = await response.json();\n\n      // 받아온 도착 정보를 상태에 저장\n      setArrivalInfo(data);\n    } catch (error) {\n      console.error('데이터 가져오기 실패:', error);\n    }\n  };\n  // 컴포넌트가 마운트될 때 데이터 가져오기\n  useEffect(() => {\n    fetchDataFromFlask();\n  }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n  function getLineImage(subwayId) {\n    return lineImages[subwayId];\n  }\n  function getSubwayLineName(subwayId) {\n    switch (subwayId) {\n      case \"1001\":\n        return \"1호선\";\n      case \"1002\":\n        return \"2호선\";\n      case \"1003\":\n        return \"3호선\";\n      case \"1004\":\n        return \"4호선\";\n      case \"1005\":\n        return \"5호선\";\n      case \"1006\":\n        return \"6호선\";\n      case \"1007\":\n        return \"7호선\";\n      case \"1008\":\n        return \"8호선\";\n      case 1009:\n        return \"9호선\";\n      // 다른 호선에 대한 경우도 추가\n      default:\n        return \"해당없음\";\n    }\n  }\n  const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n    if (!acc[info.subwayId]) {\n      acc[info.subwayId] = [];\n    }\n    acc[info.subwayId].push(info);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"right\",\n    className: isVisible ? '' : 'hidden',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"close-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-button\",\n        onClick: handleClose,\n        children: /*#__PURE__*/_jsxDEV(IoCloseOutline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 72\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), congestionData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [stationName, \" \\uCE78 \\uD63C\\uC7A1\\uB3C4 \\uC815\\uBCF4\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD638\\uC120: \", congestionData.contents.subwayLine]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), getCurrentTimeSlot() ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"congestion-level\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [getCurrentTimeSlot().hh, \":\", getCurrentTimeSlot().mm, \"\\uC758 \", stationName, \"\\uC758 \\uCE78 \\uD63C\\uC7A1\\uB3C4\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"congestion-boxes\",\n          children: getCurrentTimeSlot().congestionCar.map((level, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `congestion-box ${level <= 40 ? 'green' : level <= 80 ? 'yellow' : level <= 120 ? 'orange' : 'red'}`,\n            children: [Math.floor(level / 160 * 100), \"%\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No congestion data available for the current time.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this), stationName && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uD83D\\uDCA1 \", stationName, \"\\uC758 \\uC2E4\\uC2DC\\uAC04 \\uB3C4\\uCC29 \\uC815\\uBCF4\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this), arrivalInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'flex-start'\n        },\n        children: [Object.keys(groupedData).map(subwayId => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: '20px',\n                height: 'auto',\n                verticalAlign: 'middle'\n              },\n              src: getLineImage(subwayId),\n              alt: \"Subway Line Marker\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 41\n            }, this), getSubwayLineName(subwayId)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexWrap: 'wrap'\n            },\n            children: groupedData[subwayId].map((info, index) => {\n              // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n              const [direction, train] = info.trainLineNm.split(' - ');\n              // 현재 열차의 방면이 이미 출력된 방면인지 확인\n              const directionIndex = printedDirections.indexOf(train);\n              // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n              if (directionIndex === -1) {\n                printedDirections.push(train);\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  border: '1px solid black',\n                  padding: '10px',\n                  margin: '5px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [direction, \" (\", train, \") \", directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"\\uD83D\\uDC49 \", info.recptnDt, \" \\uAE30\\uC900 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: 'red'\n                    },\n                    children: [Math.floor(info.barvlDt / 60), \"\\uBD84 \", info.barvlDt % 60, \"\\uCD08\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 79\n                  }, this), \" \\uB4A4 \\uB3C4\\uCC29\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"\\u2714 \\uD604\\uC704\\uCE58 : \", info.arvlMsg3]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 53\n                }, this)]\n              }, info.rowNum, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 49\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 37\n          }, this)]\n        }, subwayId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(Right, \"Btld8c51jQI1IQDLRrdffm/q/rA=\", false, function () {\n  return [useLocation];\n});\n_c = Right;\nexport default Right;\nvar _c;\n$RefreshReg$(_c, \"Right\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","IoCloseOutline","axios","jsxDEV","_jsxDEV","lineImages","require","Right","isVisible","toggleRightVisibility","stationName","stationLine","_s","congestionData","setCongestionData","FR_CODE","setFR_CODE","location","arrivalInfo","setArrivalInfo","printedDirections","fetchData","_xmlDoc$querySelector","simplifiedStationName","replace","console","log","response","get","parser","DOMParser","xmlDoc","parseFromString","data","code","querySelector","textContent","currentDate","Date","roundedMinutes","Math","round","getMinutes","roundedTime","getFullYear","getMonth","getDate","getHours","dow","getDay","hh","String","padStart","options","headers","accept","appkey","congestionResponse","error","handleClose","getCurrentTimeSlot","currentTime","currentTimeHHMM","timeSlots","contents","stat","i","length","timeSlotHHMM","mm","fetchDataFromFlask","fetch","method","body","JSON","stringify","json","getLineImage","subwayId","getSubwayLineName","groupedData","reduce","acc","info","push","id","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","subwayLine","congestionCar","map","level","index","floor","style","display","flexDirection","alignItems","Object","keys","width","height","verticalAlign","src","alt","flexWrap","direction","train","trainLineNm","split","directionIndex","indexOf","border","padding","margin","recptnDt","color","barvlDt","arvlMsg3","rowNum","_c","$RefreshReg$"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/src/components/section/Right.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport axios from 'axios';\n\nconst lineImages = {\n    1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n    1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n    1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n    1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n    1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n    1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n    1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n    1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n    1009: require('../../assets/img/subwaymapmarker/9호선마커.png'),\n    // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\n\nconst Right = ({ isVisible, toggleRightVisibility, stationName, stationLine }) => {\n    const [congestionData, setCongestionData] = useState(null);\n    const [FR_CODE, setFR_CODE] = useState(null);\n    const location = useLocation();\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n    const printedDirections = [];\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Remove the last character from stationName\n                const simplifiedStationName = stationName.replace(/\\(.*/, '');\n\n                // Call API to get station information by simplified station name\n                console.log(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const response = await axios.get(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n                const code = xmlDoc.querySelector(\"FR_CODE\")?.textContent;\n                console.log(code);\n                \n                if (code) {\n                    setFR_CODE(code);\n                    const currentDate = new Date();\n                    const roundedMinutes = Math.round(currentDate.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n                    const roundedTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), roundedMinutes);\n                    const dow = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"][roundedTime.getDay()];\n                    const hh = String(roundedTime.getHours()).padStart(2, '0'); // Add leading zero if single digit\n                    const options = {\n                        headers: {\n                            accept: 'application/json',\n                            'Content-Type': 'application/json',\n                            appkey: ''\n                        }\n                    };\n                    const congestionResponse = await axios.get(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${code}?dow=${dow}&hh=${hh}`, options);\n                    setCongestionData(congestionResponse.data);\n                } else {\n                    console.error(\"Failed to get station ID from API response.\");\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchData();\n    }, [stationName]);\n\n    \n\n    const handleClose = () => {\n        toggleRightVisibility(false);\n    };\n\n    const getCurrentTimeSlot = () => {\n        if (!congestionData) return null;\n        const currentTime = new Date();\n        const roundedMinutes = Math.round(currentTime.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n        const roundedTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), roundedMinutes);\n        const currentTimeHHMM = `${String(roundedTime.getHours()).padStart(2, '0')}:${String(roundedTime.getMinutes()).padStart(2, '0')}`;\n        const timeSlots = congestionData.contents.stat[0].data;\n        for (let i = 0; i < timeSlots.length; i++) {\n            const timeSlotHHMM = `${timeSlots[i].hh}:${timeSlots[i].mm}`;\n            if (timeSlotHHMM === currentTimeHHMM) {\n                return timeSlots[i];\n            }\n        }\n        return null;\n    };\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // 요청을 보냄\n            const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ \"stationName\": stationName }), // 데이터를 JSON 문자열로 변환하여 전송\n            });\n\n            // 응답을 JSON 형식으로 파싱\n            const data = await response.json();\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n\n    function getLineImage(subwayId) {\n        return lineImages[subwayId];\n    }\n    function getSubwayLineName(subwayId) {\n        switch(subwayId) {\n            case \"1001\":\n                return \"1호선\";\n            case \"1002\":\n                return \"2호선\";\n            case \"1003\":\n                return \"3호선\";\n            case \"1004\":\n                return \"4호선\";\n            case \"1005\":\n                return \"5호선\";\n            case \"1006\":\n                return \"6호선\";\n            case \"1007\":\n                return \"7호선\";\n            case \"1008\":\n                return \"8호선\";\n            case 1009:\n                return \"9호선\";\n            // 다른 호선에 대한 경우도 추가\n            default:\n                return \"해당없음\";\n        }\n    }\n    const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n        if (!acc[info.subwayId]) {\n            acc[info.subwayId] = [];\n        }\n        acc[info.subwayId].push(info);\n        return acc;\n    }, {});\n\n\n    return (\n        <div id='right' className={isVisible ? '' : 'hidden'}>\n            <div className=\"close-button-container\">\n                <button className=\"close-button\" onClick={handleClose}><IoCloseOutline /></button>\n            </div>\n            {/* Render congestion data here */}\n            {congestionData && (\n                <div>\n                    <h2>{stationName} 칸 혼잡도 정보</h2>\n                    {/*<p>Station ID: {FR_CODE}</p>*/}\n                    <p>호선: {congestionData.contents.subwayLine}</p>\n                    {getCurrentTimeSlot() ? (\n                    <div className=\"congestion-level\">\n                        <p>{getCurrentTimeSlot().hh}:{getCurrentTimeSlot().mm}의 {stationName}의 칸 혼잡도</p>\n                        <div className=\"congestion-boxes\">\n                            {getCurrentTimeSlot().congestionCar.map((level, index) => (\n                                <div key={index} className={`congestion-box ${level <= 40 ? 'green' : level <= 80 ? 'yellow' : level <= 120 ? 'orange' : 'red'}`}>\n                                    {Math.floor((level / 160) * 100)}%\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <p>No congestion data available for the current time.</p>\n                )}\n                </div>\n            )}\n\n{stationName && (\n                <div>\n                    <br/>\n                    <h2>💡 {stationName}의 실시간 도착 정보</h2>\n                    <br/>\n                    <br/>\n                    {/* arrivalInfo가 존재하는 경우에만 아래 내용을 표시 */}\n                    {arrivalInfo && (\n                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                            {/* arrivalInfo를 순회하며 각 도착 정보를 출력 */}\n                                        {/* 열차 정보와 도착 정보 */}\n                            {Object.keys(groupedData).map(subwayId => (\n                                <div key={subwayId}>\n                                    <p>\n                                        <img\n                                            style={{ width: '20px', height: 'auto', verticalAlign: 'middle' }}\n                                            src={getLineImage(subwayId)}\n                                            alt=\"Subway Line Marker\"\n                                        />\n                                        {getSubwayLineName(subwayId)}\n                                    </p>\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                        {groupedData[subwayId].map((info, index) => {\n                                            // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n                                            const [direction, train] = info.trainLineNm.split(' - ');\n                                            // 현재 열차의 방면이 이미 출력된 방면인지 확인\n                                            const directionIndex = printedDirections.indexOf(train);\n                                            // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n                                            if (directionIndex === -1) {\n                                                printedDirections.push(train);\n                                            }\n\n                                            return (\n                                                <div key={info.rowNum} style={{ border: '1px solid black', padding: '10px', margin: '5px' }}>\n                                                    <div>\n                                                        <p>\n                                                            {direction} ({train}) {directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차'}\n                                                        </p>\n                                                    </div>\n                                                    <p>\n                                                        👉 {info.recptnDt} 기준 <span style={{ color: 'red' }}>{Math.floor(info.barvlDt / 60)}분 {info.barvlDt % 60}초</span> 뒤 도착\n                                                    </p>\n                                                    <p>✔ 현위치 : {info.arvlMsg3}</p>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <br/>\n                                    <hr/>\n                                </div>\n                            ))}\n                            <br/> {/* 모든 출력이 완료된 후에 줄바꿈 추가 */}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Right;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}