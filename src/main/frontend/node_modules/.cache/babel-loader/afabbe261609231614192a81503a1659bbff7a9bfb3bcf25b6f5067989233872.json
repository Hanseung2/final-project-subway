{"ast":null,"code":"import _objectSpread from \"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as d3Shape from \"victory-vendor/d3-shape\";\nimport { circle, point } from \"./geometry-helper-methods\";\nvar getPosition = function getPosition(props, width) {\n  var x = props.x,\n    x0 = props.x0,\n    y = props.y,\n    y0 = props.y0,\n    horizontal = props.horizontal;\n  var alignment = props.alignment || \"middle\";\n  var size = alignment === \"middle\" ? width / 2 : width;\n  var sign = horizontal ? -1 : 1;\n  if (horizontal) {\n    return {\n      x0: x0,\n      x1: x,\n      y0: alignment === \"start\" ? y : y - sign * size,\n      y1: alignment === \"end\" ? y : y + sign * size\n    };\n  }\n  return {\n    x0: alignment === \"start\" ? x : x - sign * size,\n    x1: alignment === \"end\" ? x : x + sign * size,\n    y0: y0,\n    y1: y\n  };\n};\nvar getAngle = function getAngle(props, index) {\n  var data = props.data,\n    scale = props.scale;\n  var x = data[index]._x1 === undefined ? \"_x\" : \"_x1\";\n  return scale.x(data[index][x]);\n};\nvar getAngularWidth = function getAngularWidth(props, width) {\n  var scale = props.scale;\n  var range = scale.y.range();\n  var r = Math.max.apply(Math, _toConsumableArray(range));\n  var angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  return width / (2 * Math.PI * r) * angularRange;\n};\nvar transformAngle = function transformAngle(angle) {\n  return -1 * angle + Math.PI / 2;\n};\nexport var getCustomBarPath = function getCustomBarPath(props, width) {\n  var getPath = props.getPath;\n  if (typeof getPath === \"function\") {\n    var propsWithCalculatedValues = _objectSpread(_objectSpread({}, props), getPosition(props, width));\n    return getPath(propsWithCalculatedValues);\n  }\n};\nvar getStartAngle = function getStartAngle(props, index) {\n  var data = props.data,\n    scale = props.scale,\n    alignment = props.alignment;\n  var currentAngle = getAngle(props, index);\n  var angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  var previousAngle = index === 0 ? getAngle(props, data.length - 1) - Math.PI * 2 : getAngle(props, index - 1);\n  if (index === 0 && angularRange < 2 * Math.PI) {\n    return scale.x.range()[0];\n  } else if (alignment === \"start\" || alignment === \"end\") {\n    return alignment === \"start\" ? previousAngle : currentAngle;\n  }\n  return (currentAngle + previousAngle) / 2;\n};\nvar getEndAngle = function getEndAngle(props, index) {\n  var data = props.data,\n    scale = props.scale,\n    alignment = props.alignment;\n  var currentAngle = getAngle(props, index);\n  var angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  var lastAngle = scale.x.range()[1] === 2 * Math.PI ? getAngle(props, 0) + Math.PI * 2 : scale.x.range()[1];\n  var nextAngle = index === data.length - 1 ? getAngle(props, 0) + Math.PI * 2 : getAngle(props, index + 1);\n  if (index === data.length - 1 && angularRange < 2 * Math.PI) {\n    return lastAngle;\n  } else if (alignment === \"start\" || alignment === \"end\") {\n    return alignment === \"start\" ? currentAngle : nextAngle;\n  }\n  return (currentAngle + nextAngle) / 2;\n};\nvar mapPointsToPath = function mapPointsToPath(coords, cornerRadius, direction) {\n  var topLeftPath = \"\".concat(cornerRadius.topLeft, \" \").concat(cornerRadius.topLeft, \" \").concat(direction);\n  var topRightPath = \"\".concat(cornerRadius.topRight, \" \").concat(cornerRadius.topRight, \" \").concat(direction);\n  var bottomLeftPath = \"\".concat(cornerRadius.bottomLeft, \" \").concat(cornerRadius.bottomLeft, \" \").concat(direction);\n  var bottomRightPath = \"\".concat(cornerRadius.bottomRight, \" \").concat(cornerRadius.bottomRight, \" \").concat(direction);\n  var commands = [\"M\", \"A \".concat(bottomLeftPath, \",\"), \"L\", \"A \".concat(topLeftPath, \",\"), \"L\", \"A \".concat(topRightPath, \",\"), \"L\", \"A \".concat(bottomRightPath, \",\")];\n  var path = commands.reduce(function (acc, command, i) {\n    return \"\".concat(acc).concat(command, \" \").concat(coords[i].x, \", \").concat(coords[i].y, \" \\n\");\n  }, \"\");\n  return \"\".concat(path, \" z\");\n};\nvar getVerticalBarPoints = function getVerticalBarPoints(position, sign, cr) {\n  var x0 = position.x0,\n    x1 = position.x1,\n    y0 = position.y0,\n    y1 = position.y1;\n\n  // eslint-disable-next-line max-statements, max-len\n  var getHalfPoints = function getHalfPoints(side) {\n    var isLeft = side === \"Left\";\n    var signL = isLeft ? 1 : -1;\n    var x = isLeft ? x0 : x1;\n    var bottomPoint = {\n      x: x + signL * cr[\"bottom\".concat(side)],\n      y: y0\n    };\n    var bottomMiddlePoint = {\n      x: x,\n      y: y0 - sign * cr[\"bottom\".concat(side)]\n    };\n    var topMiddlePoint = {\n      x: x,\n      y: y1 + sign * cr[\"top\".concat(side)]\n    };\n    var topPoint = {\n      x: x + signL * cr[\"top\".concat(side)],\n      y: y1\n    };\n    var hasIntersection = sign === 1 ? y0 - cr[\"bottom\".concat(side)] < y1 + cr[\"top\".concat(side)] : y0 + cr[\"bottom\".concat(side)] > y1 - cr[\"top\".concat(side)];\n    if (hasIntersection) {\n      var topCenter = point(x + signL * cr[\"top\".concat(side)], y1 + sign * cr[\"top\".concat(side)]);\n      var topCircle = circle(topCenter, cr[\"top\".concat(side)]);\n      var bottomCenter = point(x + signL * cr[\"bottom\".concat(side)], y0 - sign * cr[\"bottom\".concat(side)]);\n      var bottomCircle = circle(bottomCenter, cr[\"bottom\".concat(side)]);\n      var circleIntersection = topCircle.intersection(bottomCircle);\n      var hasArcIntersection = circleIntersection.length > 0;\n      if (hasArcIntersection) {\n        var arcIntersection = circleIntersection[isLeft ? 0 : 1];\n        bottomMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n        topMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n      } else {\n        var hasBottomLineTopArcIntersection = cr[\"top\".concat(side)] > cr[\"bottom\".concat(side)];\n        if (hasBottomLineTopArcIntersection) {\n          var newX = topCircle.solveX(y0)[isLeft ? 0 : 1];\n          bottomPoint = {\n            x: newX,\n            y: y0\n          };\n          bottomMiddlePoint = {\n            x: newX,\n            y: y0\n          };\n          topMiddlePoint = {\n            x: newX,\n            y: y0\n          };\n        } else {\n          var _newX = bottomCircle.solveX(y1)[isLeft ? 0 : 1];\n          bottomMiddlePoint = {\n            x: _newX,\n            y: y1\n          };\n          topMiddlePoint = {\n            x: _newX,\n            y: y1\n          };\n          topPoint = {\n            x: _newX,\n            y: y1\n          };\n        }\n      }\n    }\n    var points = [bottomPoint, bottomMiddlePoint, topMiddlePoint, topPoint];\n    return isLeft ? points : points.reverse();\n  };\n  return getHalfPoints(\"Left\").concat(getHalfPoints(\"Right\"));\n};\nvar getHorizontalBarPoints = function getHorizontalBarPoints(position, sign, cr) {\n  var y0 = position.y0,\n    y1 = position.y1;\n  var x0 = position.x0 < position.x1 ? position.x0 : position.x1;\n  var x1 = position.x0 < position.x1 ? position.x1 : position.x0;\n\n  // eslint-disable-next-line max-statements, max-len\n  var getHalfPoints = function getHalfPoints(side) {\n    var isTop = side === \"top\";\n    var signL = isTop ? -1 : 1;\n    var y = isTop ? y1 : y0;\n    var leftPoint = {\n      x: x0,\n      y: y - signL * cr[\"\".concat(side, \"Left\")]\n    };\n    var leftMiddlePoint = {\n      x: x0 + cr[\"\".concat(side, \"Left\")],\n      y: y\n    };\n    var rightMiddlePoint = {\n      x: x1 - cr[\"\".concat(side, \"Right\")],\n      y: y\n    };\n    var rightPoint = {\n      x: x1,\n      y: y - signL * cr[\"\".concat(side, \"Right\")]\n    };\n    var hasIntersection = leftMiddlePoint.x > rightMiddlePoint.x;\n    if (hasIntersection) {\n      var leftCenter = point(x0 + cr[\"\".concat(side, \"Left\")], y - signL * cr[\"\".concat(side, \"Left\")]);\n      var leftCircle = circle(leftCenter, cr[\"\".concat(side, \"Left\")]);\n      var rightCenter = point(x1 - cr[\"\".concat(side, \"Right\")], y - signL * cr[\"\".concat(side, \"Right\")]);\n      var rightCircle = circle(rightCenter, cr[\"\".concat(side, \"Right\")]);\n      var circleIntersection = leftCircle.intersection(rightCircle);\n      var hasArcIntersection = circleIntersection.length > 0;\n      if (hasArcIntersection) {\n        var arcIntersection = circleIntersection[sign > 0 ? 1 : 0];\n        leftMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n        rightMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n      } else {\n        var hasLeftLineRightArcIntersection = cr[\"\".concat(side, \"Right\")] > cr[\"\".concat(side, \"Left\")];\n        if (hasLeftLineRightArcIntersection) {\n          var newY = rightCircle.solveY(x0)[isTop ? 0 : 1];\n          leftPoint = {\n            x: x0,\n            y: newY\n          };\n          leftMiddlePoint = {\n            x: x0,\n            y: newY\n          };\n          rightMiddlePoint = {\n            x: x0,\n            y: newY\n          };\n        } else {\n          var _newY = leftCircle.solveY(x1)[isTop ? 0 : 1];\n          rightPoint = {\n            x: x1,\n            y: _newY\n          };\n          rightMiddlePoint = {\n            x: x1,\n            y: _newY\n          };\n          leftMiddlePoint = {\n            x: x1,\n            y: _newY\n          };\n        }\n      }\n    }\n    return [leftPoint, leftMiddlePoint, rightMiddlePoint, rightPoint];\n  };\n  var topPoints = getHalfPoints(\"top\");\n  var bottomPoints = getHalfPoints(\"bottom\");\n  return [bottomPoints[1], bottomPoints[0]].concat(_toConsumableArray(topPoints), [\n  // eslint-disable-next-line no-magic-numbers\n  bottomPoints[3], bottomPoints[2]]);\n};\n\n// eslint-disable-next-line max-params\nexport var getVerticalBarPath = function getVerticalBarPath(props, width, cornerRadius) {\n  var position = getPosition(props, width);\n  var sign = position.y0 > position.y1 ? 1 : -1;\n  var direction = sign > 0 ? \"0 0 1\" : \"0 0 0\";\n  var points = getVerticalBarPoints(position, sign, cornerRadius);\n  return mapPointsToPath(points, cornerRadius, direction);\n};\n\n// eslint-disable-next-line max-params\nexport var getHorizontalBarPath = function getHorizontalBarPath(props, width, cornerRadius) {\n  var position = getPosition(props, width);\n  var sign = position.x0 < position.x1 ? 1 : -1;\n  var direction = \"0 0 1\";\n  var cr = {\n    topRight: sign > 0 ? cornerRadius.topLeft : cornerRadius.bottomLeft,\n    bottomRight: sign > 0 ? cornerRadius.topRight : cornerRadius.bottomRight,\n    bottomLeft: sign > 0 ? cornerRadius.bottomRight : cornerRadius.topRight,\n    topLeft: sign > 0 ? cornerRadius.bottomLeft : cornerRadius.topLeft\n  };\n  var points = getHorizontalBarPoints(position, sign, cr);\n  return mapPointsToPath(points, cr, direction);\n};\nexport var getVerticalPolarBarPath = function getVerticalPolarBarPath(props, cornerRadius) {\n  var datum = props.datum,\n    scale = props.scale,\n    index = props.index,\n    alignment = props.alignment,\n    style = props.style;\n  var r1 = scale.y(datum._y0 || 0);\n  var r2 = scale.y(datum._y1 !== undefined ? datum._y1 : datum._y);\n  var currentAngle = scale.x(datum._x1 !== undefined ? datum._x1 : datum._x);\n  var start;\n  var end;\n  if (style.width) {\n    var width = getAngularWidth(props, style.width);\n    var size = alignment === \"middle\" ? width / 2 : width;\n    start = alignment === \"start\" ? currentAngle : currentAngle - size;\n    end = alignment === \"end\" ? currentAngle : currentAngle + size;\n  } else {\n    start = getStartAngle(props, Number(index));\n    end = getEndAngle(props, Number(index));\n  }\n  var getPath = function getPath(edge) {\n    var pathFunction = d3Shape.arc().innerRadius(r1).outerRadius(r2).startAngle(transformAngle(start)).endAngle(transformAngle(end)).cornerRadius(cornerRadius[edge]);\n    return pathFunction();\n  };\n  var getPathData = function getPathData(edge) {\n    var rightPath = getPath(\"\".concat(edge, \"Right\"));\n    var rightMoves = rightPath.match(/[A-Z]/g) || [];\n    var rightCoords = rightPath.split(/[A-Z]/).slice(1);\n    var rightMiddle = rightMoves.indexOf(\"L\");\n    var leftPath = getPath(\"\".concat(edge, \"Left\"));\n    var leftMoves = leftPath.match(/[A-Z]/g) || [];\n    var leftCoords = leftPath.split(/[A-Z]/).slice(1);\n    var leftMiddle = leftMoves.indexOf(\"L\");\n    return {\n      rightMoves: rightMoves,\n      rightCoords: rightCoords,\n      rightMiddle: rightMiddle,\n      leftMoves: leftMoves,\n      leftCoords: leftCoords,\n      leftMiddle: leftMiddle\n    };\n  };\n\n  // eslint-disable-next-line max-statements\n  var getTopPath = function getTopPath() {\n    var topRight = cornerRadius.topRight,\n      topLeft = cornerRadius.topLeft;\n    var arcLength = r2 * Math.abs(end - start);\n    var _getPathData = getPathData(\"top\"),\n      rightMoves = _getPathData.rightMoves,\n      rightCoords = _getPathData.rightCoords,\n      rightMiddle = _getPathData.rightMiddle,\n      leftMoves = _getPathData.leftMoves,\n      leftCoords = _getPathData.leftCoords,\n      leftMiddle = _getPathData.leftMiddle;\n    var moves;\n    var coords;\n    if (topRight === topLeft || arcLength < 2 * topRight + 2 * topLeft) {\n      moves = topRight > topLeft ? rightMoves : leftMoves;\n      coords = topRight > topLeft ? rightCoords : leftCoords;\n    } else {\n      // eslint-disable-next-line no-magic-numbers\n      var isShort = function isShort(middle) {\n        return middle < 3;\n      };\n      var rightOffset = topLeft > topRight && isShort(rightMiddle) ? 1 : 2;\n      var leftOffset;\n      if (topRight > topLeft) {\n        var defaultOffset = isShort(rightMiddle) ? leftMiddle : leftMiddle - 2;\n        leftOffset = isShort(leftMiddle) ? leftMiddle - 1 : defaultOffset;\n      } else {\n        var _defaultOffset = isShort(leftMiddle) ? 1 : 2;\n        leftOffset = isShort(rightMiddle) ? _defaultOffset : leftMiddle - 2;\n      }\n      moves = [].concat(_toConsumableArray(rightMoves.slice(0, rightOffset)), _toConsumableArray(leftMoves.slice(leftOffset)));\n      coords = [].concat(_toConsumableArray(rightCoords.slice(0, rightOffset)), _toConsumableArray(leftCoords.slice(leftOffset)));\n    }\n    var middle = moves.indexOf(\"L\");\n    var subMoves = moves.slice(0, middle);\n    var subCoords = coords.slice(0, middle);\n    return subMoves.map(function (m, i) {\n      return {\n        command: m,\n        coords: subCoords[i].split(\",\")\n      };\n    });\n  };\n\n  // eslint-disable-next-line max-statements\n  var getBottomPath = function getBottomPath() {\n    var bottomRight = cornerRadius.bottomRight,\n      bottomLeft = cornerRadius.bottomLeft;\n    var arcLength = r1 * Math.abs(end - start);\n    var _getPathData2 = getPathData(\"bottom\"),\n      rightMoves = _getPathData2.rightMoves,\n      rightCoords = _getPathData2.rightCoords,\n      rightMiddle = _getPathData2.rightMiddle,\n      leftMoves = _getPathData2.leftMoves,\n      leftCoords = _getPathData2.leftCoords,\n      leftMiddle = _getPathData2.leftMiddle;\n    var moves;\n    var coords;\n    if (bottomRight === bottomLeft || arcLength < 2 * bottomRight + 2 * bottomLeft) {\n      moves = bottomRight > bottomLeft ? rightMoves : leftMoves;\n      coords = bottomRight > bottomLeft ? rightCoords : leftCoords;\n    } else {\n      // eslint-disable-next-line no-magic-numbers\n      var isShort = function isShort(m, middle) {\n        return m.length - middle < 4;\n      };\n      var shortPath = bottomRight > bottomLeft ? isShort(rightMoves, rightMiddle) : isShort(leftMoves, leftMiddle);\n      // eslint-disable-next-line no-magic-numbers\n      var rightOffset = shortPath ? -1 : -3;\n      moves = [].concat(_toConsumableArray(leftMoves.slice(0, leftMiddle + 2)), _toConsumableArray(rightMoves.slice(rightOffset)));\n      coords = [].concat(_toConsumableArray(leftCoords.slice(0, leftMiddle + 2)), _toConsumableArray(rightCoords.slice(rightOffset)));\n    }\n    var middle = moves.indexOf(\"L\");\n    var subMoves = moves.slice(middle, -1);\n    var subCoords = coords.slice(middle, -1);\n    return subMoves.map(function (m, i) {\n      return {\n        command: m,\n        coords: subCoords[i].split(\",\")\n      };\n    });\n  };\n  var topPath = getTopPath();\n  var bottomPath = getBottomPath();\n  var moves = [].concat(_toConsumableArray(topPath), _toConsumableArray(bottomPath));\n  var path = moves.reduce(function (memo, move) {\n    return \"\".concat(memo).concat(move.command, \" \").concat(move.coords.join());\n  }, \"\");\n  return \"\".concat(path, \" z\");\n};\nexport var getBarPath = function getBarPath(props, width, cornerRadius) {\n  if (props.getPath) {\n    return getCustomBarPath(props, width);\n  }\n  return props.horizontal ? getHorizontalBarPath(props, width, cornerRadius) : getVerticalBarPath(props, width, cornerRadius);\n};\nexport var getPolarBarPath = function getPolarBarPath(props, cornerRadius) {\n  // TODO Radial bars\n  return getVerticalPolarBarPath(props, cornerRadius);\n};","map":{"version":3,"names":["d3Shape","circle","point","getPosition","props","width","x","x0","y","y0","horizontal","alignment","size","sign","x1","y1","getAngle","index","data","scale","_x1","undefined","getAngularWidth","range","r","Math","max","apply","_toConsumableArray","angularRange","abs","PI","transformAngle","angle","getCustomBarPath","getPath","propsWithCalculatedValues","_objectSpread","getStartAngle","currentAngle","previousAngle","length","getEndAngle","lastAngle","nextAngle","mapPointsToPath","coords","cornerRadius","direction","topLeftPath","concat","topLeft","topRightPath","topRight","bottomLeftPath","bottomLeft","bottomRightPath","bottomRight","commands","path","reduce","acc","command","i","getVerticalBarPoints","position","cr","getHalfPoints","side","isLeft","signL","bottomPoint","bottomMiddlePoint","topMiddlePoint","topPoint","hasIntersection","topCenter","topCircle","bottomCenter","bottomCircle","circleIntersection","intersection","hasArcIntersection","arcIntersection","hasBottomLineTopArcIntersection","newX","solveX","points","reverse","getHorizontalBarPoints","isTop","leftPoint","leftMiddlePoint","rightMiddlePoint","rightPoint","leftCenter","leftCircle","rightCenter","rightCircle","hasLeftLineRightArcIntersection","newY","solveY","topPoints","bottomPoints","getVerticalBarPath","getHorizontalBarPath","getVerticalPolarBarPath","datum","style","r1","_y0","r2","_y1","_y","_x","start","end","Number","edge","pathFunction","arc","innerRadius","outerRadius","startAngle","endAngle","getPathData","rightPath","rightMoves","match","rightCoords","split","slice","rightMiddle","indexOf","leftPath","leftMoves","leftCoords","leftMiddle","getTopPath","arcLength","_getPathData","moves","isShort","middle","rightOffset","leftOffset","defaultOffset","subMoves","subCoords","map","m","getBottomPath","_getPathData2","shortPath","topPath","bottomPath","memo","move","join","getBarPath","getPolarBarPath"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/node_modules/victory-bar/es/path-helper-methods.js"],"sourcesContent":["import * as d3Shape from \"victory-vendor/d3-shape\";\nimport { circle, point } from \"./geometry-helper-methods\";\nconst getPosition = (props, width) => {\n  const {\n    x,\n    x0,\n    y,\n    y0,\n    horizontal\n  } = props;\n  const alignment = props.alignment || \"middle\";\n  const size = alignment === \"middle\" ? width / 2 : width;\n  const sign = horizontal ? -1 : 1;\n  if (horizontal) {\n    return {\n      x0,\n      x1: x,\n      y0: alignment === \"start\" ? y : y - sign * size,\n      y1: alignment === \"end\" ? y : y + sign * size\n    };\n  }\n  return {\n    x0: alignment === \"start\" ? x : x - sign * size,\n    x1: alignment === \"end\" ? x : x + sign * size,\n    y0,\n    y1: y\n  };\n};\nconst getAngle = (props, index) => {\n  const {\n    data,\n    scale\n  } = props;\n  const x = data[index]._x1 === undefined ? \"_x\" : \"_x1\";\n  return scale.x(data[index][x]);\n};\nconst getAngularWidth = (props, width) => {\n  const {\n    scale\n  } = props;\n  const range = scale.y.range();\n  const r = Math.max(...range);\n  const angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  return width / (2 * Math.PI * r) * angularRange;\n};\nconst transformAngle = angle => {\n  return -1 * angle + Math.PI / 2;\n};\nexport const getCustomBarPath = (props, width) => {\n  const {\n    getPath\n  } = props;\n  if (typeof getPath === \"function\") {\n    const propsWithCalculatedValues = {\n      ...props,\n      ...getPosition(props, width)\n    };\n    return getPath(propsWithCalculatedValues);\n  }\n};\nconst getStartAngle = (props, index) => {\n  const {\n    data,\n    scale,\n    alignment\n  } = props;\n  const currentAngle = getAngle(props, index);\n  const angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  const previousAngle = index === 0 ? getAngle(props, data.length - 1) - Math.PI * 2 : getAngle(props, index - 1);\n  if (index === 0 && angularRange < 2 * Math.PI) {\n    return scale.x.range()[0];\n  } else if (alignment === \"start\" || alignment === \"end\") {\n    return alignment === \"start\" ? previousAngle : currentAngle;\n  }\n  return (currentAngle + previousAngle) / 2;\n};\nconst getEndAngle = (props, index) => {\n  const {\n    data,\n    scale,\n    alignment\n  } = props;\n  const currentAngle = getAngle(props, index);\n  const angularRange = Math.abs(scale.x.range()[1] - scale.x.range()[0]);\n  const lastAngle = scale.x.range()[1] === 2 * Math.PI ? getAngle(props, 0) + Math.PI * 2 : scale.x.range()[1];\n  const nextAngle = index === data.length - 1 ? getAngle(props, 0) + Math.PI * 2 : getAngle(props, index + 1);\n  if (index === data.length - 1 && angularRange < 2 * Math.PI) {\n    return lastAngle;\n  } else if (alignment === \"start\" || alignment === \"end\") {\n    return alignment === \"start\" ? currentAngle : nextAngle;\n  }\n  return (currentAngle + nextAngle) / 2;\n};\nconst mapPointsToPath = (coords, cornerRadius, direction) => {\n  const topLeftPath = `${cornerRadius.topLeft} ${cornerRadius.topLeft} ${direction}`;\n  const topRightPath = `${cornerRadius.topRight} ${cornerRadius.topRight} ${direction}`;\n  const bottomLeftPath = `${cornerRadius.bottomLeft} ${cornerRadius.bottomLeft} ${direction}`;\n  const bottomRightPath = `${cornerRadius.bottomRight} ${cornerRadius.bottomRight} ${direction}`;\n  const commands = [\"M\", `A ${bottomLeftPath},`, \"L\", `A ${topLeftPath},`, \"L\", `A ${topRightPath},`, \"L\", `A ${bottomRightPath},`];\n  const path = commands.reduce((acc, command, i) => `${acc}${command} ${coords[i].x}, ${coords[i].y} \\n`, \"\");\n  return `${path} z`;\n};\nconst getVerticalBarPoints = (position, sign, cr) => {\n  const {\n    x0,\n    x1,\n    y0,\n    y1\n  } = position;\n\n  // eslint-disable-next-line max-statements, max-len\n  const getHalfPoints = side => {\n    const isLeft = side === \"Left\";\n    const signL = isLeft ? 1 : -1;\n    const x = isLeft ? x0 : x1;\n    let bottomPoint = {\n      x: x + signL * cr[`bottom${side}`],\n      y: y0\n    };\n    let bottomMiddlePoint = {\n      x,\n      y: y0 - sign * cr[`bottom${side}`]\n    };\n    let topMiddlePoint = {\n      x,\n      y: y1 + sign * cr[`top${side}`]\n    };\n    let topPoint = {\n      x: x + signL * cr[`top${side}`],\n      y: y1\n    };\n    const hasIntersection = sign === 1 ? y0 - cr[`bottom${side}`] < y1 + cr[`top${side}`] : y0 + cr[`bottom${side}`] > y1 - cr[`top${side}`];\n    if (hasIntersection) {\n      const topCenter = point(x + signL * cr[`top${side}`], y1 + sign * cr[`top${side}`]);\n      const topCircle = circle(topCenter, cr[`top${side}`]);\n      const bottomCenter = point(x + signL * cr[`bottom${side}`], y0 - sign * cr[`bottom${side}`]);\n      const bottomCircle = circle(bottomCenter, cr[`bottom${side}`]);\n      const circleIntersection = topCircle.intersection(bottomCircle);\n      const hasArcIntersection = circleIntersection.length > 0;\n      if (hasArcIntersection) {\n        const arcIntersection = circleIntersection[isLeft ? 0 : 1];\n        bottomMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n        topMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n      } else {\n        const hasBottomLineTopArcIntersection = cr[`top${side}`] > cr[`bottom${side}`];\n        if (hasBottomLineTopArcIntersection) {\n          const newX = topCircle.solveX(y0)[isLeft ? 0 : 1];\n          bottomPoint = {\n            x: newX,\n            y: y0\n          };\n          bottomMiddlePoint = {\n            x: newX,\n            y: y0\n          };\n          topMiddlePoint = {\n            x: newX,\n            y: y0\n          };\n        } else {\n          const newX = bottomCircle.solveX(y1)[isLeft ? 0 : 1];\n          bottomMiddlePoint = {\n            x: newX,\n            y: y1\n          };\n          topMiddlePoint = {\n            x: newX,\n            y: y1\n          };\n          topPoint = {\n            x: newX,\n            y: y1\n          };\n        }\n      }\n    }\n    const points = [bottomPoint, bottomMiddlePoint, topMiddlePoint, topPoint];\n    return isLeft ? points : points.reverse();\n  };\n  return getHalfPoints(\"Left\").concat(getHalfPoints(\"Right\"));\n};\nconst getHorizontalBarPoints = (position, sign, cr) => {\n  const {\n    y0,\n    y1\n  } = position;\n  const x0 = position.x0 < position.x1 ? position.x0 : position.x1;\n  const x1 = position.x0 < position.x1 ? position.x1 : position.x0;\n\n  // eslint-disable-next-line max-statements, max-len\n  const getHalfPoints = side => {\n    const isTop = side === \"top\";\n    const signL = isTop ? -1 : 1;\n    const y = isTop ? y1 : y0;\n    let leftPoint = {\n      x: x0,\n      y: y - signL * cr[`${side}Left`]\n    };\n    let leftMiddlePoint = {\n      x: x0 + cr[`${side}Left`],\n      y\n    };\n    let rightMiddlePoint = {\n      x: x1 - cr[`${side}Right`],\n      y\n    };\n    let rightPoint = {\n      x: x1,\n      y: y - signL * cr[`${side}Right`]\n    };\n    const hasIntersection = leftMiddlePoint.x > rightMiddlePoint.x;\n    if (hasIntersection) {\n      const leftCenter = point(x0 + cr[`${side}Left`], y - signL * cr[`${side}Left`]);\n      const leftCircle = circle(leftCenter, cr[`${side}Left`]);\n      const rightCenter = point(x1 - cr[`${side}Right`], y - signL * cr[`${side}Right`]);\n      const rightCircle = circle(rightCenter, cr[`${side}Right`]);\n      const circleIntersection = leftCircle.intersection(rightCircle);\n      const hasArcIntersection = circleIntersection.length > 0;\n      if (hasArcIntersection) {\n        const arcIntersection = circleIntersection[sign > 0 ? 1 : 0];\n        leftMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n        rightMiddlePoint = {\n          x: arcIntersection.x,\n          y: arcIntersection.y\n        };\n      } else {\n        const hasLeftLineRightArcIntersection = cr[`${side}Right`] > cr[`${side}Left`];\n        if (hasLeftLineRightArcIntersection) {\n          const newY = rightCircle.solveY(x0)[isTop ? 0 : 1];\n          leftPoint = {\n            x: x0,\n            y: newY\n          };\n          leftMiddlePoint = {\n            x: x0,\n            y: newY\n          };\n          rightMiddlePoint = {\n            x: x0,\n            y: newY\n          };\n        } else {\n          const newY = leftCircle.solveY(x1)[isTop ? 0 : 1];\n          rightPoint = {\n            x: x1,\n            y: newY\n          };\n          rightMiddlePoint = {\n            x: x1,\n            y: newY\n          };\n          leftMiddlePoint = {\n            x: x1,\n            y: newY\n          };\n        }\n      }\n    }\n    return [leftPoint, leftMiddlePoint, rightMiddlePoint, rightPoint];\n  };\n  const topPoints = getHalfPoints(\"top\");\n  const bottomPoints = getHalfPoints(\"bottom\");\n  return [bottomPoints[1], bottomPoints[0], ...topPoints,\n  // eslint-disable-next-line no-magic-numbers\n  bottomPoints[3], bottomPoints[2]];\n};\n\n// eslint-disable-next-line max-params\nexport const getVerticalBarPath = (props, width, cornerRadius) => {\n  const position = getPosition(props, width);\n  const sign = position.y0 > position.y1 ? 1 : -1;\n  const direction = sign > 0 ? \"0 0 1\" : \"0 0 0\";\n  const points = getVerticalBarPoints(position, sign, cornerRadius);\n  return mapPointsToPath(points, cornerRadius, direction);\n};\n\n// eslint-disable-next-line max-params\nexport const getHorizontalBarPath = (props, width, cornerRadius) => {\n  const position = getPosition(props, width);\n  const sign = position.x0 < position.x1 ? 1 : -1;\n  const direction = \"0 0 1\";\n  const cr = {\n    topRight: sign > 0 ? cornerRadius.topLeft : cornerRadius.bottomLeft,\n    bottomRight: sign > 0 ? cornerRadius.topRight : cornerRadius.bottomRight,\n    bottomLeft: sign > 0 ? cornerRadius.bottomRight : cornerRadius.topRight,\n    topLeft: sign > 0 ? cornerRadius.bottomLeft : cornerRadius.topLeft\n  };\n  const points = getHorizontalBarPoints(position, sign, cr);\n  return mapPointsToPath(points, cr, direction);\n};\nexport const getVerticalPolarBarPath = (props, cornerRadius) => {\n  const {\n    datum,\n    scale,\n    index,\n    alignment,\n    style\n  } = props;\n  const r1 = scale.y(datum._y0 || 0);\n  const r2 = scale.y(datum._y1 !== undefined ? datum._y1 : datum._y);\n  const currentAngle = scale.x(datum._x1 !== undefined ? datum._x1 : datum._x);\n  let start;\n  let end;\n  if (style.width) {\n    const width = getAngularWidth(props, style.width);\n    const size = alignment === \"middle\" ? width / 2 : width;\n    start = alignment === \"start\" ? currentAngle : currentAngle - size;\n    end = alignment === \"end\" ? currentAngle : currentAngle + size;\n  } else {\n    start = getStartAngle(props, Number(index));\n    end = getEndAngle(props, Number(index));\n  }\n  const getPath = edge => {\n    const pathFunction = d3Shape.arc().innerRadius(r1).outerRadius(r2).startAngle(transformAngle(start)).endAngle(transformAngle(end)).cornerRadius(cornerRadius[edge]);\n    return pathFunction();\n  };\n  const getPathData = edge => {\n    const rightPath = getPath(`${edge}Right`);\n    const rightMoves = rightPath.match(/[A-Z]/g) || [];\n    const rightCoords = rightPath.split(/[A-Z]/).slice(1);\n    const rightMiddle = rightMoves.indexOf(\"L\");\n    const leftPath = getPath(`${edge}Left`);\n    const leftMoves = leftPath.match(/[A-Z]/g) || [];\n    const leftCoords = leftPath.split(/[A-Z]/).slice(1);\n    const leftMiddle = leftMoves.indexOf(\"L\");\n    return {\n      rightMoves,\n      rightCoords,\n      rightMiddle,\n      leftMoves,\n      leftCoords,\n      leftMiddle\n    };\n  };\n\n  // eslint-disable-next-line max-statements\n  const getTopPath = () => {\n    const {\n      topRight,\n      topLeft\n    } = cornerRadius;\n    const arcLength = r2 * Math.abs(end - start);\n    const {\n      rightMoves,\n      rightCoords,\n      rightMiddle,\n      leftMoves,\n      leftCoords,\n      leftMiddle\n    } = getPathData(\"top\");\n    let moves;\n    let coords;\n    if (topRight === topLeft || arcLength < 2 * topRight + 2 * topLeft) {\n      moves = topRight > topLeft ? rightMoves : leftMoves;\n      coords = topRight > topLeft ? rightCoords : leftCoords;\n    } else {\n      // eslint-disable-next-line no-magic-numbers\n      const isShort = middle => middle < 3;\n      const rightOffset = topLeft > topRight && isShort(rightMiddle) ? 1 : 2;\n      let leftOffset;\n      if (topRight > topLeft) {\n        const defaultOffset = isShort(rightMiddle) ? leftMiddle : leftMiddle - 2;\n        leftOffset = isShort(leftMiddle) ? leftMiddle - 1 : defaultOffset;\n      } else {\n        const defaultOffset = isShort(leftMiddle) ? 1 : 2;\n        leftOffset = isShort(rightMiddle) ? defaultOffset : leftMiddle - 2;\n      }\n      moves = [...rightMoves.slice(0, rightOffset), ...leftMoves.slice(leftOffset)];\n      coords = [...rightCoords.slice(0, rightOffset), ...leftCoords.slice(leftOffset)];\n    }\n    const middle = moves.indexOf(\"L\");\n    const subMoves = moves.slice(0, middle);\n    const subCoords = coords.slice(0, middle);\n    return subMoves.map((m, i) => ({\n      command: m,\n      coords: subCoords[i].split(\",\")\n    }));\n  };\n\n  // eslint-disable-next-line max-statements\n  const getBottomPath = () => {\n    const {\n      bottomRight,\n      bottomLeft\n    } = cornerRadius;\n    const arcLength = r1 * Math.abs(end - start);\n    const {\n      rightMoves,\n      rightCoords,\n      rightMiddle,\n      leftMoves,\n      leftCoords,\n      leftMiddle\n    } = getPathData(\"bottom\");\n    let moves;\n    let coords;\n    if (bottomRight === bottomLeft || arcLength < 2 * bottomRight + 2 * bottomLeft) {\n      moves = bottomRight > bottomLeft ? rightMoves : leftMoves;\n      coords = bottomRight > bottomLeft ? rightCoords : leftCoords;\n    } else {\n      // eslint-disable-next-line no-magic-numbers\n      const isShort = (m, middle) => m.length - middle < 4;\n      const shortPath = bottomRight > bottomLeft ? isShort(rightMoves, rightMiddle) : isShort(leftMoves, leftMiddle);\n      // eslint-disable-next-line no-magic-numbers\n      const rightOffset = shortPath ? -1 : -3;\n      moves = [...leftMoves.slice(0, leftMiddle + 2), ...rightMoves.slice(rightOffset)];\n      coords = [...leftCoords.slice(0, leftMiddle + 2), ...rightCoords.slice(rightOffset)];\n    }\n    const middle = moves.indexOf(\"L\");\n    const subMoves = moves.slice(middle, -1);\n    const subCoords = coords.slice(middle, -1);\n    return subMoves.map((m, i) => ({\n      command: m,\n      coords: subCoords[i].split(\",\")\n    }));\n  };\n  const topPath = getTopPath();\n  const bottomPath = getBottomPath();\n  const moves = [...topPath, ...bottomPath];\n  const path = moves.reduce((memo, move) => `${memo}${move.command} ${move.coords.join()}`, \"\");\n  return `${path} z`;\n};\nexport const getBarPath = (props, width, cornerRadius) => {\n  if (props.getPath) {\n    return getCustomBarPath(props, width);\n  }\n  return props.horizontal ? getHorizontalBarPath(props, width, cornerRadius) : getVerticalBarPath(props, width, cornerRadius);\n};\nexport const getPolarBarPath = (props, cornerRadius) => {\n  // TODO Radial bars\n  return getVerticalPolarBarPath(props, cornerRadius);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}