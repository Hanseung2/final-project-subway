{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from \"react\";\nimport { evaluateProp } from \"./helpers\";\n\n/*\n  USER_PROPS_SAFELIST is to contain any string deemed safe for user props.\n  The startsWidth array will contain the start of any accepted user-prop that\n  starts with these characters.\n  The exactMatch will contain a list of exact prop names that are accepted.\n*/\nvar USER_PROPS_SAFELIST = {\n  startsWith: [\"data-\", \"aria-\"],\n  exactMatch: []\n};\n\n// Normally we'd use Template Literal Types, but we're avoiding it to maximize TS compatibility with TS < 4.1\n\n// `data-${string}` | `aria-${string}`;\n\n/**\n * doesPropStartWith: Function that takes a prop's key and runs it against all\n * options in the USER_PROPS_SAFELIST and checks to see if it starts with any\n * of those options.\n * @param {string} key: prop key to be tested against whitelist\n * @returns {Boolean}: returns true if the key starts with an option or false if\n * otherwise\n */\nvar doesPropStartWith = function doesPropStartWith(key) {\n  var startsWith = false;\n  USER_PROPS_SAFELIST.startsWith.forEach(function (starterString) {\n    var regex = new RegExp(\"\\\\b(\".concat(starterString, \")(\\\\w|-)+\"), \"g\");\n    if (regex.test(key)) startsWith = true;\n  });\n  return startsWith;\n};\n\n/**\n * isExactMatch: checks to see if the given key matches any of the 'exactMatch'\n * items in the whitelist\n * @param {String} key: prop key to be tested against the whitelist-exact match\n * array.\n * @returns {Boolean}: return true if whitelist contains that key, otherwise\n * returns false.\n */\nvar isExactMatch = function isExactMatch(key) {\n  return USER_PROPS_SAFELIST.exactMatch.includes(key);\n};\n\n/**\n * testIfSafeProp: tests prop's key against both startsWith and exactMatch values\n * @param {String} key: prop key to be tested against the whitelist\n * @returns {Boolean}: returns true if found in whitelist, otherwise returns false\n */\nvar testIfSafeProp = function testIfSafeProp(key) {\n  if (doesPropStartWith(key) || isExactMatch(key)) return true;\n  return false;\n};\n\n/**\n * Asserts that value is not null or undefined, throwing an error if it is.\n * @param value The value to assert\n * @param message The error message to throw\n */\nexport function assert(value, message) {\n  if (value === undefined || value === null) {\n    throw new Error(message);\n  }\n}\n\n/**\n * getSafeUserProps - function that takes in a props object and removes any\n * key-value entries that do not match filter strings in the USER_PROPS_SAFELIST\n * object.\n *\n * @param {Object} props: props to be filtered against USER_PROPS_SAFELIST\n * @returns {Object}: object containing remaining acceptable props\n */\nexport var getSafeUserProps = function getSafeUserProps(props) {\n  var propsToFilter = _objectSpread({}, props);\n  return Object.fromEntries(Object.entries(propsToFilter).filter(function (_ref) {\n    var _ref3 = _slicedToArray(_ref, 1),\n      key = _ref3[0];\n    return testIfSafeProp(key);\n  }).map(function (_ref2) {\n    var _ref4 = _slicedToArray(_ref2, 2),\n      key = _ref4[0],\n      value = _ref4[1];\n    return [key, evaluateProp(value, props)];\n  }));\n};\n\n/**\n * Wraps a component and adds safe user props\n *\n * @param {ReactElement} component: parent component\n * @param {Object} props: props to be filtered\n * @returns {ReactElement} modified component\n */\nexport var withSafeUserProps = function withSafeUserProps(component, props) {\n  return /*#__PURE__*/React.cloneElement(component, getSafeUserProps(props));\n};","map":{"version":3,"names":["React","evaluateProp","USER_PROPS_SAFELIST","startsWith","exactMatch","doesPropStartWith","key","forEach","starterString","regex","RegExp","concat","test","isExactMatch","includes","testIfSafeProp","assert","value","message","undefined","Error","getSafeUserProps","props","propsToFilter","_objectSpread","Object","fromEntries","entries","filter","_ref","_ref3","_slicedToArray","map","_ref2","_ref4","withSafeUserProps","component","cloneElement"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/node_modules/victory-core/es/victory-util/user-props.js"],"sourcesContent":["import * as React from \"react\";\nimport { evaluateProp } from \"./helpers\";\n\n/*\n  USER_PROPS_SAFELIST is to contain any string deemed safe for user props.\n  The startsWidth array will contain the start of any accepted user-prop that\n  starts with these characters.\n  The exactMatch will contain a list of exact prop names that are accepted.\n*/\nconst USER_PROPS_SAFELIST = {\n  startsWith: [\"data-\", \"aria-\"],\n  exactMatch: []\n};\n\n// Normally we'd use Template Literal Types, but we're avoiding it to maximize TS compatibility with TS < 4.1\n\n// `data-${string}` | `aria-${string}`;\n\n/**\n * doesPropStartWith: Function that takes a prop's key and runs it against all\n * options in the USER_PROPS_SAFELIST and checks to see if it starts with any\n * of those options.\n * @param {string} key: prop key to be tested against whitelist\n * @returns {Boolean}: returns true if the key starts with an option or false if\n * otherwise\n */\nconst doesPropStartWith = key => {\n  let startsWith = false;\n  USER_PROPS_SAFELIST.startsWith.forEach(starterString => {\n    const regex = new RegExp(`\\\\b(${starterString})(\\\\w|-)+`, \"g\");\n    if (regex.test(key)) startsWith = true;\n  });\n  return startsWith;\n};\n\n/**\n * isExactMatch: checks to see if the given key matches any of the 'exactMatch'\n * items in the whitelist\n * @param {String} key: prop key to be tested against the whitelist-exact match\n * array.\n * @returns {Boolean}: return true if whitelist contains that key, otherwise\n * returns false.\n */\nconst isExactMatch = key => USER_PROPS_SAFELIST.exactMatch.includes(key);\n\n/**\n * testIfSafeProp: tests prop's key against both startsWith and exactMatch values\n * @param {String} key: prop key to be tested against the whitelist\n * @returns {Boolean}: returns true if found in whitelist, otherwise returns false\n */\nconst testIfSafeProp = key => {\n  if (doesPropStartWith(key) || isExactMatch(key)) return true;\n  return false;\n};\n\n/**\n * Asserts that value is not null or undefined, throwing an error if it is.\n * @param value The value to assert\n * @param message The error message to throw\n */\nexport function assert(value, message) {\n  if (value === undefined || value === null) {\n    throw new Error(message);\n  }\n}\n\n/**\n * getSafeUserProps - function that takes in a props object and removes any\n * key-value entries that do not match filter strings in the USER_PROPS_SAFELIST\n * object.\n *\n * @param {Object} props: props to be filtered against USER_PROPS_SAFELIST\n * @returns {Object}: object containing remaining acceptable props\n */\nexport const getSafeUserProps = props => {\n  const propsToFilter = {\n    ...props\n  };\n  return Object.fromEntries(Object.entries(propsToFilter).filter(_ref => {\n    let [key] = _ref;\n    return testIfSafeProp(key);\n  }).map(_ref2 => {\n    let [key, value] = _ref2;\n    return [key, evaluateProp(value, props)];\n  }));\n};\n\n/**\n * Wraps a component and adds safe user props\n *\n * @param {ReactElement} component: parent component\n * @param {Object} props: props to be filtered\n * @returns {ReactElement} modified component\n */\nexport const withSafeUserProps = (component, props) => {\n  return /*#__PURE__*/React.cloneElement(component, getSafeUserProps(props));\n};"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,WAAW;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,mBAAmB,GAAG;EAC1BC,UAAU,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;EAC9BC,UAAU,EAAE;AACd,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,GAAG,EAAI;EAC/B,IAAIH,UAAU,GAAG,KAAK;EACtBD,mBAAmB,CAACC,UAAU,CAACI,OAAO,CAAC,UAAAC,aAAa,EAAI;IACtD,IAAMC,KAAK,GAAG,IAAIC,MAAM,QAAAC,MAAA,CAAQH,aAAa,gBAAa,GAAG,CAAC;IAC9D,IAAIC,KAAK,CAACG,IAAI,CAACN,GAAG,CAAC,EAAEH,UAAU,GAAG,IAAI;EACxC,CAAC,CAAC;EACF,OAAOA,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMU,YAAY,GAAG,SAAfA,YAAYA,CAAGP,GAAG;EAAA,OAAIJ,mBAAmB,CAACE,UAAU,CAACU,QAAQ,CAACR,GAAG,CAAC;AAAA;;AAExE;AACA;AACA;AACA;AACA;AACA,IAAMS,cAAc,GAAG,SAAjBA,cAAcA,CAAGT,GAAG,EAAI;EAC5B,IAAID,iBAAiB,CAACC,GAAG,CAAC,IAAIO,YAAY,CAACP,GAAG,CAAC,EAAE,OAAO,IAAI;EAC5D,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrC,IAAID,KAAK,KAAKE,SAAS,IAAIF,KAAK,KAAK,IAAI,EAAE;IACzC,MAAM,IAAIG,KAAK,CAACF,OAAO,CAAC;EAC1B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAGC,KAAK,EAAI;EACvC,IAAMC,aAAa,GAAAC,aAAA,KACdF,KAAK,CACT;EACD,OAAOG,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACJ,aAAa,CAAC,CAACK,MAAM,CAAC,UAAAC,IAAI,EAAI;IACrE,IAAAC,KAAA,GAAAC,cAAA,CAAYF,IAAI;MAAXvB,GAAG,GAAAwB,KAAA;IACR,OAAOf,cAAc,CAACT,GAAG,CAAC;EAC5B,CAAC,CAAC,CAAC0B,GAAG,CAAC,UAAAC,KAAK,EAAI;IACd,IAAAC,KAAA,GAAAH,cAAA,CAAmBE,KAAK;MAAnB3B,GAAG,GAAA4B,KAAA;MAAEjB,KAAK,GAAAiB,KAAA;IACf,OAAO,CAAC5B,GAAG,EAAEL,YAAY,CAACgB,KAAK,EAAEK,KAAK,CAAC,CAAC;EAC1C,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMa,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,SAAS,EAAEd,KAAK,EAAK;EACrD,OAAO,aAAatB,KAAK,CAACqC,YAAY,CAACD,SAAS,EAAEf,gBAAgB,CAACC,KAAK,CAAC,CAAC;AAC5E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}