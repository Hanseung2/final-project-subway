{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{useLocation}from'react-router-dom';import{IoCloseOutline}from\"react-icons/io5\";import axios from'axios';import covData from'../../data/cov.json';// Adjust the path as per your project structure\nimport{MdElevator}from\"react-icons/md\";import{FaWheelchair}from\"react-icons/fa\";import{LuParkingCircle}from\"react-icons/lu\";import{GiVendingMachine}from\"react-icons/gi\";import{FcSelfServiceKiosk}from\"react-icons/fc\";import{FaTrainSubway}from\"react-icons/fa6\";import{LiaPlaceOfWorshipSolid}from\"react-icons/lia\";import{MdLocationCity}from\"react-icons/md\";import{FaBabyCarriage}from\"react-icons/fa\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var lineImages={1001:require('../../assets/img/subwaymapmarker/1호선마커.png'),1002:require('../../assets/img/subwaymapmarker/2호선마커.png'),1003:require('../../assets/img/subwaymapmarker/3호선마커.png'),1004:require('../../assets/img/subwaymapmarker/4호선마커.png'),1005:require('../../assets/img/subwaymapmarker/5호선마커.png'),1006:require('../../assets/img/subwaymapmarker/6호선마커.png'),1007:require('../../assets/img/subwaymapmarker/7호선마커.png'),1008:require('../../assets/img/subwaymapmarker/8호선마커.png'),1009:require('../../assets/img/subwaymapmarker/9호선마커.png')// 다른 지하철 호선에 대한 이미지 경로 추가\n};var Right=function Right(_ref){var isVisible=_ref.isVisible,toggleRightVisibility=_ref.toggleRightVisibility,stationName=_ref.stationName,stationLine=_ref.stationLine;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),congestionData=_useState2[0],setCongestionData=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),FR_CODE=_useState4[0],setFR_CODE=_useState4[1];var location=useLocation();var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),arrivalInfo=_useState6[0],setArrivalInfo=_useState6[1];// 도착 정보 상태\nvar printedDirections=[];console.log(stationName);var stationInfo=covData.find(function(item){return item.station_name===stationName;});useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _xmlDoc$querySelector,simplifiedStationName,response,parser,xmlDoc,code,currentDate,roundedMinutes,roundedTime,dow,hh,options,congestionResponse;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;// Remove the last character from stationName\nsimplifiedStationName=stationName.replace(/\\(.*/,'');// Call API to get station information by simplified station name\nconsole.log(\"http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/\".concat(simplifiedStationName));_context.next=5;return axios.get(\"http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/\".concat(simplifiedStationName));case 5:response=_context.sent;parser=new DOMParser();xmlDoc=parser.parseFromString(response.data,\"text/xml\");code=(_xmlDoc$querySelector=xmlDoc.querySelector(\"FR_CODE\"))===null||_xmlDoc$querySelector===void 0?void 0:_xmlDoc$querySelector.textContent;console.log(code);if(!code){_context.next=24;break;}setFR_CODE(code);currentDate=new Date();roundedMinutes=Math.round(currentDate.getMinutes()/10)*10;// Round current minutes to the nearest 10\nroundedTime=new Date(currentDate.getFullYear(),currentDate.getMonth(),currentDate.getDate(),currentDate.getHours(),roundedMinutes);dow=[\"SUN\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\"][roundedTime.getDay()];hh=String(roundedTime.getHours()).padStart(2,'0');// Add leading zero if single digit\noptions={headers:{accept:'application/json','Content-Type':'application/json',appkey:'PEKSyFHvkl5imbyfUyw8D2gFUcgqSnxu4d3c8keS'}};_context.next=20;return axios.get(\"https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/\".concat(code,\"?dow=\").concat(dow,\"&hh=\").concat(hh),options);case 20:congestionResponse=_context.sent;setCongestionData(congestionResponse.data);_context.next=25;break;case 24:console.error(\"Failed to get station ID from API response.\");case 25:_context.next=30;break;case 27:_context.prev=27;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 30:case\"end\":return _context.stop();}},_callee,null,[[0,27]]);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[stationName]);var handleClose=function handleClose(){toggleRightVisibility(false);};var getCurrentTimeSlot=function getCurrentTimeSlot(){if(!congestionData)return null;var currentTime=new Date();var roundedMinutes=Math.round(currentTime.getMinutes()/10)*10;// Round current minutes to the nearest 10\nvar roundedTime=new Date(currentTime.getFullYear(),currentTime.getMonth(),currentTime.getDate(),currentTime.getHours(),roundedMinutes);var currentTimeHHMM=\"\".concat(String(roundedTime.getHours()).padStart(2,'0'),\":\").concat(String(roundedTime.getMinutes()).padStart(2,'0'));var timeSlots=congestionData.contents.stat[0].data;for(var i=0;i<timeSlots.length;i++){var timeSlotHHMM=\"\".concat(timeSlots[i].hh,\":\").concat(timeSlots[i].mm);if(timeSlotHHMM===currentTimeHHMM){return timeSlots[i];}}return null;};var fetchDataFromFlask=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response,data;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch(\"http://flask:8082/receive_subway_arrive\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({\"stationName\":stationName})// 데이터를 JSON 문자열로 변환하여 전송\n});case 3:response=_context2.sent;_context2.next=6;return response.json();case 6:data=_context2.sent;// 받아온 도착 정보를 상태에 저장\nsetArrivalInfo(data);_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);console.error('데이터 가져오기 실패:',_context2.t0);case 13:case\"end\":return _context2.stop();}},_callee2,null,[[0,10]]);}));return function fetchDataFromFlask(){return _ref3.apply(this,arguments);};}();// 컴포넌트가 마운트될 때 데이터 가져오기\nuseEffect(function(){fetchDataFromFlask();},[stationName]);// stationName이 변경될 때마다 fetchDataFromFlask 호출\nfunction getLineImage(subwayId){return lineImages[subwayId];}function getSubwayLineName(subwayId){switch(subwayId){case\"1001\":return\"1호선\";case\"1002\":return\"2호선\";case\"1003\":return\"3호선\";case\"1004\":return\"4호선\";case\"1005\":return\"5호선\";case\"1006\":return\"6호선\";case\"1007\":return\"7호선\";case\"1008\":return\"8호선\";case 1009:return\"9호선\";// 다른 호선에 대한 경우도 추가\ndefault:return\"해당없음\";}}var groupedData=(arrivalInfo||[]).reduce(function(acc,info){if(!acc[info.subwayId]){acc[info.subwayId]=[];}acc[info.subwayId].push(info);return acc;},{});return/*#__PURE__*/_jsxs(\"div\",{id:\"right\",className:isVisible?'':'hidden',children:[/*#__PURE__*/_jsx(\"div\",{className:\"close-button-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"close-button\",onClick:handleClose,children:/*#__PURE__*/_jsx(IoCloseOutline,{})})}),congestionData&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[stationName,\" \\uCE78 \\uD63C\\uC7A1\\uB3C4 \\uC815\\uBCF4\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD638\\uC120: \",congestionData.contents.subwayLine]}),getCurrentTimeSlot()?/*#__PURE__*/_jsxs(\"div\",{className:\"congestion-level\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[getCurrentTimeSlot().hh,\":\",getCurrentTimeSlot().mm,\"\\uC758 \",stationName,\"\\uC758 \\uCE78 \\uD63C\\uC7A1\\uB3C4\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"congestion-boxes\",children:getCurrentTimeSlot().congestionCar.map(function(level,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"congestion-box \".concat(level<=40?'green':level<=80?'yellow':level<=120?'orange':'red'),children:[Math.floor(level/160*100),\"%\"]},index);})})]}):/*#__PURE__*/_jsx(\"p\",{children:\"No congestion data available for the current time.\"})]}),stationName&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\uD83D\\uDCA1 \",stationName,\"\\uC758 \",/*#__PURE__*/_jsx(\"br\",{}),\"\\uC2E4\\uC2DC\\uAC04 \\uB3C4\\uCC29 \\uC815\\uBCF4\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),arrivalInfo&&/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'flex-start'},children:[Object.keys(groupedData).map(function(subwayId){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"img\",{style:{width:'20px',height:'auto',verticalAlign:'middle'},src:getLineImage(subwayId),alt:\"Subway Line Marker\"}),getSubwayLineName(subwayId)]}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexWrap:'wrap'},children:groupedData[subwayId].map(function(info,index){// trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\nvar _info$trainLineNm$spl=info.trainLineNm.split(' - '),_info$trainLineNm$spl2=_slicedToArray(_info$trainLineNm$spl,2),direction=_info$trainLineNm$spl2[0],train=_info$trainLineNm$spl2[1];// 현재 열차의 방면이 이미 출력된 방면인지 확인\nvar directionIndex=printedDirections.indexOf(train);// 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\nif(directionIndex===-1){printedDirections.push(train);}return/*#__PURE__*/_jsxs(\"div\",{style:{border:'1px solid black',padding:'10px',margin:'5px'},children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[direction,\" (\",train,\") \",directionIndex===-1?'- 첫 번째 열차':'- 두 번째 열차']})}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83D\\uDC49 \",info.recptnDt,\" \\uAE30\\uC900 \",/*#__PURE__*/_jsxs(\"span\",{style:{color:'red'},children:[Math.floor(info.barvlDt/60),\"\\uBD84 \",info.barvlDt%60,\"\\uCD08\"]}),\" \\uB4A4 \\uB3C4\\uCC29\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u2714 \\uD604\\uC704\\uCE58 : \",info.arvlMsg3]})]},info.rowNum);})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"hr\",{})]},subwayId);}),/*#__PURE__*/_jsx(\"br\",{}),\" \"]})]}),stationInfo&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD3B8\\uC758\\uC2DC\\uC124\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"conv\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.el==='Y'&&/*#__PURE__*/_jsx(MdElevator,{}),stationInfo.el==='Y'&&\"엘리베이터\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.wl==='Y'&&/*#__PURE__*/_jsx(FaWheelchair,{}),stationInfo.wl==='Y'&&\"휘체어리프트\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.parking==='Y'&&/*#__PURE__*/_jsx(LuParkingCircle,{}),stationInfo.parking==='Y'&&\"환승주차장\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.cim==='Y'&&/*#__PURE__*/_jsx(GiVendingMachine,{}),stationInfo.cim==='Y'&&\"무인민원발급기\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.exchange==='Y'&&/*#__PURE__*/_jsx(FcSelfServiceKiosk,{}),stationInfo.exchange==='Y'&&\"환전키오스크\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.train==='Y'&&/*#__PURE__*/_jsx(FaTrainSubway,{}),stationInfo.train==='Y'&&\"기차예매역\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.culture==='Y'&&/*#__PURE__*/_jsx(LiaPlaceOfWorshipSolid,{}),stationInfo.culture==='Y'&&\"문화공간\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.place==='Y'&&/*#__PURE__*/_jsx(MdLocationCity,{}),stationInfo.place==='Y'&&\"만남의장소\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[stationInfo.fdroom==='Y'&&/*#__PURE__*/_jsx(FaBabyCarriage,{}),stationInfo.fdroom==='Y'&&\"유아수유방\"]})]})]})]});};export default Right;","map":{"version":3,"names":["React","useState","useEffect","useLocation","IoCloseOutline","axios","covData","MdElevator","FaWheelchair","LuParkingCircle","GiVendingMachine","FcSelfServiceKiosk","FaTrainSubway","LiaPlaceOfWorshipSolid","MdLocationCity","FaBabyCarriage","jsx","_jsx","jsxs","_jsxs","lineImages","require","Right","_ref","isVisible","toggleRightVisibility","stationName","stationLine","_useState","_useState2","_slicedToArray","congestionData","setCongestionData","_useState3","_useState4","FR_CODE","setFR_CODE","location","_useState5","_useState6","arrivalInfo","setArrivalInfo","printedDirections","console","log","stationInfo","find","item","station_name","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_xmlDoc$querySelector","simplifiedStationName","response","parser","xmlDoc","code","currentDate","roundedMinutes","roundedTime","dow","hh","options","congestionResponse","wrap","_callee$","_context","prev","next","replace","concat","get","sent","DOMParser","parseFromString","data","querySelector","textContent","Date","Math","round","getMinutes","getFullYear","getMonth","getDate","getHours","getDay","String","padStart","headers","accept","appkey","error","t0","stop","apply","arguments","handleClose","getCurrentTimeSlot","currentTime","currentTimeHHMM","timeSlots","contents","stat","i","length","timeSlotHHMM","mm","fetchDataFromFlask","_ref3","_callee2","_callee2$","_context2","fetch","method","body","JSON","stringify","json","getLineImage","subwayId","getSubwayLineName","groupedData","reduce","acc","info","push","id","className","children","onClick","subwayLine","congestionCar","map","level","index","floor","style","display","flexDirection","alignItems","Object","keys","width","height","verticalAlign","src","alt","flexWrap","_info$trainLineNm$spl","trainLineNm","split","_info$trainLineNm$spl2","direction","train","directionIndex","indexOf","border","padding","margin","recptnDt","color","barvlDt","arvlMsg3","rowNum","el","wl","parking","cim","exchange","culture","place","fdroom"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/src/components/section/Right.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport axios from 'axios';\nimport covData from '../../data/cov.json'; // Adjust the path as per your project structure\nimport { MdElevator } from \"react-icons/md\";\nimport { FaWheelchair } from \"react-icons/fa\";\nimport { LuParkingCircle } from \"react-icons/lu\";\nimport { GiVendingMachine } from \"react-icons/gi\";\nimport { FcSelfServiceKiosk } from \"react-icons/fc\";\nimport { FaTrainSubway } from \"react-icons/fa6\";\nimport { LiaPlaceOfWorshipSolid } from \"react-icons/lia\";\nimport { MdLocationCity } from \"react-icons/md\";\nimport { FaBabyCarriage } from \"react-icons/fa\";\n\nconst lineImages = {\n    1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n    1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n    1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n    1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n    1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n    1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n    1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n    1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n    1009: require('../../assets/img/subwaymapmarker/9호선마커.png'),\n    // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\n\nconst Right = ({ isVisible, toggleRightVisibility, stationName, stationLine }) => {\n    const [congestionData, setCongestionData] = useState(null);\n    const [FR_CODE, setFR_CODE] = useState(null);\n    const location = useLocation();\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n    const printedDirections = [];\n\n    console.log(stationName);\n    const stationInfo = covData.find(item => item.station_name === stationName);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Remove the last character from stationName\n                const simplifiedStationName = stationName.replace(/\\(.*/, '');\n\n                // Call API to get station information by simplified station name\n                console.log(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const response = await axios.get(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n                const code = xmlDoc.querySelector(\"FR_CODE\")?.textContent;\n                console.log(code);\n                \n                if (code) {\n                    setFR_CODE(code);\n                    const currentDate = new Date();\n                    const roundedMinutes = Math.round(currentDate.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n                    const roundedTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), roundedMinutes);\n                    const dow = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"][roundedTime.getDay()];\n                    const hh = String(roundedTime.getHours()).padStart(2, '0'); // Add leading zero if single digit\n                    const options = {\n                        headers: {\n                            accept: 'application/json',\n                            'Content-Type': 'application/json',\n                            appkey: 'PEKSyFHvkl5imbyfUyw8D2gFUcgqSnxu4d3c8keS'\n                        }\n                    };\n                    const congestionResponse = await axios.get(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${code}?dow=${dow}&hh=${hh}`, options);\n                    setCongestionData(congestionResponse.data);\n                } else {\n                    console.error(\"Failed to get station ID from API response.\");\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchData();\n    }, [stationName]);\n\n    \n\n    const handleClose = () => {\n        toggleRightVisibility(false);\n    };\n\n    const getCurrentTimeSlot = () => {\n        if (!congestionData) return null;\n        const currentTime = new Date();\n        const roundedMinutes = Math.round(currentTime.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n        const roundedTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), roundedMinutes);\n        const currentTimeHHMM = `${String(roundedTime.getHours()).padStart(2, '0')}:${String(roundedTime.getMinutes()).padStart(2, '0')}`;\n        const timeSlots = congestionData.contents.stat[0].data;\n        for (let i = 0; i < timeSlots.length; i++) {\n            const timeSlotHHMM = `${timeSlots[i].hh}:${timeSlots[i].mm}`;\n            if (timeSlotHHMM === currentTimeHHMM) {\n                return timeSlots[i];\n            }\n        }\n        return null;\n    };\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // 요청을 보냄\n            const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ \"stationName\": stationName }), // 데이터를 JSON 문자열로 변환하여 전송\n            });\n\n            // 응답을 JSON 형식으로 파싱\n            const data = await response.json();\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n\n    function getLineImage(subwayId) {\n        return lineImages[subwayId];\n    }\n    function getSubwayLineName(subwayId) {\n        switch(subwayId) {\n            case \"1001\":\n                return \"1호선\";\n            case \"1002\":\n                return \"2호선\";\n            case \"1003\":\n                return \"3호선\";\n            case \"1004\":\n                return \"4호선\";\n            case \"1005\":\n                return \"5호선\";\n            case \"1006\":\n                return \"6호선\";\n            case \"1007\":\n                return \"7호선\";\n            case \"1008\":\n                return \"8호선\";\n            case 1009:\n                return \"9호선\";\n            // 다른 호선에 대한 경우도 추가\n            default:\n                return \"해당없음\";\n        }\n    }\n    const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n        if (!acc[info.subwayId]) {\n            acc[info.subwayId] = [];\n        }\n        acc[info.subwayId].push(info);\n        return acc;\n    }, {});\n\n\n    return (\n        <div id='right' className={isVisible ? '' : 'hidden'}>\n            <div className=\"close-button-container\">\n                <button className=\"close-button\" onClick={handleClose}><IoCloseOutline /></button>\n            </div>\n            {/* Render congestion data here */}\n            {congestionData && (\n                <div>\n                    <h2>{stationName} 칸 혼잡도 정보</h2>\n                    {/*<p>Station ID: {FR_CODE}</p>*/}\n                    <p>호선: {congestionData.contents.subwayLine}</p>\n                    {getCurrentTimeSlot() ? (\n                    <div className=\"congestion-level\">\n                        <p>{getCurrentTimeSlot().hh}:{getCurrentTimeSlot().mm}의 {stationName}의 칸 혼잡도</p>\n                        <div className=\"congestion-boxes\">\n                            {getCurrentTimeSlot().congestionCar.map((level, index) => (\n                                <div key={index} className={`congestion-box ${level <= 40 ? 'green' : level <= 80 ? 'yellow' : level <= 120 ? 'orange' : 'red'}`}>\n                                    {Math.floor((level / 160) * 100)}%\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <p>No congestion data available for the current time.</p>\n                )}\n                </div>\n            )}\n\n{stationName && (\n                <div>\n                    <br/>\n                    <h2>💡 {stationName}의 <br/>실시간 도착 정보</h2>\n                    <br/>\n                    <br/>\n                    {/* arrivalInfo가 존재하는 경우에만 아래 내용을 표시 */}\n                    {arrivalInfo && (\n                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                            {/* arrivalInfo를 순회하며 각 도착 정보를 출력 */}\n                                        {/* 열차 정보와 도착 정보 */}\n                            {Object.keys(groupedData).map(subwayId => (\n                                <div key={subwayId}>\n                                    <p>\n                                        <img\n                                            style={{ width: '20px', height: 'auto', verticalAlign: 'middle' }}\n                                            src={getLineImage(subwayId)}\n                                            alt=\"Subway Line Marker\"\n                                        />\n                                        {getSubwayLineName(subwayId)}\n                                    </p>\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                        {groupedData[subwayId].map((info, index) => {\n                                            // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n                                            const [direction, train] = info.trainLineNm.split(' - ');\n                                            // 현재 열차의 방면이 이미 출력된 방면인지 확인\n                                            const directionIndex = printedDirections.indexOf(train);\n                                            // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n                                            if (directionIndex === -1) {\n                                                printedDirections.push(train);\n                                            }\n\n                                            return (\n                                                <div key={info.rowNum} style={{ border: '1px solid black', padding: '10px', margin: '5px' }}>\n                                                    <div>\n                                                        <p>\n                                                            {direction} ({train}) {directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차'}\n                                                        </p>\n                                                    </div>\n                                                    <p>\n                                                        👉 {info.recptnDt} 기준 <span style={{ color: 'red' }}>{Math.floor(info.barvlDt / 60)}분 {info.barvlDt % 60}초</span> 뒤 도착\n                                                    </p>\n                                                    <p>✔ 현위치 : {info.arvlMsg3}</p>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <br/>\n                                    <hr/>\n                                </div>\n                            ))}\n                            <br/> {/* 모든 출력이 완료된 후에 줄바꿈 추가 */}\n                        </div>\n                    )}\n                </div>\n            )}\n            {stationInfo && (\n    <div>\n        <h2>편의시설</h2>\n        <br/>\n        <div className='conv'>\n        <p>{stationInfo.el === 'Y' && <MdElevator />}{stationInfo.el === 'Y' && \"엘리베이터\" }</p>\n        <p>{stationInfo.wl === 'Y' && <FaWheelchair />}{stationInfo.wl === 'Y' && \"휘체어리프트\"}</p>\n        <p>{stationInfo.parking === 'Y' && <LuParkingCircle />}{stationInfo.parking === 'Y' && \"환승주차장\"}</p>\n        <p>{stationInfo.cim === 'Y' && <GiVendingMachine />}{stationInfo.cim === 'Y' && \"무인민원발급기\"}</p>\n        <p>{stationInfo.exchange === 'Y' && <FcSelfServiceKiosk />}{stationInfo.exchange === 'Y' && \"환전키오스크\"}</p>\n        <p>{stationInfo.train === 'Y' && <FaTrainSubway />}{stationInfo.train === 'Y' &&\"기차예매역\" }</p>\n        <p>{stationInfo.culture === 'Y' && <LiaPlaceOfWorshipSolid />}{stationInfo.culture === 'Y' && \"문화공간\"}</p>\n        <p>{stationInfo.place === 'Y' && <MdLocationCity />}{stationInfo.place === 'Y' && \"만남의장소\"}</p>\n        <p>{stationInfo.fdroom === 'Y' && <FaBabyCarriage />}{stationInfo.fdroom === 'Y' && \"유아수유방\"}</p>\n        </div>\n    </div>\n)}\n        </div>\n        \n    );\n};\n\nexport default Right;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}