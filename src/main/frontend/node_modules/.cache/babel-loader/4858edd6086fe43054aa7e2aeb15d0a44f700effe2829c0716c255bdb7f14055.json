{"ast":null,"code":"/**\n * A point in the 2d plane\n */\nexport var point = function point(x, y) {\n  return {\n    x: x,\n    y: y,\n    distance: function distance(p1) {\n      return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n    },\n    // vector addition in 2d plane\n    add: function add(p1) {\n      return point(this.x + p1.x, this.y + p1.y);\n    },\n    // vector subtraction in 2d\n    // returns p0 - p1\n    subtract: function subtract(p1) {\n      return point(this.x - p1.x, this.y - p1.y);\n    },\n    // multiply a 2d point by a scalar\n    scalarMult: function scalarMult(n) {\n      return point(this.x * n, this.y * n);\n    },\n    scalarDivide: function scalarDivide(n) {\n      if (n === 0) {\n        throw new Error(\"Division by 0 error\");\n      }\n      return point(this.x / n, this.y / n);\n    },\n    equals: function equals(p1) {\n      return this.x === p1.x && this.y === p1.y;\n    }\n  };\n};\n/**\n * A circle in the 2d plane\n */\nexport var circle = function circle(center, radius) {\n  return {\n    center: center,\n    radius: radius,\n    hasIntersection: function hasIntersection(circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n      if (d > r0 + r1) {\n        return false; // separate circles\n      }\n\n      if (d < Math.abs(r0 - r1)) {\n        return false; // one circle contains another\n      }\n\n      return true;\n    },\n    equals: function equals(circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      return r0 === r1 && P0.equals(P1);\n    },\n    // Source: http://paulbourke.net/geometry/circlesphere/\n    // \"Intersection of two circles\" by Paul Bourke\n    // Left-most point is returned as 0th element of array\n    // Right-most point is returned as 1st elemennt of array\n    intersection: function intersection(circle1) {\n      // eslint-disable-line max-statements\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n      if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n        return [];\n      }\n      var a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n      var h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n      var P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n      var x0 = P0.x,\n        y0 = P0.y;\n      var x1 = P1.x,\n        y1 = P1.y;\n      var x2 = P2.x,\n        y2 = P2.y;\n      var P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n      P3s.sort(function (Point1, Point2) {\n        return Point1.x - Point2.x;\n      });\n      return P3s;\n    },\n    solveX: function solveX(y) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n      return [this.center.x - sqrt, this.center.x + sqrt];\n    },\n    solveY: function solveY(x) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n      return [this.center.y - sqrt, this.center.y + sqrt];\n    }\n  };\n};","map":{"version":3,"names":["point","x","y","distance","p1","Math","sqrt","pow","add","subtract","scalarMult","n","scalarDivide","Error","equals","circle","center","radius","hasIntersection","circle1","P0","P1","r0","r1","d","abs","intersection","a","h","P2","x0","y0","x1","y1","x2","y2","P3s","sort","Point1","Point2","solveX","solveY"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/node_modules/victory-bar/es/geometry-helper-methods.js"],"sourcesContent":["/**\n * A point in the 2d plane\n */\nexport const point = (x, y) => ({\n  x,\n  y,\n  distance(p1) {\n    return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n  },\n  // vector addition in 2d plane\n  add(p1) {\n    return point(this.x + p1.x, this.y + p1.y);\n  },\n  // vector subtraction in 2d\n  // returns p0 - p1\n  subtract(p1) {\n    return point(this.x - p1.x, this.y - p1.y);\n  },\n  // multiply a 2d point by a scalar\n  scalarMult(n) {\n    return point(this.x * n, this.y * n);\n  },\n  scalarDivide(n) {\n    if (n === 0) {\n      throw new Error(\"Division by 0 error\");\n    }\n    return point(this.x / n, this.y / n);\n  },\n  equals(p1) {\n    return this.x === p1.x && this.y === p1.y;\n  }\n});\n/**\n * A circle in the 2d plane\n */\nexport const circle = (center, radius) => ({\n  center,\n  radius,\n  hasIntersection(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (d > r0 + r1) {\n      return false; // separate circles\n    }\n    if (d < Math.abs(r0 - r1)) {\n      return false; // one circle contains another\n    }\n    return true;\n  },\n  equals(circle1) {\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    return r0 === r1 && P0.equals(P1);\n  },\n  // Source: http://paulbourke.net/geometry/circlesphere/\n  // \"Intersection of two circles\" by Paul Bourke\n  // Left-most point is returned as 0th element of array\n  // Right-most point is returned as 1st elemennt of array\n  intersection(circle1) {\n    // eslint-disable-line max-statements\n    const P0 = this.center;\n    const P1 = circle1.center;\n    const r0 = this.radius;\n    const r1 = circle1.radius;\n    const d = P0.distance(P1);\n    if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n      return [];\n    }\n    const a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n    const h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n    const P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n    const {\n      x: x0,\n      y: y0\n    } = P0;\n    const {\n      x: x1,\n      y: y1\n    } = P1;\n    const {\n      x: x2,\n      y: y2\n    } = P2;\n    const P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n    P3s.sort((Point1, Point2) => Point1.x - Point2.x);\n    return P3s;\n  },\n  solveX(y) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n    return [this.center.x - sqrt, this.center.x + sqrt];\n  },\n  solveY(x) {\n    const sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n    return [this.center.y - sqrt, this.center.y + sqrt];\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}