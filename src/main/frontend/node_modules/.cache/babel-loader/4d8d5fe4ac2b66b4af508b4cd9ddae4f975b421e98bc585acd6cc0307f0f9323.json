{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/\\uC190\\uD55C\\uC2B9/Desktop/project-subway/src/main/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  var time = +(0, _index.toDate)(date);\n  var _sort = [+(0, _index.toDate)(interval.start), +(0, _index.toDate)(interval.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    startTime = _sort2[0],\n    endTime = _sort2[1];\n  return time >= startTime && time <= endTime;\n}","map":{"version":3,"names":["_slicedToArray","require","default","exports","isWithinInterval","_index","date","interval","time","toDate","_sort","start","end","sort","a","b","_sort2","startTime","endTime"],"sources":["C:/Users/손한승/Desktop/project-subway/src/main/frontend/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["\"use strict\";\nexports.isWithinInterval = isWithinInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nfunction isWithinInterval(date, interval) {\n  const time = +(0, _index.toDate)(date);\n  const [startTime, endTime] = [\n    +(0, _index.toDate)(interval.start),\n    +(0, _index.toDate)(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,cAAA,GAAAC,OAAA,8HAAAC,OAAA;AACbC,OAAO,CAACC,gBAAgB,GAAGA,gBAAgB;AAC3C,IAAIC,MAAM,GAAGJ,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,gBAAgBA,CAACE,IAAI,EAAEC,QAAQ,EAAE;EACxC,IAAMC,IAAI,GAAG,CAAC,CAAC,CAAC,EAAEH,MAAM,CAACI,MAAM,EAAEH,IAAI,CAAC;EACtC,IAAAI,KAAA,GAA6B,CAC3B,CAAC,CAAC,CAAC,EAAEL,MAAM,CAACI,MAAM,EAAEF,QAAQ,CAACI,KAAK,CAAC,EACnC,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACI,MAAM,EAAEF,QAAQ,CAACK,GAAG,CAAC,CAClC,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAC,MAAA,GAAAhB,cAAA,CAAAU,KAAA;IAHhBO,SAAS,GAAAD,MAAA;IAAEE,OAAO,GAAAF,MAAA;EAKzB,OAAOR,IAAI,IAAIS,SAAS,IAAIT,IAAI,IAAIU,OAAO;AAC7C"},"metadata":{},"sourceType":"script","externalDependencies":[]}