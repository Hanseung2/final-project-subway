[{"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\index.js":"1","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\App.js":"2","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\store.js":"3","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Signup.jsx":"4","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Nav.jsx":"5","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Routemap.jsx":"6","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Map.jsx":"7","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Tsteam.jsx":"8","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Login.jsx":"9","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Main.jsx":"10","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\reducers.js":"11","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\time.js":"12","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Header.jsx":"13","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\actions.js":"14","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Right.jsx":"15","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Sns.jsx":"16","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Menu.jsx":"17","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Dest.jsx":"18","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Logo.jsx":"19","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\header.js":"20","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Pre.jsx":"21","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\TimeContext.js":"22","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Tmpp.jsx":"23"},{"size":285,"mtime":1718279381397,"results":"24","hashOfConfig":"25"},{"size":1764,"mtime":1718288312209,"results":"26","hashOfConfig":"25"},{"size":144,"mtime":1718279385879,"results":"27","hashOfConfig":"25"},{"size":3743,"mtime":1718279386361,"results":"28","hashOfConfig":"25"},{"size":18133,"mtime":1718300745017,"results":"29","hashOfConfig":"25"},{"size":16252,"mtime":1718296750400,"results":"30","hashOfConfig":"25"},{"size":13542,"mtime":1718296700205,"results":"31","hashOfConfig":"25"},{"size":1569,"mtime":1718279386426,"results":"32","hashOfConfig":"25"},{"size":1158,"mtime":1718279386058,"results":"33","hashOfConfig":"25"},{"size":699,"mtime":1718279385332,"results":"34","hashOfConfig":"25"},{"size":453,"mtime":1718279385747,"results":"35","hashOfConfig":"25"},{"size":289,"mtime":1718279385987,"results":"36","hashOfConfig":"25"},{"size":1091,"mtime":1718279385276,"results":"37","hashOfConfig":"25"},{"size":328,"mtime":1718279385528,"results":"38","hashOfConfig":"25"},{"size":13557,"mtime":1718338267591,"results":"39","hashOfConfig":"25"},{"size":649,"mtime":1718279385161,"results":"40","hashOfConfig":"25"},{"size":1045,"mtime":1718279385100,"results":"41","hashOfConfig":"25"},{"size":4429,"mtime":1718300621949,"results":"42","hashOfConfig":"25"},{"size":310,"mtime":1718279385045,"results":"43","hashOfConfig":"25"},{"size":1523,"mtime":1718279385641,"results":"44","hashOfConfig":"25"},{"size":17404,"mtime":1718300745000,"results":"45","hashOfConfig":"25"},{"size":696,"mtime":1718279385467,"results":"46","hashOfConfig":"25"},{"size":207,"mtime":1718290233592,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"nbyt3a",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"51"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"51"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"51"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\index.js",[],[],["129"],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\App.js",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\store.js",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Signup.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Nav.jsx",["130","131","132","133","134","135","136","137","138"],[],"import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { useTime } from '../data/TimeContext';\n\nexport let ctime = 0;\nexport let navPath = [];\n\nconst Nav = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    const { hour, minute, weekday } = useTime();\n    let ingtime=[0];\n    const [showGuide, setShowGuide] = useState(false);\n\n    const handleButtonClicke = () => {\n        setShowGuide(!showGuide);\n    };\n\n    const [results, setResults] = useState([\n    ]);\n\n\n\n    useEffect(() => {\n        const fetchDataFromSpring = async () => {\n            try {\n                const url = `http://localhost:8080/SearchRoute?start=${encodeURIComponent(startStation)}&end=${encodeURIComponent(endStation)}&time=${encodeURIComponent(ctime)}&day=${weekday}`;\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n                const data = await response.json();\n                setResults(data);\n            } catch (error) {\n                console.error('데이터 가져오기 실패:', error);\n            }\n        };\n        if (startStation && endStation) {\n            fetchDataFromSpring();\n        }\n    }, [startStation, endStation]);\n\n\n    const hourNum = parseInt(hour, 10);\n    const minuteNum = parseInt(minute, 10);\n    ctime = hourNum * 3600 + minuteNum * 60;\n    console.log(ctime);\n\n\n    const handleButtonClick = () => {\n        setLoading(true);\n        setTimeout(() => {\n            setLoading(false);\n            navigate('/Pre',{state:{results:results}});\n        }, 1000);\n    };\n\n\n\n\n\n    const renderResults = () => {\n        return results.map((result, index) => (\n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\"><span style={{ backgroundColor: '#fff5b1' }}>Result {index + 1}</span>\n                </h1>\n                <h3>출발 시간 : {Math.floor((ctime) / (60*60))}시 {Math.floor((ctime) % (60*60)/60)}분 {Math.floor((ctime)% 60)}초 ({weekday})</h3>\n                <p className=\"scheduleTime\">도착 시간(시간표) : {Math.floor((ctime+result.totalTime) / (60*60))}시 {Math.floor((ctime+result.totalTime) % (60*60)/60)}분 {Math.floor((ctime+result.totalTime)% 60)}초</p>\n\n               <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">경로: {result.path.map((place, index) => {\n                            // eachTransferStation 배열에 포함된 역인지 확인\n                            if (result.eachTransferStation && result.eachTransferStation.includes(place)) {\n                                return <span key={index} style={{ color: 'red' }}>{place}</span>;\n                            } else {\n                                return <span key={index}>{place}</span>;\n                            }\n                        }).reduce((prev, curr) => [prev, ' -> ', curr])}</p>\n                    </>\n                )}\n\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">걸리는시간 : {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번째 환승역 : {line}({result.eachTransferStation[index]}) - {Math.floor((ctime+ingtime[index]) / (60*60))}시 {Math.floor((ctime+ingtime[index]) % (60*60)/60)}분 {Math.floor((ctime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n\n    const makepath = (results) => {\n        let allPaths = [];\n        results.forEach(result => {\n            allPaths.push(result.path);\n        });\n        return allPaths;\n    };\n\n    const allPaths = makepath(results);\n    navPath = allPaths;\n    console.log(allPaths); // 콘솔에 모든 경로 출력\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n\n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n\n        // 각 막대의 비율 계산\n        const totalBarWidth = result.totalTime;\n        let accumulatedWidth = 0;\n        let tt = 0; // tt 변수 초기화\n\n\n        result.eachTypeOfLine.forEach((line, index) => {\n            const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n            const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n            const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n            ingtime[index]=0;\n\n            // 각 막대의 총합이 1250이 되도록 비율 조정\n            const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n            const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n            const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n            const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n\n\n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n\n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1;\n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n            </div>\n        );\n        return transferBars;\n    };\n    const getLineColor = (line) => {\n        const lineColors = {\n            '1호선': '#0d3692',\n            '2호선': '#33a23d',\n            '3호선': '#fe5d10',\n            '4호선': '#00a2d1',\n            '5호선': '#8b50a4',\n            '6호선': '#c55c1d',\n            '7호선': '#54640d',\n            '8호선': '#f14c82',\n        };\n        return lineColors[line] || '#000'; // 기본 색상은 검정색\n    };\n\n\n\n\n    return (\n        <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n\n            <div className=\"resultsContainer\">\n                <h1 className=\"resultsHeader\">출발지/도착지 <p className=\"pre-but\">\n                    {loading ? (\n                        <div>로딩 중...</div>\n                    ) : (\n                        <button onClick={handleButtonClick} style={{\n                            backgroundColor: '#4CAF50',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '8px',\n                            cursor: 'pointer'\n                        }}>AI Predict</button>\n                    )}\n                </p></h1>\n                <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n            </div>\n\n            <div style={{position: 'relative', display: 'inline-block'}}>\n                <button\n                    onClick={handleButtonClicke}\n                    style={{\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '30px',\n                        cursor: 'pointer',\n                        width: '80px',       // 너비 설정\n                        height: '40px',       // 높이 설정\n                        fontSize: '16px',     // 폰트 크기 설정\n                        margin: '10px'        // 외부 여백 설정 (선택 사항)\n                    }}\n                >\n                    Guide\n                </button>\n                {showGuide && (\n                    <div style={{\n                        position: 'absolute',\n                        top: '50px', // 팝업 창의 위치 조정 (원하는 위치로 설정)\n                        left: '100px', // 화면 가운데 정렬을 위해 left를 50%로 설정\n                        transform: 'translate(-50%, 0)', // 화면 가운데 정렬을 위한 transform 사용\n                        backgroundColor: 'white',\n                        border: '1px solid #ccc',\n                        borderRadius: '5px',\n                        padding: '10px',\n                        width: '200px',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n                        textAlign: 'center' // 텍스트 가운데 정렬을 위한 textAlign 설정\n                    }}>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={train}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 타는 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={walk}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>환승역까지 도보 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={wait}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 기다리는 시간</p>\n                        </div>\n                        <button onClick={handleButtonClicke} style={{\n                            backgroundColor: '#007bff',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '5px',\n                            cursor: 'pointer',\n                            width: '100%',\n                            padding: '5px 0',\n                            fontSize: '14px',\n                            marginTop: '10px'\n                        }}>\n                            닫기\n                        </button>\n                    </div>\n                )}\n            </div>\n            {renderResults()}\n        </Main>\n    );\n};\n\nexport default Nav;\n","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Routemap.jsx",["139","140","141","142"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as d3 from 'd3';\nimport subwayData from '../data/route.json';\nimport Main from '../components/section/Main';\nimport mark from '../assets/img/icon/환승역_마크.png';\nimport { IoSearch } from \"react-icons/io5\";\nimport { setStartStation, setEndStation } from '../data/actions';\nimport Right from '../components/section/Right'; // 추가\n\n\nconst Routemap = () => {\n    const ref = useRef();\n    const dispatch = useDispatch();\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isSearching, setIsSearching] = useState(false);\n    const [departureStation, setDepartureStation] = useState(null);\n    const [arrivalStation, setArrivalStation] = useState(null);\n    const [isRightVisible, setIsRightVisible] = useState(false); // 추가\n    const [stationName, setStationName] = useState(null);\n    const [suggestions, setSuggestions] = useState([]); // Define suggestions state\n    const [searchedStationX, setSearchedStationX] = useState(null);\n    const [searchedStationY, setSearchedStationY] = useState(null);\n    // 제안 항목 클릭 처리 함수\n    const handleSuggestionItemClick = (suggestion) => {\n        // '-' 포함 여부 확인하고 이후 문자열 제거\n        const sanitizedSuggestion = suggestion.includes('-') ? suggestion.split('-')[0].trim() : suggestion;\n        setSearchTerm(sanitizedSuggestion); // 정제된 제안을 검색어로 설정\n        setSuggestions([]); // 제안 목록 초기화\n    };\n\n    // Function to handle search term change\n    const handleSearchTermChange = (e) => {\n        const value = e.target.value;\n        setSearchTerm(value); // Update search term state\n\n        // Filter subway stations based on the search term\n        const filteredStations = subwayData.filter(station => station.name.includes(value)).slice(0, 3); // Slice the array to get only the first 3 elements\n        setSuggestions(filteredStations.map(station => `${station.name} - ${station.line}`));\n    };\n\n    const toggleRightVisibility = (name = null) => {\n        setIsRightVisible(!isRightVisible);\n        setStationName(name);\n    };\n\n    useEffect(() => {\n        const svg = d3.select(ref.current)\n            .on(\"click\", () => {\n                d3.select(\".tooltip\").remove();\n            }, true)\n            .attr('width', 1500)\n            .attr('height', 1800);\n        svg.selectAll(\"*\").remove();\n\n        const svgContainer = svg.append(\"g\")\n            .attr(\"id\", \"svg-container\");\n\n        // 줌 기능 추가\n        const zoom = d3.zoom()\n            .scaleExtent([0.5, 5]) // 줌 범위 설정\n            .on('zoom', (event) => {\n                svgContainer.attr('transform', event.transform);\n            });\n\n        svg.call(zoom);\n\n        // 스케일 설정\n        const xScale = d3.scaleLinear()\n            .domain(d3.extent(subwayData, d => parseFloat(d.x)))\n            .range([0, 500]);\n\n        const yScale = d3.scaleLinear()\n            .domain(d3.extent(subwayData, d => parseFloat(d.y)))\n            .range([500, 0]);\n\n        // 노선별 색상 설정\n        const lineColor = (line) => {\n            if (line === \"1호선\") return \"#0D3692\";\n            if (line === \"1호선1\") return \"#0D3692\";\n            if (line === \"2호선\") return \"#33A23D\";\n            if (line === \"2호선1\") return \"#33A23D\";\n            if (line === \"2호선2\") return \"#33A23D\";\n            if (line === \"3호선\") return \"#FE5B10\";\n            if (line === \"4호선\") return \"#00A2D1\";\n            if (line === \"5호선\") return \"#8B50A4\";\n            if (line === \"5호선1\") return \"#8B50A4\";\n            if (line === \"6호선\") return \"#C55C1D\";\n            if (line === \"6호선1\") return \"#C55C1D\";\n            if (line === \"7호선\") return \"#54640D\";\n            if (line === \"8호선\") return \"#F14C82\";\n            if (line === \"9호선\") return \"#AA9872\";\n            if (line === \"수인분당선\") return \"#FFEB2A\";\n            if (line === \"경의중앙선\") return \"#72C7A6\";\n            if (line === \"경의중앙선1\") return \"#72C7A6\";\n            if (line === \"경춘선\") return \"#2ABFD0\";\n            if (line === \"공항철도1호선\") return \"#0065B3\";\n            if (line === \"신림선\") return \"#6789CA\";\n            if (line === \"우이신설선\") return \"#B7C452\";\n            if (line === \"김포골드라인\") return \"#AD8605\";\n            return \"black\"; // 기본 색상\n        };\n\n        // 데이터를 라인별로 그룹화\n        const groupedData = d3.group(subwayData, d => d.line);\n\n        // 각 그룹(라인)을 순회하고 선과 원을 그립니다\n        for (const [line, lineData] of groupedData) {\n            const lineGenerator = d3.line()\n                .x(d => xScale(parseFloat(d.x)) * 4)\n                .y(d => yScale(parseFloat(d.y)) * 3.7 - 200)\n                .curve(d3.curveLinear);\n\n            svgContainer.append(\"path\")\n                .datum(lineData)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", lineColor(line))\n                .attr(\"stroke-width\", 7)\n                .attr(\"d\", lineGenerator);\n\n            // 각 라인에 대한 원(역) 추가\n            svgContainer.selectAll(`.station-${line}`) // 라인별로 클래스를 구분하여 선택\n                .data(lineData)\n                .enter()\n                .append(\"circle\")\n                .attr(\"class\", `station station-${line}`) // 라인별 클래스 추가\n                .attr(\"cx\", d => xScale(parseFloat(d.x)) * 4) // x 좌표에 3을 곱하여 3배로 확장\n                .attr(\"cy\", d => yScale(parseFloat(d.y)) * 3.7 - 200) // y 좌표에 3을 곱하여 3배로 확장\n                .attr(\"r\", 10)\n                .attr(\"fill\", d => lineColor(line)) // 동그라미의 색상을 라인의 색상에 따라 설정\n                .attr(\"stroke\", lineColor(line))\n                .attr(\"stroke-width\", 1)\n                .on(\"click\", function (event, d) {\n                    event.stopPropagation(); // 이벤트 버블링 방지\n                    const [clickX, clickY] = d3.pointer(event, svg.node());\n                    showTooltip(d, clickX, clickY);\n                });\n        }\n\n        // 중복된 역을 찾아 환승 역 이미지를 추가합니다.\n        const transferStationsData = subwayData.filter((d, i) => {\n            return subwayData.findIndex(e => e.name === d.name && e.line[0] !== d.line[0]) !== -1;\n        });\n\n        // 환승역 이미지를 추가합니다.\n        const transferStations = svgContainer.selectAll(\".transfer-station\")\n            .data(transferStationsData)\n            .enter()\n            .append(\"image\")\n            .attr(\"class\", \"transfer-station\")\n            .attr(\"xlink:href\", mark) // 환승역 이미지 파일 경로로 수정해주세요\n            .attr(\"width\", 20)\n            .attr(\"height\", 20)\n            .attr(\"x\", d => xScale(parseFloat(d.x)) * 4-10) // 이미지 중심을 원점으로 설정하기 위해 가로폭의 절반만큼 왼쪽으로 이동\n            .attr(\"y\", d => yScale(parseFloat(d.y)) * 3.7 -200-10); // 이미지 중심을 원점으로 설정하기 위해 세로폭의 절반만큼 위쪽으로 이동\n\n        // 이미지 위에 툴팁을 표시할 수 있도록 설정합니다.\n        transferStations.on(\"click\", function (event, d) {\n            const [clickX, clickY] = d3.pointer(event, svg.node());\n            showTooltip(d, clickX, clickY);\n\n\n\n            // 다른 곳을 클릭했을 때 툴팁을 제거합니다.\n            d3.select(\"body\").on(\"click.tooltip\", function () {\n                d3.select(\".tooltip\").remove();\n                d3.select(\"body\").on(\"click.tooltip\", null); // 이벤트 핸들러를 제거하여 메모리 누수를 방지합니다.\n            });\n        });\n\n        // 각 역 이름 추가\n        svgContainer.selectAll(\".station-name\")\n            .data(subwayData)\n            .enter()\n            .append(\"text\")\n            .attr(\"class\", \"station-name\")\n            .attr(\"x\", d => xScale(parseFloat(d.x)) * 4) // 역 이름에도 2를 곱하여 2배로 확장\n            .attr(\"y\", d => yScale(parseFloat(d.y)) * 3.7 - 200 + 30) // 역 이름에도 2를 곱하여 2배로 확장\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"18px\")\n            .attr(\"fill\", \"black\")\n            .attr(\"font-weight\", \"bold\") // 굵은 텍스트 설정\n            .text(d => d.name);\n\n// 말풍선 표시 함수\n        const showTooltip = (data, x, y) => {\n            d3.select(\".tooltip\").remove(); // 기존 툴팁 제거\n\n            const tooltip = svg.append(\"g\")\n                .attr(\"class\", \"tooltip\")\n                .attr(\"transform\", `translate(${x}, ${y })`);\n\n            tooltip.append(\"rect\")\n                .attr(\"width\", 600)\n                .attr(\"height\", 200) // Increased height to accommodate the new button\n                .attr(\"x\", -140)\n                .attr(\"y\", 0)\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke\", \"black\");\n\n            tooltip.append(\"text\")\n                .attr(\"x\", 150)\n                .attr(\"y\", 60)\n                .attr(\"font-size\", \"30px\") // 텍스트 크기 증가\n                .attr(\"text-anchor\", \"middle\")\n                .text(data.name);\n\n            // 버튼 데이터 배열\n            const buttons = [\n                { text: '출발', x: -70, y: 120, color: '#90ee90' }, // Green color for 출발 button\n                { text: '도착', x: 60, y: 120, color: '#f0f0f0' },   // Gray color for 도착 button\n                { text: '실시간 도착정보', x: 190, y: 120, color: '#ff6347', width: 280, newx: 285 } // Red color for 실시간 도착정보 button\n            ];\n\n\n\n            // 버튼 생성\n            buttons.forEach(button => {\n                // 버튼 배경\n                tooltip.append(\"rect\")\n                    .attr(\"x\", button.x - 45)\n                    .attr(\"y\", button.y - 30)\n                    .attr(\"width\", button.width || 100)\n                    .attr(\"height\", 60)\n                    .attr(\"fill\", button.color)\n                    .attr(\"rx\", 5) // 둥근 모서리\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", () => {\n                        if (button.text === \"닫기\") {\n                            tooltip.remove();\n                        } else {\n                            if (button.text === \"출발\") {\n                                setDepartureStation(data.name);\n                                dispatch(setStartStation(data.name)); // Redux store 업데이트\n                            } else if (button.text === \"도착\") {\n                                setArrivalStation(data.name);\n                                dispatch(setEndStation(data.name)); // Redux store 업데이트\n                            } else if (button.text === \"실시간 도착정보\") {\n                                toggleRightVisibility(data.name);\n                            }\n                        }\n                    });\n\n                // 버튼 텍스트\n                tooltip.append(\"text\")\n                    .attr(\"x\", button.newx || button.x)\n                    .attr(\"y\", button.y)\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"alignment-baseline\", \"middle\")\n                    .attr(\"font-size\", \"18px\") // 텍스트 크기 증가\n                    .text(button.text)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", () => {\n                        if (button.text === \"닫기\") {\n                            tooltip.remove();\n                        } else {\n                        }\n                    });\n\n            });\n\n        };\n\n        // 빨간색 원을 저장할 변수\n        let highlightedCircle;\n\n        function removeHighlightedCircle() {\n            if (highlightedCircle) {\n                highlightedCircle.remove();\n                highlightedCircle = null;\n            }\n        }\n\n        // 검색어 처리 로직\n        if (isSearching && searchTerm.trim() !== '') {\n            const searchedStation = subwayData.find(station => station.name.includes(searchTerm.trim()));\n            if (searchedStation) {\n                // 검색된 역의 위치에 말풍선 표시\n                const [searchedX, searchedY] = [xScale(parseFloat(searchedStation.x)) * 4+100, yScale(parseFloat(searchedStation.y)) * 3.7 - 200];\n                setSearchedStationX(searchedX);\n                setSearchedStationY(searchedY);\n                showTooltip(searchedStation, searchedX, searchedY);\n                svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(750 / 2 - searchedX, 500 / 2 - searchedY).scale(2));\n\n                // 이전에 강조된 원이 있으면 제거\n                removeHighlightedCircle();\n\n                // 검색된 역의 위치에 빨간색 원 추가\n                svg.append(\"circle\")\n                    .attr(\"cx\", searchedX+175)\n                    .attr(\"cy\", searchedY+250)\n                    .attr(\"r\", 28) // 반지름 크기 조절\n                    .attr(\"fill\", \"red\") // 빨간색으로 채우기\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .on(\"click\", (event, d) => {\n                        event.stopPropagation(); // 이벤트 버블링 방지\n                        showTooltip(searchedStation, searchedX, searchedY);\n                    });\n            }\n        }\n\n    }, [isSearching, searchTerm, dispatch]);\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        setIsSearching(true);\n    };\n\n    return (\n        <Main\n            title=\"지하철 노선도\"\n            description=\"지하철 노선도 페이지\"\n            departureStation={departureStation}\n            arrivalStation={arrivalStation}\n        >\n            <div className=\"search-container\">\n                <div className=\"search-form\">\n                    <form onSubmit={handleSearch}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"지하철역 검색\"\n                            value={searchTerm}\n                            onChange={handleSearchTermChange} /*{(e) => setSearchTerm(e.target.value)}*/\n                        />\n                        <button type=\"submit\"> <IoSearch size={20} /> </button>\n                    </form>\n                    <div className=\"notice\">\n                        [2024-06-13] 지하철 파업으로 4호선 하행선, 상행선 <span style={{backgroundColor: '#fff5b1'}}>10분</span> 지연\n                    </div>\n                    {suggestions.length > 0 && (\n                        <ul className=\"suggestions\">\n                            {suggestions.map((suggestion, index) => (\n                                <li key={index} onClick={() => handleSuggestionItemClick(suggestion)}>{suggestion}</li>\n                            ))}\n                        </ul>\n                    )}\n                </div>\n            </div>\n            <div\n                id=\"picture\"\n                style={{\n                    width: '100%',\n                    height: 'calc(100vh - 60px)',\n                    overflow: 'auto', // 스크롤 추가\n                    position: 'relative'\n                }}\n            >\n                <div class=\"rectangle\">\n                    <svg\n                        ref={ref}\n                        viewBox=\"0 -300 1500 1800\"\n                        style={{\n                            width: '100%',\n                            height: '100%',\n                            position: 'absolute',\n                            top: 0,\n                            left: 0\n                        }}\n                    ></svg>\n                </div>\n            </div>\n            {isRightVisible && <Right isVisible={isRightVisible} toggleRightVisibility={toggleRightVisibility} stationName={stationName} />} {/* Right 컴포넌트 렌더링 */}\n        </Main>\n    );\n};\n\nexport default Routemap;\n","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Map.jsx",["143","144","145","146","147","148","149"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Main from '../components/section/Main';\nimport subwayData from '../data/map.json';\nimport { FaLongArrowAltRight } from \"react-icons/fa\";\nimport { IoSearch, IoLocationOutline } from \"react-icons/io5\";\nimport { setStartStation, setEndStation } from '../data/actions';\nimport Right from '../components/section/Right';\nimport { MdMyLocation } from \"react-icons/md\";\n\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\n\n// Import subway line images...\nimport line1 from '../assets/img/subwaymapmarker/1호선마커.png';\nimport line2 from '../assets/img/subwaymapmarker/2호선마커.png';\nimport line3 from '../assets/img/subwaymapmarker/3호선마커.png';\nimport line4 from '../assets/img/subwaymapmarker/4호선마커.png';\nimport line5 from '../assets/img/subwaymapmarker/5호선마커.png';\nimport line6 from '../assets/img/subwaymapmarker/6호선마커.png';\nimport line7 from '../assets/img/subwaymapmarker/7호선마커.png';\nimport line8 from '../assets/img/subwaymapmarker/8호선마커.png';\nimport line9 from '../assets/img/subwaymapmarker/9호선마커.png';\nimport line10 from '../assets/img/subwaymapmarker/수인분당선마커.png';\nimport line11 from '../assets/img/subwaymapmarker/경의중앙선마커.png';\nimport line12 from '../assets/img/subwaymapmarker/경춘선마커.png';\nimport line13 from '../assets/img/subwaymapmarker/공항철도1호선마커.png';\nimport line14 from '../assets/img/subwaymapmarker/신림선마커.png';\nimport line15 from '../assets/img/subwaymapmarker/우이신설선마커.png';\nimport line16 from '../assets/img/subwaymapmarker/김포골드라인마커.png';\n\nimport loc from '../assets/img/subwaymapmarker/현위치.png';\nimport { Background } from 'victory';\n\nconst lineImages = {\n    \"1호선\": line1,\n    \"2호선\": line2,\n    \"3호선\": line3,\n    \"4호선\": line4,\n    \"5호선\": line5,\n    \"6호선\": line6,\n    \"7호선\": line7,\n    \"8호선\": line8,\n    \"9호선\": line9,\n    \"수인분당선\": line10,\n    \"경의중앙선\": line11,\n    \"경춘선\": line12,\n    \"공항철도1호선\": line13,\n    \"신림선\": line14,\n    \"우이신설선\": line15,\n    \"김포골드라인\": line16,\n};\n\n\nconst Map = () => {\n    const [isRightVisible, setIsRightVisible] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [map, setMap] = useState(null);\n    const [userMarker, setUserMarker] = useState(null); // 사용자 마커 상태 추가\n    const [stationName, setStationName] = useState(null);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [suggestions, setSuggestions] = useState([]); // Define suggestions state\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n\n    // 제안 항목 클릭 처리 함수\n    const handleSuggestionItemClick = (suggestion) => {\n        // '-' 포함 여부 확인하고 이후 문자열 제거\n        const sanitizedSuggestion = suggestion.includes('-') ? suggestion.split('-')[0].trim() : suggestion;\n        setSearchTerm(sanitizedSuggestion); // 정제된 제안을 검색어로 설정\n        setSuggestions([]); // 제안 목록 초기화\n    };\n\n\n// Function to handle search term change\n    const handleSearchTermChange = (e) => {\n        const value = e.target.value;\n        setSearchTerm(value); // Update search term state\n\n        // Filter subway stations based on the search term\n        const filteredStations = subwayData.filter(station => station.name.includes(value)).slice(0, 3); // Slice the array to get only the first 3 elements\n        setSuggestions(filteredStations.map(station => `${station.name} - ${station.line}`));\n    };\n\n\n    const toggleRightVisibility = (name = null) => {\n        setIsRightVisible(!isRightVisible);\n        setStationName(name);\n    };\n\n\n    useEffect(() => {\n        window.setStation = (stationName, type) => {\n            if (type === 'start') {\n                dispatch(setStartStation(stationName));\n            } else if (type === 'end') {\n                dispatch(setEndStation(stationName));\n            }\n        };\n\n        const script = document.createElement('script');\n        script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=a576239cea9ab4b2daf2a00e251e97e9&autoload=false\";\n        script.async = true;\n        document.head.appendChild(script);\n\n        script.onload = () => {\n            window.kakao.maps.load(() => {\n                const mapContainer = document.getElementById('map');\n                const mapOption = {\n                    center: new window.kakao.maps.LatLng(37.5503, 127.0731),\n                    level: 5\n                };\n\n                const map = new window.kakao.maps.Map(mapContainer, mapOption);\n                setMap(map);\n\n                if ('geolocation' in navigator) {\n                    navigator.geolocation.getCurrentPosition(position => {\n                        const userPosition = new window.kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                        map.setCenter(userPosition);\n                    });\n                } else {\n                    console.log('Geolocation is not supported.');\n                }\n\n                subwayData.forEach((station, index) => {\n                    const markerPosition = new window.kakao.maps.LatLng(station.y, station.x);\n                    const markerImageSrc = lineImages[station.line];\n                    const markerImageSize = new window.kakao.maps.Size(24, 30);\n                    const markerImageOption = { offset: new window.kakao.maps.Point(12, 35) };\n                    const markerImage = new window.kakao.maps.MarkerImage(markerImageSrc, markerImageSize, markerImageOption);\n\n                    const marker = new window.kakao.maps.Marker({\n                        position: markerPosition,\n                        map: map,\n                        image: markerImage\n                    });\n\n                    const content = `\n                        <div class=\"wrap\" id=\"overlay-${index}\">\n                            <div class=\"info\">\n                                <div class=\"title\">\n                                    ${station.name}\n                                    <div class=\"close\" onclick=\"document.getElementById('overlay-${index}').style.display='none'\" title=\"닫기\"></div>\n                                </div>\n                                <div class=\"body\">\n                                    <div class=\"desc\">\n                                        <div class=\"ellipsis\">${station.line} ${station.name}</div>\n                                        <div>\n                                            <button onclick=\"setStation('${station.name}', 'start')\">출발</button>\n                                            <button onclick=\"setStation('${station.name}', 'end')\">도착</button>\n                                            <button onclick=\"window.goToLivePage('${station.name}')\">실시간 도착정보</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n\n                    const overlay = new window.kakao.maps.CustomOverlay({\n                        content: content,\n                        position: marker.getPosition(),\n                        yAnchor: 1\n                    });\n\n                    window.kakao.maps.event.addListener(marker, 'click', function () {\n                        overlay.setMap(map);\n                        document.querySelectorAll('.wrap').forEach(el => el.style.display = 'none');\n                        document.getElementById(`overlay-${index}`).style.display = 'block';\n                    });\n                });\n\n                window.goToLivePage = (stationName) => {\n                    toggleRightVisibility(stationName);\n                };\n            });\n        };\n\n        return () => {\n            document.head.removeChild(script);\n            delete window.goToArrivalPage;\n        };\n    }, [dispatch, navigate]);\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        const station = subwayData.find(station => station.name.includes(searchTerm));\n        if (station && map) {\n            const moveLatLon = new window.kakao.maps.LatLng(station.y, station.x);\n            map.setCenter(moveLatLon);\n            map.setLevel(4);\n\n            // 오버레이를 표시할 위치에 커스텀 오버레이 생성 및 표시\n            const content = `\n                <div class=\"wrap\">\n                    <div class=\"info\">\n                        <div class=\"title\">\n                            ${station.name}\n                            <button class=\"close\" title=\"닫기\" onclick=\"document.querySelector('.wrap').style.display = 'none'\"></button>\n                        </div>\n                        <div class=\"body\">\n                            <div class=\"desc\">\n                                <div class=\"ellipsis\">${station.line} ${station.name}</div>\n                                <div>\n                                    <button onclick=\"setStation('${station.name}', 'start')\">출발</button>\n                                    <button onclick=\"setStation('${station.name}', 'end')\">도착</button>\n                                    <button onclick=\"window.goToLivePage('${station.name}')\">실시간 도착정보</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n            const overlay = new window.kakao.maps.CustomOverlay({\n                content: content,\n                position: moveLatLon,\n                yAnchor: 1\n            });\n\n            overlay.setMap(map);\n        }\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    const moveToUserLocation = () => {\n        if (map && 'geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition(position => {\n                const userPosition = new window.kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                map.setCenter(userPosition);\n\n                // 마커가 이미 존재하면 제거\n                if (userMarker) {\n                    userMarker.setMap(null);\n                    setUserMarker(null);\n                } else {\n\n                    // Create a marker for the user's current location\n                    const markerImageSrc = loc ; // You need to provide a valid image URL or path\n                    const markerImageSize = new window.kakao.maps.Size(30, 40); // Customize size as needed\n                    const markerImageOption = { offset: new window.kakao.maps.Point(12, 35) };\n                    const markerImage = new window.kakao.maps.MarkerImage(markerImageSrc, markerImageSize, markerImageOption);\n\n                    const userMarker = new window.kakao.maps.Marker({\n                        position: userPosition,\n                        map: map,\n                        image: markerImage\n                    });\n                    setUserMarker(userMarker);\n\n                }\n\n            });\n        }\n    };\n\n    return (\n        <Main title=\"지도\" description=\"지도 페이지\">\n            <div className=\"search-container\">\n                <div className=\"search-form\">\n                    <form onSubmit={handleSearch}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"지하철역 검색\"\n                            value={searchTerm}\n                            onChange={handleSearchTermChange} // Use handleSearchTermChange for input change\n                        />\n                        <button type=\"submit\"> <IoSearch size={20} /> </button>\n                    </form>\n                    <div className=\"notice\">\n                        [2024-06-13] 지하철 파업으로 4호선 하행선, 상행선 <span style={{backgroundColor: '#fff5b1'}}>10분</span> 지연\n                    </div>\n\n                    {suggestions.length > 0 && (\n                        <ul className=\"suggestions\">\n                            {suggestions.map((suggestion, index) => (\n                                <li key={index} onClick={() => handleSuggestionItemClick(suggestion)}>{suggestion}</li>\n                            ))}\n                        </ul>\n                    )}\n                    {/*\n                    <div className=\"route-box\">\n                        <div className=\"route-info\">출발지: {startStation}</div>\n                        <FaLongArrowAltRight />\n                        <div className=\"route-info\">도착지: {endStation}</div>\n                        <button onClick={navigateToRouteResult}>실시간 길찾기</button>\n                    </div>\n                */}\n                </div>\n            </div>\n            <div id=\"map\">지도 로딩중...</div>\n            {/* 내 위치로 이동 버튼 */}\n            <div className=\"location-button\" onClick={moveToUserLocation}>\n                <MdMyLocation/>\n            </div>\n            {isRightVisible && <Right isVisible={isRightVisible} toggleRightVisibility={toggleRightVisibility} stationName={stationName} />}\n        </Main>\n    );\n};\n\nexport default Map;","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Tsteam.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Login.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Main.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\reducers.js",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\time.js",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Header.jsx",["150"],[],"import React, { useState } from 'react';\nimport Logo from '../header/Logo';\nimport Menu from '../header/Menu';\nimport Sns from '../header/Sns';\nimport Dest from '../header/Dest';\n\nimport { IoMdMenu } from \"react-icons/io\";\nimport { IoCloseOutline } from \"react-icons/io5\";\n\nconst Header = () => {    \n    const [isHeaderVisible, setIsHeaderVisible] = useState(true);\n\n    const toggleHeader = () => {\n        setIsHeaderVisible(!isHeaderVisible);\n    };\n\n    const closeHeader = () => {\n        if (isHeaderVisible) {\n            setIsHeaderVisible(false);\n        }\n    };\n\n    return (\n        <div className=\"header-container\">\n            <div className=\"hcc\">\n                <button className=\"toggle-button\" onClick={toggleHeader}>{isHeaderVisible ? <IoCloseOutline/> : <IoMdMenu/>}</button>\n            </div>\n            \n            <header id='header' className={isHeaderVisible ? '' : 'hidden'}>\n                <Logo />\n                <Dest />\n                <Menu />\n                <Sns />\n            </header>\n            \n        </div>\n    );\n};\n\nexport default Header;\n","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\actions.js",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\section\\Right.jsx",["151","152","153"],[],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport axios from 'axios';\nimport covData from '../../data/cov.json'; // Adjust the path as per your project structure\nimport { MdElevator } from \"react-icons/md\";\nimport { FaWheelchair } from \"react-icons/fa\";\nimport { LuParkingCircle } from \"react-icons/lu\";\nimport { GiVendingMachine } from \"react-icons/gi\";\nimport { FcSelfServiceKiosk } from \"react-icons/fc\";\nimport { FaTrainSubway } from \"react-icons/fa6\";\nimport { LiaPlaceOfWorshipSolid } from \"react-icons/lia\";\nimport { MdLocationCity } from \"react-icons/md\";\nimport { FaBabyCarriage } from \"react-icons/fa\";\n\nconst lineImages = {\n    1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n    1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n    1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n    1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n    1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n    1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n    1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n    1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n    1009: require('../../assets/img/subwaymapmarker/9호선마커.png'),\n    // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\n\nconst Right = ({ isVisible, toggleRightVisibility, stationName, stationLine }) => {\n    const [congestionData, setCongestionData] = useState(null);\n    const [FR_CODE, setFR_CODE] = useState(null);\n    const location = useLocation();\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n    const printedDirections = [];\n\n    console.log(stationName);\n    const stationInfo = covData.find(item => item.station_name === stationName);\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Remove the last character from stationName\n                const simplifiedStationName = stationName.replace(/\\(.*/, '');\n\n                // Call API to get station information by simplified station name\n                console.log(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const response = await axios.get(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n                const code = xmlDoc.querySelector(\"FR_CODE\")?.textContent;\n                console.log(code);\n                \n                if (code) {\n                    setFR_CODE(code);\n                    const currentDate = new Date();\n                    const roundedMinutes = Math.round(currentDate.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n                    const roundedTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), roundedMinutes);\n                    const dow = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"][roundedTime.getDay()];\n                    const hh = String(roundedTime.getHours()).padStart(2, '0'); // Add leading zero if single digit\n                    const options = {\n                        headers: {\n                            accept: 'application/json',\n                            'Content-Type': 'application/json',\n                            appkey: 'PEKSyFHvkl5imbyfUyw8D2gFUcgqSnxu4d3c8keS'\n                        }\n                    };\n                    const congestionResponse = await axios.get(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${code}?dow=${dow}&hh=${hh}`, options);\n                    setCongestionData(congestionResponse.data);\n                } else {\n                    console.error(\"Failed to get station ID from API response.\");\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchData();\n    }, [stationName]);\n\n    \n\n    const handleClose = () => {\n        toggleRightVisibility(false);\n    };\n\n    const getCurrentTimeSlot = () => {\n        if (!congestionData) return null;\n        const currentTime = new Date();\n        const roundedMinutes = Math.round(currentTime.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n        const roundedTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), roundedMinutes);\n        const currentTimeHHMM = `${String(roundedTime.getHours()).padStart(2, '0')}:${String(roundedTime.getMinutes()).padStart(2, '0')}`;\n        const timeSlots = congestionData.contents.stat[0].data;\n        for (let i = 0; i < timeSlots.length; i++) {\n            const timeSlotHHMM = `${timeSlots[i].hh}:${timeSlots[i].mm}`;\n            if (timeSlotHHMM === currentTimeHHMM) {\n                return timeSlots[i];\n            }\n        }\n        return null;\n    };\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // 요청을 보냄\n            const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ \"stationName\": stationName }), // 데이터를 JSON 문자열로 변환하여 전송\n            });\n\n            // 응답을 JSON 형식으로 파싱\n            const data = await response.json();\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n\n    function getLineImage(subwayId) {\n        return lineImages[subwayId];\n    }\n    function getSubwayLineName(subwayId) {\n        switch(subwayId) {\n            case \"1001\":\n                return \"1호선\";\n            case \"1002\":\n                return \"2호선\";\n            case \"1003\":\n                return \"3호선\";\n            case \"1004\":\n                return \"4호선\";\n            case \"1005\":\n                return \"5호선\";\n            case \"1006\":\n                return \"6호선\";\n            case \"1007\":\n                return \"7호선\";\n            case \"1008\":\n                return \"8호선\";\n            case 1009:\n                return \"9호선\";\n            // 다른 호선에 대한 경우도 추가\n            default:\n                return \"해당없음\";\n        }\n    }\n    const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n        if (!acc[info.subwayId]) {\n            acc[info.subwayId] = [];\n        }\n        acc[info.subwayId].push(info);\n        return acc;\n    }, {});\n\n\n    return (\n        <div id='right' className={isVisible ? '' : 'hidden'}>\n            <div className=\"close-button-container\">\n                <button className=\"close-button\" onClick={handleClose}><IoCloseOutline /></button>\n            </div>\n            {/* Render congestion data here */}\n            {congestionData && (\n                <div>\n                    <h2>{stationName} 칸 혼잡도 정보</h2>\n                    {/*<p>Station ID: {FR_CODE}</p>*/}\n                    <p>호선: {congestionData.contents.subwayLine}</p>\n                    {getCurrentTimeSlot() ? (\n                    <div className=\"congestion-level\">\n                        <p>{getCurrentTimeSlot().hh}:{getCurrentTimeSlot().mm}의 {stationName}의 칸 혼잡도</p>\n                        <div className=\"congestion-boxes\">\n                            {getCurrentTimeSlot().congestionCar.map((level, index) => (\n                                <div key={index} className={`congestion-box ${level <= 40 ? 'green' : level <= 80 ? 'yellow' : level <= 120 ? 'orange' : 'red'}`}>\n                                    {Math.floor((level / 160) * 100)}%\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <p>No congestion data available for the current time.</p>\n                )}\n                </div>\n            )}\n\n{stationName && (\n                <div>\n                    <br/>\n                    <h2>💡 {stationName}의 <br/>실시간 도착 정보</h2>\n                    <br/>\n                    <br/>\n                    {/* arrivalInfo가 존재하는 경우에만 아래 내용을 표시 */}\n                    {arrivalInfo && (\n                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                            {/* arrivalInfo를 순회하며 각 도착 정보를 출력 */}\n                                        {/* 열차 정보와 도착 정보 */}\n                            {Object.keys(groupedData).map(subwayId => (\n                                <div key={subwayId}>\n                                    <p>\n                                        <img\n                                            style={{ width: '20px', height: 'auto', verticalAlign: 'middle' }}\n                                            src={getLineImage(subwayId)}\n                                            alt=\"Subway Line Marker\"\n                                        />\n                                        {getSubwayLineName(subwayId)}\n                                    </p>\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                        {groupedData[subwayId].map((info, index) => {\n                                            // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n                                            const [direction, train] = info.trainLineNm.split(' - ');\n                                            // 현재 열차의 방면이 이미 출력된 방면인지 확인\n                                            const directionIndex = printedDirections.indexOf(train);\n                                            // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n                                            if (directionIndex === -1) {\n                                                printedDirections.push(train);\n                                            }\n\n                                            return (\n                                                <div key={info.rowNum} style={{ border: '1px solid black', padding: '10px', margin: '5px' }}>\n                                                    <div>\n                                                        <p>\n                                                            {direction} ({train}) {directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차'}\n                                                        </p>\n                                                    </div>\n                                                    <p>\n                                                        👉 {info.recptnDt} 기준 <span style={{ color: 'red' }}>{Math.floor(info.barvlDt / 60)}분 {info.barvlDt % 60}초</span> 뒤 도착\n                                                    </p>\n                                                    <p>✔ 현위치 : {info.arvlMsg3}</p>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <br/>\n                                    <hr/>\n                                </div>\n                            ))}\n                            <br/> {/* 모든 출력이 완료된 후에 줄바꿈 추가 */}\n                        </div>\n                    )}\n                </div>\n            )}\n            {stationInfo && (\n    <div>\n        <h2>편의시설</h2>\n        <br/>\n        <div className='conv'>\n        <p>{stationInfo.el === 'Y' && <MdElevator />}{stationInfo.el === 'Y' && \"엘리베이터\" }</p>\n        <p>{stationInfo.wl === 'Y' && <FaWheelchair />}{stationInfo.wl === 'Y' && \"휘체어리프트\"}</p>\n        <p>{stationInfo.parking === 'Y' && <LuParkingCircle />}{stationInfo.parking === 'Y' && \"환승주차장\"}</p>\n        <p>{stationInfo.cim === 'Y' && <GiVendingMachine />}{stationInfo.cim === 'Y' && \"무인민원발급기\"}</p>\n        <p>{stationInfo.exchange === 'Y' && <FcSelfServiceKiosk />}{stationInfo.exchange === 'Y' && \"환전키오스크\"}</p>\n        <p>{stationInfo.train === 'Y' && <FaTrainSubway />}{stationInfo.train === 'Y' &&\"기차예매역\" }</p>\n        <p>{stationInfo.culture === 'Y' && <LiaPlaceOfWorshipSolid />}{stationInfo.culture === 'Y' && \"문화공간\"}</p>\n        <p>{stationInfo.place === 'Y' && <MdLocationCity />}{stationInfo.place === 'Y' && \"만남의장소\"}</p>\n        <p>{stationInfo.fdroom === 'Y' && <FaBabyCarriage />}{stationInfo.fdroom === 'Y' && \"유아수유방\"}</p>\n        </div>\n    </div>\n)}\n        </div>\n        \n    );\n};\n\nexport default Right;\n","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Sns.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Menu.jsx",[],[],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Dest.jsx",["154","155","156"],[],"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useTime } from '../../data/TimeContext';\n\nconst Dest = () => {\n    const navigate = useNavigate();\n    const location = useLocation(); // useLocation 훅 사용\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const { hour, setHour, minute, setMinute, weekday, setWeekday, selectedDate, setSelectedDate } = useTime();\n\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        const day = date.getDay();\n        let dayType;\n\n        if (day === 0) {\n            dayType = '일요일';\n        } else if (day === 6) {\n            dayType = '토요일';\n        } else {\n            dayType = '평일';\n        }\n\n        setWeekday(dayType);\n    };\n\n    const getDayType = (date) => {\n        const day = date.getDay();\n        if (day === 0) {\n            return '일요일';\n        } else if (day === 6) {\n            return '토요일';\n        } else {\n            return '평일';\n        }\n    };\n\n    const navigateToNavPage = () => {\n        // 시간, 분, 날짜가 선택되지 않은 경우 현재 시스템 시간 사용\n        const navHour = hour !== '' ? hour : new Date().getHours();\n        const navMinute = minute !== '' ? minute : new Date().getMinutes();\n        const navDate = selectedDate ? selectedDate : new Date();\n        const dayType = getDayType(navDate);\n\n        setHour(navHour);\n        setMinute(navMinute);\n        setSelectedDate(navDate);\n        setWeekday(dayType);\n\n        navigate('/tmpp');\n        setTimeout(() => {\n            navigate('/nav', { state: { startStation, endStation, hour: navHour, minute: navMinute, weekday: dayType } });\n        }, 1000); // 0 milliseconds\n    };\n\n\n\n    return (\n        <div className=\"dest-container\">\n            <div className=\"dest-details\">\n                {startStation ? (\n                    <h2 className=\"dest-heading\">출발지: <span className=\"dest-label\">{startStation}</span></h2>\n                ) : (\n                    <h2 className=\"dest-heading\">출발지 정보가 없습니다.</h2>\n                )}\n                {endStation ? (\n                    <h2 className=\"dest-heading\">도착지: <span className=\"dest-label\">{endStation}</span></h2>\n                ) : (\n                    <h2 className=\"dest-heading\">도착지 정보가 없습니다.</h2>\n                )}\n            </div>\n            <div className=\"time-row\">\n                <label htmlFor=\"weekday\">날짜:</label>\n                <DatePicker\n                    selected={selectedDate}\n                    onChange={handleDateChange}\n                    dateFormat=\"yyyy/MM/dd\"\n                    placeholderText=\"날짜 선택\"\n                    className=\"custom-datepicker\"\n                />\n            </div>\n            <div className=\"time-selection\">\n                <div className=\"time-row\">\n                    <label htmlFor=\"hour\">시:</label>\n                    <select id=\"hour\" value={hour} onChange={(e) => setHour(e.target.value)}\n                            style={{textAlign: 'center', width: '60px'}}>\n                        <option value=\"\">선택</option>\n                        {Array.from({length: 24}, (_, i) => (\n                            <option key={i} value={i < 10 ? `0${i}` : `${i}`}>{i < 10 ? `0${i}` : `${i}`}</option>\n                        ))}\n                    </select>\n                </div>\n                <div className=\"time-row\">\n                    <label htmlFor=\"minute\">분:</label>\n                    <select id=\"minute\" value={minute} onChange={(e) => setMinute(e.target.value)}\n                            style={{textAlign: 'center', width: '60px'}}>\n                        <option value=\"\">선택</option>\n                        {Array.from({length: 60}, (_, i) => (\n                            <option key={i} value={i < 10 ? `0${i}` : `${i}`}>{i < 10 ? `0${i}` : `${i}`}</option>\n                        ))}\n                    </select>\n                </div>\n\n            </div>\n            <button className=\"dest-button\" onClick={navigateToNavPage}>실시간 길찾기</button>\n        </div>\n    );\n};\n\nexport default Dest;\n",["157"],"C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\components\\header\\Logo.jsx",["158"],[],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FaTrainSubway } from \"react-icons/fa6\";\n\n\nconst Logo = () => {\n    return (\n        <h1 className='header__logo'>\n            <Link to='/'>\n            <span>subPick</span>\n            </Link>\n        </h1>\n    )\n}\n\nexport default Logo","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\header.js",["159","160","161","162","163","164","165"],[],"import { FaRegMap } from \"react-icons/fa\";\nimport { IoNavigateCircleOutline } from \"react-icons/io5\";\nimport { FaPeopleRoof } from \"react-icons/fa6\";\nimport { RiLoginCircleLine } from \"react-icons/ri\";\nimport { MdPersonalInjury } from \"react-icons/md\";\nimport { SiBeijingsubway } from \"react-icons/si\";\nimport { SlVector } from \"react-icons/sl\";\n//\n\n\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { AiOutlineCodepen } from \"react-icons/ai\";\nimport { AiFillYoutube } from \"react-icons/ai\";\nimport { AiOutlineInstagram } from \"react-icons/ai\";\n\nexport const headerMenus = [\n    {\n        title: \"로그인\",\n        icon: <RiLoginCircleLine />,\n        src: \"/login\"\n    },\n    {\n        title: \"지도\",\n        icon: <FaRegMap />,\n        src: \"/map\"\n    },\n    /*\n    {\n        title: \"실시간 길찾기 (삭제)\",\n        icon: <IoNavigateCircleOutline />,\n        src: \"/nav\"\n    },\n\n    {\n        title: \"실시간 도착정보 (삭제)\",\n        icon: <SiBeijingsubway />,\n        src: \"/live\"\n    },\n\n    {\n        title: \"노선별 혼잡도 (삭제)\",\n        icon: <FaPeopleRoof />,\n        src: \"/arrival\"\n    },\n    */\n    {\n        title: \"지하철 노선도\",\n        icon: <SlVector />,\n        src: \"/routemap\"\n    },\n    \n    \n    \n   \n];\n\nexport const searchKeyword = [\n    {\n        title: \"TS팀 소개\",\n        src: \"/tsteam\"\n    },\n    \n];\n\nexport const snsLink = [\n    {\n        title: \"github\",\n        url: \"https://github.com/Capstone-Subway-TS\",\n        icon: <AiFillGithub />\n    },\n]","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Pre.jsx",["166","167","168","169","170","171","172","173","174","175","176","177"],[],"import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate,useLocation } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { ctime } from './Nav';\nimport { useTime } from '../data/TimeContext';\nimport { navPath } from './Nav';\n\nconst Pre = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    let ingtime=[0];\n    const { hour, minute, weekday } = useTime();\n    const currentTime = ctime;\n    const [showGuide, setShowGuide] = useState(false);\n\n    const handleButtonClicke = () => {\n        setShowGuide(!showGuide);\n    };\n    const [result, setResult] = useState([\n    ]);\n\n\n\n\n    const location = useLocation();\n\n    console.log(navPath);\n\n\n    useEffect(() => {\n        // 첫 번째 서비스에서 전달된 데이터\n        const firstServiceData = location.state?.results;\n\n        // 데이터가 존재하는 경우에만 두 번째 서비스 호출\n        if (firstServiceData) {\n            const fetchSecondServiceData = async () => {\n                try {\n                    const url = `http://localhost:8080/Predict?day=${encodeURIComponent(weekday)}`;\n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify(firstServiceData),\n                    });\n                    const secondServiceData = await response.json();\n                    setResult(secondServiceData);\n                    console.log('두 번째 서비스 응답 데이터:', secondServiceData);\n                } catch (error) {\n                    console.error('두 번째 서비스 요청 실패:', error);\n                }\n            };\n\n            fetchSecondServiceData();\n        }\n    }, [location]);\n\n    const renderResults = () => {\n        return result.map((result, index) => (\n\n\n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\"><span style={{backgroundColor: '#fff5b1'}}>AI Predict Result {index + 1}</span></h1>\n                <h3>출발 시간 : {Math.floor((currentTime) / (60 * 60))}시 {Math.floor((currentTime) % (60*60)/60)}분 {Math.floor((currentTime)% 60)}초 ({weekday})</h3>\n                <p className=\"scheduleTime\">도착 시간(AI) : {Math.floor((currentTime+result.totalTime) / (60*60))}시 {Math.floor((currentTime+result.totalTime) % (60*60)/60)}분 {Math.floor((currentTime+result.totalTime)% 60)}초</p>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">경로 : {result.path.map((place, index) => {\n                            // eachTransferStation 배열에 포함된 역인지 확인\n                            if (result.eachTransferStation && result.eachTransferStation.includes(place)) {\n                                return <span key={index} style={{ color: 'red' }}>{place}</span>;\n                            } else {\n                                return <span key={index}>{place}</span>;\n                            }\n                        }).reduce((prev, curr) => [prev, ' -> ', curr])}</p>\n                    </>\n                )}\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">총 걸리는 시간 : {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번째 환승역 : {line}({result.eachTransferStation[index]}) - {Math.floor((currentTime+ingtime[index]) / (60*60))}시 {Math.floor((currentTime+ingtime[index]) % (60*60)/60)}분 {Math.floor((currentTime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n\n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n\n        // 각 막대의 비율 계산\n        const totalBarWidth = result.totalTime;\n        let accumulatedWidth = 0;\n        let tt = 0; // tt 변수 초기화\n\n\n        result.eachTypeOfLine.forEach((line, index) => {\n            const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n            const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n            const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n            ingtime[index]=0;\n\n            // 각 막대의 총합이 1250이 되도록 비율 조정\n            const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n            const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n            const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n            const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n\n\n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n\n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1;\n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n            </div>\n        );\n        return transferBars;\n    };\n    const getLineColor = (line) => {\n        const lineColors = {\n            '1호선': '#0d3692',\n            '2호선': '#33a23d',\n            '3호선': '#fe5d10',\n            '4호선': '#00a2d1',\n            '5호선': '#8b50a4',\n            '6호선': '#c55c1d',\n            '7호선': '#54640d',\n            '8호선': '#f14c82',\n        };\n        return lineColors[line] || '#000'; // 기본 색상은 검정색\n    };\n\n\n\n    return (\n        <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n\n            <div className=\"resultsContainer\">\n                <h1 className=\"resultsHeader\">출발지/도착지</h1> <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n            </div>\n            <div style={{position: 'relative', display: 'inline-block'}}>\n                <button\n                    onClick={handleButtonClicke}\n                    style={{\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '30px',\n                        cursor: 'pointer',\n                        width: '80px',       // 너비 설정\n                        height: '40px',       // 높이 설정\n                        fontSize: '16px',     // 폰트 크기 설정\n                        margin: '10px'        // 외부 여백 설정 (선택 사항)\n                    }}\n                >\n                    Guide\n                </button>\n                {showGuide && (\n                    <div style={{\n                        position: 'absolute',\n                        top: '50px', // 팝업 창의 위치 조정 (원하는 위치로 설정)\n                        left: '100px', // 화면 가운데 정렬을 위해 left를 50%로 설정\n                        transform: 'translate(-50%, 0)', // 화면 가운데 정렬을 위한 transform 사용\n                        backgroundColor: 'white',\n                        border: '1px solid #ccc',\n                        borderRadius: '5px',\n                        padding: '10px',\n                        width: '200px',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n                        textAlign: 'center' // 텍스트 가운데 정렬을 위한 textAlign 설정\n                    }}>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={train}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 타는 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={walk}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>환승역까지 도보 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={wait}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 기다리는 시간</p>\n                        </div>\n                        <button onClick={handleButtonClicke} style={{\n                            backgroundColor: '#007bff',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '5px',\n                            cursor: 'pointer',\n                            width: '100%',\n                            padding: '5px 0',\n                            fontSize: '14px',\n                            marginTop: '10px'\n                        }}>\n                            닫기\n                        </button>\n                    </div>\n                )}\n            </div>\n\n            {renderResults()}\n        </Main>\n    );\n};\n\nexport default Pre;","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\data\\TimeContext.js",["178"],[],"// TimeContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst TimeContext = createContext();\n\nexport const TimeProvider = ({ children }) => {\n    const [hour, setHour] = useState('');\n    const [minute, setMinute] = useState('');\n    const [weekday, setWeekday] = useState(''); // 요일 상태 추가\n    const [selectedDate, setSelectedDate] = useState(null); // 날짜 상태 추가\n\n    \n\n    return (\n        <TimeContext.Provider value={{ hour, setHour, minute, setMinute, weekday, setWeekday, selectedDate, setSelectedDate }}>\n            {children}\n        </TimeContext.Provider>\n    );\n};\n\nexport const useTime = () => useContext(TimeContext);\n","C:\\Users\\손한승\\Desktop\\project-subway\\src\\main\\frontend\\src\\pages\\Tmpp.jsx",[],[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":24},{"ruleId":"181","severity":1,"message":"185","line":4,"column":26,"nodeType":"183","messageId":"184","endLine":4,"endColumn":36},{"ruleId":"181","severity":1,"message":"186","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":14},{"ruleId":"187","severity":1,"message":"188","line":51,"column":8,"nodeType":"189","endLine":51,"endColumn":34,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"191","line":125,"column":15,"nodeType":"183","messageId":"184","endLine":125,"endColumn":23},{"ruleId":"181","severity":1,"message":"192","line":198,"column":15,"nodeType":"183","messageId":"184","endLine":198,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":281,"column":29,"nodeType":"195","endLine":290,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":295,"column":29,"nodeType":"195","endLine":304,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":309,"column":29,"nodeType":"195","endLine":318,"endColumn":31},{"ruleId":"181","severity":1,"message":"196","line":2,"column":23,"nodeType":"183","messageId":"184","endLine":2,"endColumn":34},{"ruleId":"181","severity":1,"message":"197","line":22,"column":12,"nodeType":"183","messageId":"184","endLine":22,"endColumn":28},{"ruleId":"181","severity":1,"message":"198","line":23,"column":12,"nodeType":"183","messageId":"184","endLine":23,"endColumn":28},{"ruleId":"187","severity":1,"message":"199","line":303,"column":8,"nodeType":"189","endLine":303,"endColumn":43,"suggestions":"200"},{"ruleId":"181","severity":1,"message":"201","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":29},{"ruleId":"181","severity":1,"message":"202","line":7,"column":20,"nodeType":"183","messageId":"184","endLine":7,"endColumn":37},{"ruleId":"181","severity":1,"message":"203","line":12,"column":10,"nodeType":"183","messageId":"184","endLine":12,"endColumn":24},{"ruleId":"181","severity":1,"message":"204","line":33,"column":10,"nodeType":"183","messageId":"184","endLine":33,"endColumn":20},{"ruleId":"181","severity":1,"message":"205","line":64,"column":11,"nodeType":"183","messageId":"184","endLine":64,"endColumn":23},{"ruleId":"181","severity":1,"message":"206","line":65,"column":11,"nodeType":"183","messageId":"184","endLine":65,"endColumn":21},{"ruleId":"187","severity":1,"message":"199","line":184,"column":8,"nodeType":"189","endLine":184,"endColumn":28,"suggestions":"207"},{"ruleId":"181","severity":1,"message":"208","line":17,"column":11,"nodeType":"183","messageId":"184","endLine":17,"endColumn":22},{"ruleId":"181","severity":1,"message":"209","line":32,"column":12,"nodeType":"183","messageId":"184","endLine":32,"endColumn":19},{"ruleId":"181","severity":1,"message":"210","line":33,"column":11,"nodeType":"183","messageId":"184","endLine":33,"endColumn":19},{"ruleId":"187","severity":1,"message":"211","line":124,"column":8,"nodeType":"189","endLine":124,"endColumn":21,"suggestions":"212"},{"ruleId":"181","severity":1,"message":"210","line":10,"column":11,"nodeType":"183","messageId":"184","endLine":10,"endColumn":19},{"ruleId":"181","severity":1,"message":"213","line":13,"column":47,"nodeType":"183","messageId":"184","endLine":13,"endColumn":54},{"ruleId":"181","severity":1,"message":"214","line":16,"column":11,"nodeType":"183","messageId":"184","endLine":16,"endColumn":29},{"ruleId":"179","replacedBy":"215"},{"ruleId":"181","severity":1,"message":"216","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":23},{"ruleId":"181","severity":1,"message":"217","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"181","severity":1,"message":"218","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":22},{"ruleId":"181","severity":1,"message":"219","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":26},{"ruleId":"181","severity":1,"message":"220","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":25},{"ruleId":"181","severity":1,"message":"221","line":12,"column":10,"nodeType":"183","messageId":"184","endLine":12,"endColumn":26},{"ruleId":"181","severity":1,"message":"222","line":13,"column":10,"nodeType":"183","messageId":"184","endLine":13,"endColumn":23},{"ruleId":"181","severity":1,"message":"223","line":14,"column":10,"nodeType":"183","messageId":"184","endLine":14,"endColumn":28},{"ruleId":"181","severity":1,"message":"182","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":24},{"ruleId":"181","severity":1,"message":"185","line":4,"column":26,"nodeType":"183","messageId":"184","endLine":4,"endColumn":36},{"ruleId":"181","severity":1,"message":"186","line":8,"column":10,"nodeType":"183","messageId":"184","endLine":8,"endColumn":14},{"ruleId":"181","severity":1,"message":"224","line":16,"column":12,"nodeType":"183","messageId":"184","endLine":16,"endColumn":19},{"ruleId":"181","severity":1,"message":"225","line":16,"column":21,"nodeType":"183","messageId":"184","endLine":16,"endColumn":31},{"ruleId":"181","severity":1,"message":"226","line":17,"column":11,"nodeType":"183","messageId":"184","endLine":17,"endColumn":19},{"ruleId":"187","severity":1,"message":"188","line":63,"column":8,"nodeType":"189","endLine":63,"endColumn":18,"suggestions":"227"},{"ruleId":"181","severity":1,"message":"191","line":104,"column":15,"nodeType":"183","messageId":"184","endLine":104,"endColumn":23},{"ruleId":"181","severity":1,"message":"192","line":177,"column":15,"nodeType":"183","messageId":"184","endLine":177,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":245,"column":29,"nodeType":"195","endLine":254,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":259,"column":29,"nodeType":"195","endLine":268,"endColumn":31},{"ruleId":"193","severity":1,"message":"194","line":273,"column":29,"nodeType":"195","endLine":282,"endColumn":31},{"ruleId":"181","severity":1,"message":"228","line":2,"column":54,"nodeType":"183","messageId":"184","endLine":2,"endColumn":63},"no-new-object",["229"],"no-unused-vars","'getCurrentTime' is defined but never used.","Identifier","unusedVar","'getDayType' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'weekday'. Either include it or remove the dependency array.","ArrayExpression",["230"],"'iconSize' is assigned a value but never used.","'lastAdjustedGoBarWidth' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useSelector' is defined but never used.","'searchedStationX' is assigned a value but never used.","'searchedStationY' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'toggleRightVisibility'. Either include it or remove the dependency array.",["231"],"'FaLongArrowAltRight' is defined but never used.","'IoLocationOutline' is defined but never used.","'FaMapMarkerAlt' is defined but never used.","'Background' is defined but never used.","'startStation' is assigned a value but never used.","'endStation' is assigned a value but never used.",["232"],"'closeHeader' is assigned a value but never used.","'FR_CODE' is assigned a value but never used.","'location' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchDataFromFlask'. Either include it or remove the dependency array.",["233"],"'weekday' is assigned a value but never used.","'handleButtonClicke' is assigned a value but never used.",["229"],"'FaTrainSubway' is defined but never used.","'IoNavigateCircleOutline' is defined but never used.","'FaPeopleRoof' is defined but never used.","'MdPersonalInjury' is defined but never used.","'SiBeijingsubway' is defined but never used.","'AiOutlineCodepen' is defined but never used.","'AiFillYoutube' is defined but never used.","'AiOutlineInstagram' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'navigate' is assigned a value but never used.",["234"],"'useEffect' is defined but never used.","no-object-constructor",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},"Update the dependencies array to be: [startStation, endStation, weekday]",{"range":"245","text":"246"},"Update the dependencies array to be: [isSearching, searchTerm, dispatch, toggleRightVisibility]",{"range":"247","text":"248"},"Update the dependencies array to be: [dispatch, navigate, toggleRightVisibility]",{"range":"249","text":"250"},"Update the dependencies array to be: [fetchDataFromFlask, stationName]",{"range":"251","text":"252"},"Update the dependencies array to be: [location, weekday]",{"range":"253","text":"254"},[1854,1880],"[startStation, endStation, weekday]",[12400,12435],"[isSearching, searchTerm, dispatch, toggleRightVisibility]",[7882,7902],"[dispatch, navigate, toggleRightVisibility]",[5817,5830],"[fetchDataFromFlask, stationName]",[2226,2236],"[location, weekday]"]