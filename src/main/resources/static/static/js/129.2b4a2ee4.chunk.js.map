{"version":3,"file":"static/js/129.2b4a2ee4.chunk.js","mappings":"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","sources":["components/section/Right.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport axios from 'axios';\n\nconst lineImages = {\n    1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n    1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n    1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n    1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n    1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n    1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n    1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n    1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n    1009: require('../../assets/img/subwaymapmarker/9호선마커.png'),\n    // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\n\nconst Right = ({ isVisible, toggleRightVisibility, stationName, stationLine }) => {\n    const [congestionData, setCongestionData] = useState(null);\n    const [FR_CODE, setFR_CODE] = useState(null);\n    const location = useLocation();\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n    const printedDirections = [];\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Remove the last character from stationName\n                const simplifiedStationName = stationName.replace(/\\(.*/, '');\n\n                // Call API to get station information by simplified station name\n                console.log(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const response = await axios.get(`http://openapi.seoul.go.kr:8088/sample/xml/SearchInfoBySubwayNameService/1/1/${simplifiedStationName}`);\n                const parser = new DOMParser();\n                const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n                const code = xmlDoc.querySelector(\"FR_CODE\")?.textContent;\n                console.log(code);\n                \n                if (code) {\n                    setFR_CODE(code);\n                    const currentDate = new Date();\n                    const roundedMinutes = Math.round(currentDate.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n                    const roundedTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), roundedMinutes);\n                    const dow = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"][roundedTime.getDay()];\n                    const hh = String(roundedTime.getHours()).padStart(2, '0'); // Add leading zero if single digit\n                    const options = {\n                        headers: {\n                            accept: 'application/json',\n                            'Content-Type': 'application/json',\n                            appkey: 'PEKSyFHvkl5imbyfUyw8D2gFUcgqSnxu4d3c8keS'\n                        }\n                    };\n                    const congestionResponse = await axios.get(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${code}?dow=${dow}&hh=${hh}`, options);\n                    setCongestionData(congestionResponse.data);\n                } else {\n                    console.error(\"Failed to get station ID from API response.\");\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchData();\n    }, [stationName]);\n\n    \n\n    const handleClose = () => {\n        toggleRightVisibility(false);\n    };\n\n    const getCurrentTimeSlot = () => {\n        if (!congestionData) return null;\n        const currentTime = new Date();\n        const roundedMinutes = Math.round(currentTime.getMinutes() / 10) * 10; // Round current minutes to the nearest 10\n        const roundedTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), roundedMinutes);\n        const currentTimeHHMM = `${String(roundedTime.getHours()).padStart(2, '0')}:${String(roundedTime.getMinutes()).padStart(2, '0')}`;\n        const timeSlots = congestionData.contents.stat[0].data;\n        for (let i = 0; i < timeSlots.length; i++) {\n            const timeSlotHHMM = `${timeSlots[i].hh}:${timeSlots[i].mm}`;\n            if (timeSlotHHMM === currentTimeHHMM) {\n                return timeSlots[i];\n            }\n        }\n        return null;\n    };\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // 요청을 보냄\n            const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ \"stationName\": stationName }), // 데이터를 JSON 문자열로 변환하여 전송\n            });\n\n            // 응답을 JSON 형식으로 파싱\n            const data = await response.json();\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n\n    function getLineImage(subwayId) {\n        return lineImages[subwayId];\n    }\n    function getSubwayLineName(subwayId) {\n        switch(subwayId) {\n            case \"1001\":\n                return \"1호선\";\n            case \"1002\":\n                return \"2호선\";\n            case \"1003\":\n                return \"3호선\";\n            case \"1004\":\n                return \"4호선\";\n            case \"1005\":\n                return \"5호선\";\n            case \"1006\":\n                return \"6호선\";\n            case \"1007\":\n                return \"7호선\";\n            case \"1008\":\n                return \"8호선\";\n            case 1009:\n                return \"9호선\";\n            // 다른 호선에 대한 경우도 추가\n            default:\n                return \"해당없음\";\n        }\n    }\n    const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n        if (!acc[info.subwayId]) {\n            acc[info.subwayId] = [];\n        }\n        acc[info.subwayId].push(info);\n        return acc;\n    }, {});\n\n\n    return (\n        <div id='right' className={isVisible ? '' : 'hidden'}>\n            <div className=\"close-button-container\">\n                <button className=\"close-button\" onClick={handleClose}><IoCloseOutline /></button>\n            </div>\n            {/* Render congestion data here */}\n            {congestionData && (\n                <div>\n                    <h2>{stationName} 칸 혼잡도 정보</h2>\n                    {/*<p>Station ID: {FR_CODE}</p>*/}\n                    <p>호선: {congestionData.contents.subwayLine}</p>\n                    {getCurrentTimeSlot() ? (\n                    <div className=\"congestion-level\">\n                        <p>{getCurrentTimeSlot().hh}:{getCurrentTimeSlot().mm}의 {stationName}의 칸 혼잡도</p>\n                        <div className=\"congestion-boxes\">\n                            {getCurrentTimeSlot().congestionCar.map((level, index) => (\n                                <div key={index} className={`congestion-box ${level <= 40 ? 'green' : level <= 80 ? 'yellow' : level <= 120 ? 'orange' : 'red'}`}>\n                                    {Math.floor((level / 160) * 100)}%\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <p>No congestion data available for the current time.</p>\n                )}\n                </div>\n            )}\n\n{stationName && (\n                <div>\n                    <br/>\n                    <h2>💡 {stationName}의 실시간 도착 정보</h2>\n                    <br/>\n                    <br/>\n                    {/* arrivalInfo가 존재하는 경우에만 아래 내용을 표시 */}\n                    {arrivalInfo && (\n                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                            {/* arrivalInfo를 순회하며 각 도착 정보를 출력 */}\n                                        {/* 열차 정보와 도착 정보 */}\n                            {Object.keys(groupedData).map(subwayId => (\n                                <div key={subwayId}>\n                                    <p>\n                                        <img\n                                            style={{ width: '20px', height: 'auto', verticalAlign: 'middle' }}\n                                            src={getLineImage(subwayId)}\n                                            alt=\"Subway Line Marker\"\n                                        />\n                                        {getSubwayLineName(subwayId)}\n                                    </p>\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                        {groupedData[subwayId].map((info, index) => {\n                                            // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n                                            const [direction, train] = info.trainLineNm.split(' - ');\n                                            // 현재 열차의 방면이 이미 출력된 방면인지 확인\n                                            const directionIndex = printedDirections.indexOf(train);\n                                            // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n                                            if (directionIndex === -1) {\n                                                printedDirections.push(train);\n                                            }\n\n                                            return (\n                                                <div key={info.rowNum} style={{ border: '1px solid black', padding: '10px', margin: '5px' }}>\n                                                    <div>\n                                                        <p>\n                                                            {direction} ({train}) {directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차'}\n                                                        </p>\n                                                    </div>\n                                                    <p>\n                                                        👉 {info.recptnDt} 기준 <span style={{ color: 'red' }}>{Math.floor(info.barvlDt / 60)}분 {info.barvlDt % 60}초</span> 뒤 도착\n                                                    </p>\n                                                    <p>✔ 현위치 : {info.arvlMsg3}</p>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <br/>\n                                    <hr/>\n                                </div>\n                            ))}\n                            <br/> {/* 모든 출력이 완료된 후에 줄바꿈 추가 */}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Right;\n"],"names":["lineImages","require","_ref","isVisible","toggleRightVisibility","stationName","_useState","stationLine","useState","_useState2","_slicedToArray","congestionData","setCongestionData","_useState3","_useState4","setFR_CODE","_useState5","useLocation","_useState6","arrivalInfo","setArrivalInfo","printedDirections","useEffect","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_xmlDoc$querySelector","simplifiedStationName","response","parser","xmlDoc","code","currentDate","roundedMinutes","roundedTime","dow","hh","options","congestionResponse","wrap","_context","prev","next","replace","console","log","concat","axios","get","sent","DOMParser","parseFromString","data","querySelector","textContent","Date","Math","round","getMinutes","getFullYear","getMonth","getDate","getHours","getDay","String","padStart","headers","accept","appkey","error","t0","stop","apply","arguments","getCurrentTimeSlot","currentTime","currentTimeHHMM","timeSlots","contents","stat","i","length","mm","fetchDataFromFlask","_ref3","_callee2","_context2","fetch","method","body","JSON","stringify","json","getLineImage","subwayId","getSubwayLineName","groupedData","reduce","acc","info","push","_jsxs","id","className","children","_jsx","onClick","IoCloseOutline","subwayLine","congestionCar","map","level","index","floor","style","display","flexDirection","alignItems","Object","keys","width","height","verticalAlign","src","alt","flexWrap","_info$trainLineNm$spl","trainLineNm","split","_info$trainLineNm$spl2","direction","train","directionIndex","indexOf","border","padding","margin","recptnDt","color","barvlDt","arvlMsg3","rowNum"],"sourceRoot":""}