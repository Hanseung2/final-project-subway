{"version":3,"file":"static/js/129.2db71554.chunk.js","mappings":"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","sources":["components/section/Right.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { IoCloseOutline } from \"react-icons/io5\";\n\nconst lineImages = {\n    1001: require('../../assets/img/subwaymapmarker/1호선마커.png'),\n    1002: require('../../assets/img/subwaymapmarker/2호선마커.png'),\n    1003: require('../../assets/img/subwaymapmarker/3호선마커.png'),\n    1004: require('../../assets/img/subwaymapmarker/4호선마커.png'),\n    1005: require('../../assets/img/subwaymapmarker/5호선마커.png'),\n    1006: require('../../assets/img/subwaymapmarker/6호선마커.png'),\n    1007: require('../../assets/img/subwaymapmarker/7호선마커.png'),\n    1008: require('../../assets/img/subwaymapmarker/8호선마커.png'),\n    1009: require('../../assets/img/subwaymapmarker/9호선마커.png'),\n    // 다른 지하철 호선에 대한 이미지 경로 추가\n};\n\nconst Right = ({ isVisible, toggleRightVisibility, stationName, stationLine }) => {\n    const handleClose = () => {\n        toggleRightVisibility();\n    };\n\n    const [stationId, setStationId] = useState(null);\n    const [congestionData, setCongestionData] = useState(null);\n    const location = useLocation();\n    const [arrivalInfo, setArrivalInfo] = useState(null); // 도착 정보 상태\n    const printedDirections = [];\n\n    useEffect(() => {\n        const fetchStationId = async () => {\n            try {\n                // 모든 지하철역 정보 가져오기\n                const response = await fetch('https://apis.openapi.sk.com/puzzle/subway/meta/stations');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const stations = await response.json();\n\n                // 선택한 역 이름과 맞는 stationId 찾기\n                const selectedStation = stations.find(station => station.name === stationName);\n                if (selectedStation) {\n                    setStationId(selectedStation.id);\n\n                    // stationId를 이용하여 혼잡도 정보 가져오기\n                    const congestionResponse = await fetch(`https://apis.openapi.sk.com/puzzle/subway/congestion/stat/car/stations/${selectedStation.id}?dow=TUE&hh=08`, {\n                        method: 'GET',\n                        headers: {\n                            'appkey': 'PEKSyFHvkl5imbyfUyw8D2gFUcgqSnxu4d3c8keS'\n                        }\n                    });\n                    if (!congestionResponse.ok) {\n                        throw new Error('Network response was not ok');\n                    }\n                    const congestionData = await congestionResponse.json();\n                    setCongestionData(congestionData);\n                }\n            } catch (error) {\n                console.error('There was a problem with your fetch operation:', error);\n            }\n        };\n\n        fetchStationId();\n    }, [stationName]);\n\n    const fetchDataFromFlask = async () => {\n        try {\n            // 요청을 보냄\n            const response = await fetch(\"http://flask:8082/receive_subway_arrive\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ \"stationName\": stationName }), // 데이터를 JSON 문자열로 변환하여 전송\n            });\n\n            // 응답을 JSON 형식으로 파싱\n            const data = await response.json();\n\n            // 받아온 도착 정보를 상태에 저장\n            setArrivalInfo(data);\n        } catch (error) {\n            console.error('데이터 가져오기 실패:', error);\n        }\n    };\n    // 컴포넌트가 마운트될 때 데이터 가져오기\n    useEffect(() => {\n        fetchDataFromFlask();\n    }, [stationName]); // stationName이 변경될 때마다 fetchDataFromFlask 호출\n\n\n    function getLineImage(subwayId) {\n        return lineImages[subwayId];\n    }\n    function getSubwayLineName(subwayId) {\n        switch(subwayId) {\n            case \"1001\":\n                return \"1호선\";\n            case \"1002\":\n                return \"2호선\";\n            case \"1003\":\n                return \"3호선\";\n            case \"1004\":\n                return \"4호선\";\n            case \"1005\":\n                return \"5호선\";\n            case \"1006\":\n                return \"6호선\";\n            case \"1007\":\n                return \"7호선\";\n            case \"1008\":\n                return \"8호선\";\n            case 1009:\n                return \"9호선\";\n            // 다른 호선에 대한 경우도 추가\n            default:\n                return \"해당없음\";\n        }\n    }\n    const groupedData = (arrivalInfo || []).reduce((acc, info) => {\n        if (!acc[info.subwayId]) {\n            acc[info.subwayId] = [];\n        }\n        acc[info.subwayId].push(info);\n        return acc;\n    }, {});\n    return (\n        <div id='right' className={isVisible ? '' : 'hidden'}>\n            <div className=\"close-button-container\">\n                <button className=\"close-button\" onClick={handleClose}><IoCloseOutline/></button>\n            </div>\n            {stationName && (\n                <div>\n                    <br/>\n                    <h2>💡 {stationName}의 실시간 도착 정보</h2>\n                    <br/>\n                    <br/>\n                    {/* arrivalInfo가 존재하는 경우에만 아래 내용을 표시 */}\n                    {arrivalInfo && (\n                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                            {/* arrivalInfo를 순회하며 각 도착 정보를 출력 */}\n                                        {/* 열차 정보와 도착 정보 */}\n                            {Object.keys(groupedData).map(subwayId => (\n                                <div key={subwayId}>\n                                    <p>\n                                        <img\n                                            style={{ width: '20px', height: 'auto', verticalAlign: 'middle' }}\n                                            src={getLineImage(subwayId)}\n                                            alt=\"Subway Line Marker\"\n                                        />\n                                        {getSubwayLineName(subwayId)}\n                                    </p>\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                        {groupedData[subwayId].map((info, index) => {\n                                            // trainLineNm을 \"-\" 기준으로 분리하여 방면과 열차의 순서를 구분\n                                            const [direction, train] = info.trainLineNm.split(' - ');\n                                            // 현재 열차의 방면이 이미 출력된 방면인지 확인\n                                            const directionIndex = printedDirections.indexOf(train);\n                                            // 방면이 이미 출력되었는지 확인하고 출력 여부에 따라 printedDirections 배열에 추가\n                                            if (directionIndex === -1) {\n                                                printedDirections.push(train);\n                                            }\n\n                                            return (\n                                                <div key={info.rowNum} style={{ border: '1px solid black', padding: '10px', margin: '5px' }}>\n                                                    <div>\n                                                        <p>\n                                                            {direction} ({train}) {directionIndex === -1 ? '- 첫 번째 열차' : '- 두 번째 열차'}\n                                                        </p>\n                                                    </div>\n                                                    <p>\n                                                        👉 {info.recptnDt} 기준 <span style={{ color: 'red' }}>{(info.barvlDt / 60).toFixed(2)}분</span> 뒤 도착\n                                                    </p>\n                                                    <p>✔ 현위치 : {info.arvlMsg3}</p>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                    <br/>\n                                    <hr/>\n                                </div>\n                            ))}\n                            <br/> {/* 모든 출력이 완료된 후에 줄바꿈 추가 */}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* stationId가 존재하는 경우에만 아래 내용을 표시 */}\n            {congestionData && (\n                <div>\n                    <h2>{congestionData.stationName}의 혼잡도 정보</h2>\n                    <p>혼잡도: {congestionData.congestion}</p>\n                    {/* 혼잡도 정보에 따라 추가적인 표시를 할 수 있음 */}\n                </div>\n            )}\n        </div>\n    );\n\n};\nexport default Right;\n"],"names":["lineImages","require","_ref","isVisible","toggleRightVisibility","stationName","_useState","stationLine","useState","_useState2","_slicedToArray","setStationId","_useState3","_useState4","congestionData","setCongestionData","_useState5","useLocation","_useState6","arrivalInfo","setArrivalInfo","printedDirections","useEffect","fetchStationId","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","stations","selectedStation","congestionResponse","_congestionData","wrap","_context","prev","next","fetch","sent","ok","Error","json","find","station","name","id","concat","method","headers","t0","console","error","stop","apply","arguments","fetchDataFromFlask","_ref3","_callee2","data","_context2","body","JSON","stringify","getLineImage","subwayId","getSubwayLineName","groupedData","reduce","acc","info","push","_jsxs","className","children","_jsx","onClick","IoCloseOutline","style","display","flexDirection","alignItems","Object","keys","map","width","height","verticalAlign","src","alt","flexWrap","index","_info$trainLineNm$spl","trainLineNm","split","_info$trainLineNm$spl2","direction","train","directionIndex","indexOf","border","padding","margin","recptnDt","color","barvlDt","toFixed","arvlMsg3","rowNum","congestion"],"sourceRoot":""}