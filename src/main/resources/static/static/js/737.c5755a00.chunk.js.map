{"version":3,"file":"static/js/737.c5755a00.chunk.js","mappings":"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","sources":["pages/Map.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Main from '../components/section/Main';\nimport subwayData from '../data/map.json';\nimport { FaLongArrowAltRight } from \"react-icons/fa\";\nimport { IoSearch, IoLocationOutline } from \"react-icons/io5\";\nimport { setStartStation, setEndStation } from '../data/actions';\nimport Right from '../components/section/Right';\nimport { MdMyLocation } from \"react-icons/md\";\n\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\n\n// Import subway line images...\nimport line1 from '../assets/img/subwaymapmarker/1호선마커.png';\nimport line2 from '../assets/img/subwaymapmarker/2호선마커.png';\nimport line3 from '../assets/img/subwaymapmarker/3호선마커.png';\nimport line4 from '../assets/img/subwaymapmarker/4호선마커.png';\nimport line5 from '../assets/img/subwaymapmarker/5호선마커.png';\nimport line6 from '../assets/img/subwaymapmarker/6호선마커.png';\nimport line7 from '../assets/img/subwaymapmarker/7호선마커.png';\nimport line8 from '../assets/img/subwaymapmarker/8호선마커.png';\nimport line9 from '../assets/img/subwaymapmarker/9호선마커.png';\nimport line10 from '../assets/img/subwaymapmarker/수인분당선마커.png';\nimport line11 from '../assets/img/subwaymapmarker/경의중앙선마커.png';\nimport line12 from '../assets/img/subwaymapmarker/경춘선마커.png';\nimport line13 from '../assets/img/subwaymapmarker/공항철도1호선마커.png';\nimport line14 from '../assets/img/subwaymapmarker/신림선마커.png';\nimport line15 from '../assets/img/subwaymapmarker/우이신설선마커.png';\nimport line16 from '../assets/img/subwaymapmarker/김포골드라인마커.png';\n\nimport loc from '../assets/img/subwaymapmarker/현위치.png';\nimport { Background } from 'victory';\n\nconst lineImages = {\n    \"1호선\": line1,\n    \"2호선\": line2,\n    \"3호선\": line3,\n    \"4호선\": line4,\n    \"5호선\": line5,\n    \"6호선\": line6,\n    \"7호선\": line7,\n    \"8호선\": line8,\n    \"9호선\": line9,\n    \"수인분당선\": line10,\n    \"경의중앙선\": line11,\n    \"경춘선\": line12,\n    \"공항철도1호선\": line13,\n    \"신림선\": line14,\n    \"우이신설선\": line15,\n    \"김포골드라인\": line16,\n};\n\n\nconst Map = () => {\n    const [isRightVisible, setIsRightVisible] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [map, setMap] = useState(null);\n    const [userMarker, setUserMarker] = useState(null); // 사용자 마커 상태 추가\n    const [stationName, setStationName] = useState(null);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [suggestions, setSuggestions] = useState([]); // Define suggestions state\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n\n    // 제안 항목 클릭 처리 함수\n    const handleSuggestionItemClick = (suggestion) => {\n    // '-' 포함 여부 확인하고 이후 문자열 제거\n    const sanitizedSuggestion = suggestion.includes('-') ? suggestion.split('-')[0].trim() : suggestion;\n        setSearchTerm(sanitizedSuggestion); // 정제된 제안을 검색어로 설정\n        setSuggestions([]); // 제안 목록 초기화\n    };\n\n\n// Function to handle search term change\nconst handleSearchTermChange = (e) => {\n    const value = e.target.value;\n    setSearchTerm(value); // Update search term state\n\n    // Filter subway stations based on the search term\n    const filteredStations = subwayData.filter(station => station.name.includes(value)).slice(0, 3); // Slice the array to get only the first 3 elements\n    setSuggestions(filteredStations.map(station => `${station.name} - ${station.line}`));\n};\n\n\n    const toggleRightVisibility = (name = null) => {\n        setIsRightVisible(!isRightVisible);\n        setStationName(name);\n    };    \n\n\n    useEffect(() => {\n        window.setStation = (stationName, type) => {\n            if (type === 'start') {\n                dispatch(setStartStation(stationName));\n            } else if (type === 'end') {\n                dispatch(setEndStation(stationName));\n            }\n        };\n\n        const script = document.createElement('script');\n        script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=a576239cea9ab4b2daf2a00e251e97e9&autoload=false\";\n        script.async = true;\n        document.head.appendChild(script);\n\n        script.onload = () => {\n            window.kakao.maps.load(() => {\n                const mapContainer = document.getElementById('map');\n                const mapOption = {\n                    center: new window.kakao.maps.LatLng(37.5503, 127.0731),\n                    level: 5\n                };\n\n                const map = new window.kakao.maps.Map(mapContainer, mapOption);\n                setMap(map);\n\n                if ('geolocation' in navigator) {\n                    navigator.geolocation.getCurrentPosition(position => {\n                        const userPosition = new window.kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                        map.setCenter(userPosition);\n                    });\n                } else {\n                    console.log('Geolocation is not supported.');\n                }\n\n                subwayData.forEach((station, index) => {\n                    const markerPosition = new window.kakao.maps.LatLng(station.y, station.x);\n                    const markerImageSrc = lineImages[station.line];\n                    const markerImageSize = new window.kakao.maps.Size(24, 30);\n                    const markerImageOption = { offset: new window.kakao.maps.Point(12, 35) };\n                    const markerImage = new window.kakao.maps.MarkerImage(markerImageSrc, markerImageSize, markerImageOption);\n\n                    const marker = new window.kakao.maps.Marker({\n                        position: markerPosition,\n                        map: map,\n                        image: markerImage\n                    });\n\n                    const content = `\n                        <div class=\"wrap\" id=\"overlay-${index}\">\n                            <div class=\"info\">\n                                <div class=\"title\">\n                                    ${station.name}\n                                    <div class=\"close\" onclick=\"document.getElementById('overlay-${index}').style.display='none'\" title=\"닫기\"></div>\n                                </div>\n                                <div class=\"body\">\n                                    <div class=\"desc\">\n                                        <div class=\"ellipsis\">${station.line} ${station.name}</div>\n                                        <div>\n                                            <button onclick=\"setStation('${station.name}', 'start')\">출발</button>\n                                            <button onclick=\"setStation('${station.name}', 'end')\">도착</button>\n                                            <button onclick=\"window.goToLivePage('${station.name}')\">실시간 도착정보</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n\n                    const overlay = new window.kakao.maps.CustomOverlay({\n                        content: content,\n                        position: marker.getPosition(),\n                        yAnchor: 1\n                    });\n\n                    window.kakao.maps.event.addListener(marker, 'click', function () {\n                        overlay.setMap(map);\n                        document.querySelectorAll('.wrap').forEach(el => el.style.display = 'none');\n                        document.getElementById(`overlay-${index}`).style.display = 'block';\n                    });\n                });\n\n                window.goToLivePage = (stationName) => {                        \n                    toggleRightVisibility(stationName);\n                };\n            });\n        };\n\n        return () => {\n            document.head.removeChild(script);\n            delete window.goToArrivalPage;\n        };\n    }, [dispatch, navigate]);\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        const station = subwayData.find(station => station.name.includes(searchTerm));\n        if (station && map) {\n            const moveLatLon = new window.kakao.maps.LatLng(station.y, station.x);\n            map.setCenter(moveLatLon);\n            map.setLevel(4);\n    \n            // 오버레이를 표시할 위치에 커스텀 오버레이 생성 및 표시\n            const content = `\n                <div class=\"wrap\">\n                    <div class=\"info\">\n                        <div class=\"title\">\n                            ${station.name}\n                            <button class=\"close\" title=\"닫기\" onclick=\"document.querySelector('.wrap').style.display = 'none'\"></button>\n                        </div>\n                        <div class=\"body\">\n                            <div class=\"desc\">\n                                <div class=\"ellipsis\">${station.line} ${station.name}</div>\n                                <div>\n                                    <button onclick=\"setStation('${station.name}', 'start')\">출발</button>\n                                    <button onclick=\"setStation('${station.name}', 'end')\">도착</button>\n                                    <button onclick=\"window.goToLivePage('${station.name}')\">실시간 도착정보</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n            const overlay = new window.kakao.maps.CustomOverlay({\n                content: content,\n                position: moveLatLon,\n                yAnchor: 1\n            });\n    \n            overlay.setMap(map);\n        }\n    };\n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n\n\n    const moveToUserLocation = () => {\n        if (map && 'geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition(position => {\n                const userPosition = new window.kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                map.setCenter(userPosition);\n\n                // 마커가 이미 존재하면 제거\n                if (userMarker) {\n                    userMarker.setMap(null);\n                    setUserMarker(null);\n                } else {\n    \n                    // Create a marker for the user's current location\n                    const markerImageSrc = loc ; // You need to provide a valid image URL or path\n                    const markerImageSize = new window.kakao.maps.Size(30, 40); // Customize size as needed\n                    const markerImageOption = { offset: new window.kakao.maps.Point(12, 35) };\n                    const markerImage = new window.kakao.maps.MarkerImage(markerImageSrc, markerImageSize, markerImageOption);\n        \n                    const userMarker = new window.kakao.maps.Marker({\n                        position: userPosition,\n                        map: map,\n                        image: markerImage\n                });\n                setUserMarker(userMarker);\n\n            }\n                \n            });\n        }\n    };\n\n    return (\n        <Main title=\"지도\" description=\"지도 페이지\">\n            <div className=\"search-container\">\n                <div className=\"search-form\">\n                    <form onSubmit={handleSearch}>\n                        <input\n                            type=\"text\"\n                            placeholder=\"지하철역 검색\"\n                            value={searchTerm}\n                            onChange={handleSearchTermChange} // Use handleSearchTermChange for input change\n                        />\n                        <button type=\"submit\"> <IoSearch size={20} /> </button>\n                    </form>\n                    \n                    { suggestions.length > 0 && (\n                        <ul className=\"suggestions\">\n                            {suggestions.map((suggestion, index) => (\n                                <li key={index} onClick={() => handleSuggestionItemClick(suggestion)}>{suggestion}</li>\n                            ))}\n                        </ul>\n                    )}\n                    {/*\n                    <div className=\"route-box\">\n                        <div className=\"route-info\">출발지: {startStation}</div>\n                        <FaLongArrowAltRight />\n                        <div className=\"route-info\">도착지: {endStation}</div>\n                        <button onClick={navigateToRouteResult}>실시간 길찾기</button>\n                    </div>\n                */}\n                </div>\n            </div>\n            <div id=\"map\">지도 로딩중...</div>\n            {/* 내 위치로 이동 버튼 */}\n            <div className=\"location-button\" onClick={moveToUserLocation}>\n                <MdMyLocation/>\n            </div>\n            {isRightVisible && <Right isVisible={isRightVisible} toggleRightVisibility={toggleRightVisibility} stationName={stationName} />}\n        </Main>\n    );\n};\n\nexport default Map;"],"names":["lineImages","line1","line2","line3","line4","line5","line6","line7","line8","line9","line10","line11","line12","line13","line14","line15","line16","_useState","useState","_useState2","_slicedToArray","isRightVisible","setIsRightVisible","_useState3","_useState4","searchTerm","setSearchTerm","_useState5","_useState6","map","setMap","_useState7","_useState8","userMarker","setUserMarker","_useState9","_useState10","stationName","setStationName","dispatch","useDispatch","navigate","useNavigate","_useState11","_useState12","suggestions","setSuggestions","toggleRightVisibility","useSelector","state","startStation","endStation","name","arguments","length","undefined","useEffect","window","setStation","type","setStartStation","setEndStation","script","document","createElement","src","async","head","appendChild","onload","kakao","maps","load","mapContainer","getElementById","mapOption","center","LatLng","level","Map","navigator","geolocation","getCurrentPosition","position","userPosition","coords","latitude","longitude","setCenter","console","log","subwayData","forEach","station","index","markerPosition","y","x","markerImageSrc","line","markerImageSize","Size","markerImageOption","offset","Point","markerImage","MarkerImage","marker","Marker","image","content","concat","overlay","CustomOverlay","getPosition","yAnchor","event","addListener","querySelectorAll","el","style","display","goToLivePage","removeChild","goToArrivalPage","_jsxs","Main","title","description","children","_jsx","className","onSubmit","e","preventDefault","find","includes","moveLatLon","setLevel","placeholder","value","onChange","target","filteredStations","filter","slice","IoSearch","size","suggestion","onClick","sanitizedSuggestion","split","trim","handleSuggestionItemClick","id","loc","MdMyLocation","Right","isVisible"],"sourceRoot":""}