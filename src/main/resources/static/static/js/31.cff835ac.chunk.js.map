{"version":3,"file":"static/js/31.cff835ac.chunk.js","mappings":"mUAUWA,EAAQ,EACRC,EAAU,GAgOrB,UA9NY,WACR,IAAMC,GAAeC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,YAAY,IACtDG,GAAaF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAU,IACxDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,GAAYC,EAAAA,EAAAA,MAClBC,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAQC,EAAOJ,EAAPI,QAClBC,EAAQ,CAAC,GAKbC,GAA8Bb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,IAI1BG,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAmB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE0J,OAF1JF,EAAAC,KAAA,EAEdL,EAAG,2CAAAO,OAA8CC,mBAAmBrC,GAAa,SAAAoC,OAAQC,mBAAmBlC,GAAW,UAAAiC,OAASC,mBAAmBvC,GAAM,SAAAsC,OAAQpB,GAAOiB,EAAAE,KAAA,EACvJG,MAAMT,EAAK,CAC9BU,OAAQ,OACRC,QAAS,CACL,eAAgB,sBAErB,KAAD,EALY,OAARV,EAAQG,EAAAQ,KAAAR,EAAAE,KAAA,EAMKL,EAASY,OAAO,KAAD,EAA5BX,EAAIE,EAAAQ,KACVpB,EAAWU,GAAME,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEjBW,QAAQC,MAAM,4DAAcZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAlB,EAAA,mBAE5C,kBAdwB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAerBhD,GAAgBG,GAChBoB,GAER,GAAG,CAACvB,EAAcG,IAGlB,IAAM8C,EAAUC,SAASpC,EAAM,IACzBqC,EAAYD,SAASnC,EAAQ,IACnCjB,EAAkB,KAAVmD,EAA6B,GAAZE,EACzBP,QAAQQ,IAAItD,GAGZ,IAmDMuD,EARW,SAACjC,GACd,IAAIiC,EAAW,GAIf,OAHAjC,EAAQkC,SAAQ,SAAAC,GACZF,EAASG,KAAKD,EAAOE,KACzB,IACOJ,CACX,CAEiBK,CAAStC,GAC1BrB,EAAUsD,EACVT,QAAQQ,IAAIC,GAEZ,IAAMM,EAAqB,SAACJ,GACxB,IAAMK,EAAe,GAKrB,GAA0C,IAAtCL,EAAOM,oBAAoBC,OAS3B,OAPAF,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAoBC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOe,WAAYC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpMC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAU,OAAQC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAE1E,EAAa,IAAEuD,EAAOe,UAAU,QAC3KP,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAEY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,cAAQ,KAAApD,OATjO,KAYGwB,EAIf,IAAM6B,EAAgBlC,EAAOiC,UAEzBE,EAAK,EAGTnC,EAAOoC,eAAerC,SAAQ,SAACsC,EAAMC,GACjC,IAAMC,EAAavC,EAAOwC,SAASF,GAASJ,EAAgB,KACtDO,EAAmBzC,EAAO0C,gBAAgBJ,GAASJ,EAAgB,KACnES,EAAkB3C,EAAO4C,gBAAgBN,GAASJ,EAAgB,KACxExE,EAAQ4E,GAAO,EAGf,IAAMO,EAAaN,EAAaE,EAAmBE,EAC7CG,EAAqBP,EAAaM,EAAa,KAC/CE,EAA2BN,EAAmBI,EAAa,KAC3DG,EAA0BL,EAAkBE,EAAa,KAG3DxC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAwBC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK0D,EAAU,MAAM3B,OAAQ,OAAQC,gBAAiBC,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,IAAKtB,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpQC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKiE,EAAkB,MAAMlB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACzMJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAEY,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,aAClR9B,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAa,IAAVmB,EAAc7F,EAAeuD,EAAOM,oBAAoBgC,EAAQ,GAAI,IAAa,IAAVA,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,GAAI,SAAQ,KAAAzD,OAHpUyD,KAOnBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA8BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK4D,EAAgB,MAAM7B,OAAQ,OAAQC,gBAAiB,YAAaG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC5MC,EAAAA,EAAAA,KAAA,OAAKC,IAAK4B,EAAM1B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKkE,EAAwB,MAAMnB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC5MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,cAAQ,WAAAzD,OAF9MyD,KAMzBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA0BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK8D,EAAe,MAAM/B,OAAQ,OAAQC,gBAAiB,MAAOG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACjMC,EAAAA,EAAAA,KAAA,OAAKC,IAAK6B,EAAM3B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKmE,EAAuB,MAAMpB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC3MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,eAAS,OAAAzD,OAFnNyD,KAKrBtC,EAAOwC,SAASzC,SAAQ,SAACoD,EAAGb,GAEpB5E,EAAQ4E,GADE,IAAVA,EACiBtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,GAEhF5E,EAAQ4E,EAAQ,GAAKtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,EAE9H,IAEoBQ,EAAqBC,EAA2BC,EACpEb,EAAKA,EAAGnC,EAAOwC,SAASF,GAAOtC,EAAO0C,gBAAgBJ,GAAOtC,EAAO4C,gBAAgBN,EACxF,IAGA,IAAMc,EAAYpD,EAAOoC,eAAe7B,OAAS,EAC3C8C,GAAiD,IAA/BrD,EAAOwC,SAASY,GAAmBpD,EAAOiC,UAAYE,EAAInC,EAAOiC,WAAaC,EAAgB,KAWtH,OAPA7B,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA4BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAKwE,EAAc,MAAMzC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOoC,eAAegB,IAAapC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC3OC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,OAASC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEY,KAAKC,OAAOhC,EAAOiC,UAAYE,GAAK,IAAI,UAAGJ,KAAKC,MAAMhC,EAAOwC,SAASY,GAAa,IAAI,aACrP5C,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEnB,EAAOM,oBAAoBN,EAAOM,oBAAoBC,OAAS,GAAG,IAAEP,EAAOoC,eAAepC,EAAOoC,eAAe7B,OAAS,GAAG,SAAQ,KAAA1B,OAHpRuE,KAMZ/C,CACX,EACUS,EAAe,SAACuB,GAWlB,MAVmB,CACf,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,WAEOA,IAAS,MAC/B,EAKA,OACI7B,EAAAA,EAAAA,MAAC8C,EAAAA,EAAI,CAACC,MAAM,wCAAUC,YAAY,2DAAarC,SAAA,EAE3CX,EAAAA,EAAAA,MAAA,OAAKiD,UAAU,mBAAkBtC,SAAA,EAC7BX,EAAAA,EAAAA,MAAA,MAAIiD,UAAU,gBAAetC,SAAA,CAAC,0CAAQC,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,UAAStC,SAC/DlE,GACGmE,EAAAA,EAAAA,KAAA,OAAAD,SAAK,4BAELC,EAAAA,EAAAA,KAAA,UAAQsC,QArKE,WACtBxG,GAAW,GACXyG,YAAW,WACPzG,GAAW,GACXC,EAAS,OAAO,CAACR,MAAM,CAACkB,QAAQA,IACpC,GAAG,IACP,EA+JoD4C,MAAO,CAAEI,gBAAiB,UAAWgB,MAAO,QAAS+B,OAAQ,OAAQC,aAAc,MAAOC,OAAQ,WAAY3C,SAAC,oBAElJ,KAACX,EAAAA,EAAAA,MAAA,KAAAW,SAAA,CAAG,oCAAS5D,EAAK,UAAGC,EAAO,WAAIC,EAAQ,OACxChB,IAAgB+D,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM1E,KAChDG,IAAc4D,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAMvE,MAC7CH,IAAgB2E,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,qEAC1CvE,IAAcwE,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,uEA9J/CtD,EAAQkG,KAAI,SAAC/D,EAAQsC,GAAK,OAC7B9B,EAAAA,EAAAA,MAAA,OAAiBiD,UAAU,aAAYtC,SAAA,EACnCX,EAAAA,EAAAA,MAAA,MAAIiD,UAAU,gBAAetC,SAAA,CAAC,mCAAQmB,EAAQ,MAC9C9B,EAAAA,EAAAA,MAAA,MAAAW,SAAA,CAAI,8BAAQY,KAAKC,MAAOzF,EAAK,MAAa,UAAGwF,KAAKC,MAAOzF,EAAK,KAAY,IAAI,UAAGwF,KAAKC,MAAOzF,EAAQ,IAAI,YAAKkB,EAAQ,QACtH2D,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,uBAAuBhD,MAAO,CAAEE,MAAO,SAAUC,OAAQ,OAAQC,gBAAiB,YAAamD,OAAQ,UAAW7C,SAC5Hf,EAAmBJ,MAExBQ,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,eAActC,SAAA,CAAC,kDAAaY,KAAKC,OAAOzF,EAAMyD,EAAOiC,WAAS,MAAa,UAAGF,KAAKC,OAAOzF,EAAMyD,EAAOiC,WAAS,KAAY,IAAI,UAAGF,KAAKC,OAAOzF,EAAMyD,EAAOiC,WAAY,IAAI,YAExLjC,EAAOE,OACJM,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA9C,SAAA,EACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,mCAAQY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,aACzGzB,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,iBAAKnB,EAAOE,KAAK6D,KAAI,SAACG,EAAO5B,GAEvD,OAAIA,IAAUtC,EAAOE,KAAKK,OAAS,EACzB,GAAN1B,OAAUqF,EAAK,QAERA,CAEX,OACClE,EAAOoC,eAAe2B,KAAI,SAAC1B,EAAMC,GAAK,OACnC9B,EAAAA,EAAAA,MAAA,KAAeiD,UAAU,aAAYtC,SAAA,CAAEmB,EAAQ,EAAE,wBAAOD,EAAK,IAAErC,EAAOM,oBAAoBgC,GAAO,OAAKP,KAAKC,OAAOzF,EAAMmB,EAAQ4E,IAAM,MAAa,UAAGP,KAAKC,OAAOzF,EAAMmB,EAAQ4E,IAAM,KAAY,IAAI,UAAGP,KAAKC,OAAOzF,EAAMmB,EAAQ4E,IAAS,IAAI,qCAAxOA,EAAmP,SApBjQA,EAwBJ,MA2IV,C,iKC1BR,UAnMY,WACR,IAAM7F,GAAeC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,YAAY,IACtDG,GAAaF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAU,IACxDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAEzCa,GAFUX,EAAA,GAAYA,EAAA,IACRK,EAAAA,EAAAA,MACN,CAAC,IACbC,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAQC,EAAOJ,EAAPI,QAChB0G,EAAc5H,EAAAA,MAIpBoB,GAA4Bb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAjCqC,EAAMpC,EAAA,GAAEwG,EAASxG,EAAA,GAGlByG,GAAWC,EAAAA,EAAAA,MAEjBjF,QAAQQ,IAAIrD,EAAAA,UAGZuB,EAAAA,EAAAA,YAAU,WAAO,IAADwG,EAENC,EAAiC,QAAjBD,EAAGF,EAAS1H,aAAK,IAAA4H,OAAA,EAAdA,EAAgB1G,QAGzC,GAAI2G,EAAkB,CAClB,IAAMC,EAAsB,eAAAxG,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAmG,EAAA,OAAAvG,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEqD,OAFrDF,EAAAC,KAAA,EAEjBL,EAAG,qCAAAO,OAAwCC,mBAAmBrB,IAAQiB,EAAAE,KAAA,EACrDG,MAAMT,EAAK,CAC9BU,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpB0F,KAAMC,KAAKC,UAAUL,KACtB,KAAD,EANY,OAARjG,EAAQG,EAAAQ,KAAAR,EAAAE,KAAA,EAOkBL,EAASY,OAAO,KAAD,EAAzCuF,EAAiBhG,EAAAQ,KACvBkF,EAAUM,GACVrF,QAAQQ,IAAI,0EAAoB6E,GAAmBhG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEnDW,QAAQC,MAAM,oEAAiBZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAlB,EAAA,mBAE/C,kBAhB2B,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAkB5BgF,GACJ,CACJ,GAAG,CAACJ,IAEJ,IA+BMjE,EAAqB,SAACJ,GACxB,IAAMK,EAAe,GAKrB,GAA0C,IAAtCL,EAAOM,oBAAoBC,OAS3B,OAPAF,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAoBC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOe,WAAYC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpMC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAU,OAAQC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAE1E,EAAa,IAAEuD,EAAOe,UAAU,QAC3KP,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAEY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,cAAQ,KAAApD,OATjO,KAYGwB,EAIf,IAAM6B,EAAgBlC,EAAOiC,UAEzBE,EAAK,EAGLnC,EAAOoC,eAAerC,SAAQ,SAACsC,EAAMC,GACjC,IAAMC,EAAavC,EAAOwC,SAASF,GAASJ,EAAgB,KACtDO,EAAmBzC,EAAO0C,gBAAgBJ,GAASJ,EAAgB,KACnES,EAAkB3C,EAAO4C,gBAAgBN,GAASJ,EAAgB,KACxExE,EAAQ4E,GAAO,EAGf,IAAMO,EAAaN,EAAaE,EAAmBE,EAC7CG,EAAqBP,EAAaM,EAAa,KAC/CE,EAA2BN,EAAmBI,EAAa,KAC3DG,EAA0BL,EAAkBE,EAAa,KAG/DxC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAwBC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK0D,EAAU,MAAM3B,OAAQ,OAAQC,gBAAiBC,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,IAAKtB,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpQC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKiE,EAAkB,MAAMlB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACzMJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAEY,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,aAClR9B,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAa,IAAVmB,EAAc7F,EAAeuD,EAAOM,oBAAoBgC,EAAQ,GAAI,IAAa,IAAVA,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,GAAI,SAAQ,KAAAzD,OAHpUyD,KAOnBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA8BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK4D,EAAgB,MAAM7B,OAAQ,OAAQC,gBAAiB,YAAaG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC5MC,EAAAA,EAAAA,KAAA,OAAKC,IAAK4B,EAAM1B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKkE,EAAwB,MAAMnB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC5MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,cAAQ,WAAAzD,OAF9MyD,KAMzBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA0BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK8D,EAAe,MAAM/B,OAAQ,OAAQC,gBAAiB,MAAOG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACjMC,EAAAA,EAAAA,KAAA,OAAKC,IAAK6B,EAAM3B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKmE,EAAuB,MAAMpB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC3MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,eAAS,OAAAzD,OAFnNyD,KAKrBtC,EAAOwC,SAASzC,SAAQ,SAACoD,EAAGb,GAEpB5E,EAAQ4E,GADE,IAAVA,EACiBtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,GAEhF5E,EAAQ4E,EAAQ,GAAKtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,EAE9H,IAEoBQ,EAAqBC,EAA2BC,EACpEb,EAAKA,EAAGnC,EAAOwC,SAASF,GAAOtC,EAAO0C,gBAAgBJ,GAAOtC,EAAO4C,gBAAgBN,EACxF,IAGA,IAAMc,EAAYpD,EAAOoC,eAAe7B,OAAS,EAC3C8C,GAAiD,IAA/BrD,EAAOwC,SAASY,GAAmBpD,EAAOiC,UAAYE,EAAInC,EAAOiC,WAAaC,EAAgB,KAWtH,OAPA7B,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA4BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAKwE,EAAc,MAAMzC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOoC,eAAegB,IAAapC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC3OC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,OAASC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEY,KAAKC,OAAOhC,EAAOiC,UAAYE,GAAK,IAAI,UAAGJ,KAAKC,MAAMhC,EAAOwC,SAASY,GAAa,IAAI,aACrP5C,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEnB,EAAOM,oBAAoBN,EAAOM,oBAAoBC,OAAS,GAAG,IAAEP,EAAOoC,eAAepC,EAAOoC,eAAe7B,OAAS,GAAG,SAAQ,KAAA1B,OAHpRuE,KAMZ/C,CACX,EACUS,EAAe,SAACuB,GAWlB,MAVmB,CACf,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,WAEOA,IAAS,MAC/B,EAIA,OACI7B,EAAAA,EAAAA,MAAC8C,EAAAA,EAAI,CAACC,MAAM,wCAAUC,YAAY,2DAAarC,SAAA,EAE3CX,EAAAA,EAAAA,MAAA,OAAKiD,UAAU,mBAAkBtC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,gBAAetC,SAAC,0CAAY,KAACX,EAAAA,EAAAA,MAAA,KAAAW,SAAA,CAAG,oCAAS5D,EAAK,UAAGC,EAAO,WAAIC,EAAQ,OACjFhB,IAAgB+D,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM1E,KAChDG,IAAc4D,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAMvE,MAC7CH,IAAgB2E,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,qEAC1CvE,IAAcwE,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,uEA3I/CnB,EAAO+D,KAAI,SAAC/D,EAAQsC,GAAK,OAG5B9B,EAAAA,EAAAA,MAAA,OAAiBiD,UAAU,aAAYtC,SAAA,EACnCX,EAAAA,EAAAA,MAAA,MAAIiD,UAAU,gBAAetC,SAAA,CAAC,mDAAcmB,EAAQ,MACpD9B,EAAAA,EAAAA,MAAA,MAAAW,SAAA,CAAI,8BAAQY,KAAKC,MAAOmC,EAAW,MAAa,UAAGpC,KAAKC,MAAOmC,EAAW,KAAY,IAAI,UAAGpC,KAAKC,MAAOmC,EAAc,IAAI,YAAK1G,EAAQ,QACxI2D,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,uBAAuBhD,MAAO,CAAEE,MAAO,SAAUC,OAAQ,OAAQC,gBAAiB,YAAamD,OAAQ,UAAW7C,SAC5Hf,EAAmBJ,MAExBQ,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,eAActC,SAAA,CAAC,kDAAaY,KAAKC,OAAOmC,EAAYnE,EAAOiC,WAAS,MAAa,UAAGF,KAAKC,OAAOmC,EAAYnE,EAAOiC,WAAS,KAAY,IAAI,UAAGF,KAAKC,OAAOmC,EAAYnE,EAAOiC,WAAY,IAAI,YAC1MjC,EAAOE,OACJM,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA9C,SAAA,EACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,mCAAQY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,aACzGzB,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,iBAAKnB,EAAOE,KAAK6D,KAAI,SAACG,EAAO5B,GAEvD,OAAIA,IAAUtC,EAAOE,KAAKK,OAAS,EACzB,GAAN1B,OAAUqF,EAAK,QAERA,CAEX,OACClE,EAAOoC,eAAe2B,KAAI,SAAC1B,EAAMC,GAAK,OACnC9B,EAAAA,EAAAA,MAAA,KAAeiD,UAAU,aAAYtC,SAAA,CAAEmB,EAAQ,EAAE,wBAAOD,EAAK,IAAErC,EAAOM,oBAAoBgC,GAAO,OAAKP,KAAKC,OAAOmC,EAAYzG,EAAQ4E,IAAM,MAAa,UAAGP,KAAKC,OAAOmC,EAAYzG,EAAQ4E,IAAM,KAAY,IAAI,UAAGP,KAAKC,OAAOmC,EAAYzG,EAAQ4E,IAAS,IAAI,qCAA1PA,EAAqQ,SAnBnRA,EAuBJ,MAuHV,C","sources":["pages/Nav.jsx","pages/Pre.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { useTime } from '../data/TimeContext';\n\nexport let ctime = 0;\nexport let navPath = [];\n\nconst Nav = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    const { hour, minute, weekday } = useTime();\n    let ingtime=[0];\n\n    /*\n    const [results, setResults] = useState([]);\n    */\n    const [results, setResults] = useState([]);\n\n\n\n    useEffect(() => {\n        const fetchDataFromSpring = async () => {\n            try {\n                const url = `http://localhost:8080/SearchRoute?start=${encodeURIComponent(startStation)}&end=${encodeURIComponent(endStation)}&time=${encodeURIComponent(ctime)}&day=${weekday}`;\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n                const data = await response.json();\n                setResults(data);\n            } catch (error) {\n                console.error('데이터 가져오기 실패:', error);\n            }\n        };\n        if (startStation && endStation) {\n            fetchDataFromSpring();\n        }\n    }, [startStation, endStation]);\n    \n \n    const hourNum = parseInt(hour, 10);\n    const minuteNum = parseInt(minute, 10);\n    ctime = hourNum * 3600 + minuteNum * 60;\n    console.log(ctime);\n    \n\n    const handleButtonClick = () => {\n        setLoading(true);\n        setTimeout(() => {\n            setLoading(false);\n            navigate('/Pre',{state:{results:results}});\n        }, 1000);\n    };\n\n\n    \n    \n\n    const renderResults = () => {\n        return results.map((result, index) => (\n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\">길찾기 결과 {index + 1}</h1>\n                <h3>출발 시간: {Math.floor((ctime) / (60*60))}시 {Math.floor((ctime) % (60*60)/60)}분 {Math.floor((ctime)% 60)}초, ({weekday})</h3>\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <p className=\"scheduleTime\">도착 시간(시간표): {Math.floor((ctime+result.totalTime) / (60*60))}시 {Math.floor((ctime+result.totalTime) % (60*60)/60)}분 {Math.floor((ctime+result.totalTime)% 60)}초</p>\n                \n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">걸리는시간: {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        <p className=\"resultItem\">경로: {result.path.map((place, index) => {\n                        // 마지막 요소가 아니면 ->를 붙여줌\n                        if (index !== result.path.length - 1) {\n                            return `${place} -> `;\n                        } else {\n                            return place; // 마지막 요소는 ->를 붙이지 않음\n                        }\n                        })}</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번 환승: {line}({result.eachTransferStation[index]}) - {Math.floor((ctime+ingtime[index]) / (60*60))}시 {Math.floor((ctime+ingtime[index]) % (60*60)/60)}분 {Math.floor((ctime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n\n    const makepath = (results) => {\n        let allPaths = [];\n        results.forEach(result => {\n            allPaths.push(result.path);\n        });\n        return allPaths;\n    };\n\n    const allPaths = makepath(results);\n    navPath = allPaths;\n    console.log(allPaths); // 콘솔에 모든 경로 출력\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n\n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n    \n        // 각 막대의 비율 계산\n    const totalBarWidth = result.totalTime;\n    let accumulatedWidth = 0;\n    let tt = 0; // tt 변수 초기화\n    \n\n    result.eachTypeOfLine.forEach((line, index) => {\n        const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n        const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n        const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n        ingtime[index]=0;\n\n        // 각 막대의 총합이 1250이 되도록 비율 조정\n        const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n        const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n        const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n        const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n            \n    \n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n    \n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n    \n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n    \n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1; \n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n                </div>\n        );\n        return transferBars;\n    };\n        const getLineColor = (line) => {\n            const lineColors = {\n                '1호선': '#0d3692',\n                '2호선': '#33a23d',\n                '3호선': '#fe5d10',\n                '4호선': '#00a2d1',\n                '5호선': '#8b50a4',\n                '6호선': '#c55c1d',\n                '7호선': '#54640d',\n                '8호선': '#f14c82',\n            };\n            return lineColors[line] || '#000'; // 기본 색상은 검정색\n        };\n\n        \n\n\n        return (\n            <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n                \n                <div className=\"resultsContainer\">\n                    <h1 className=\"resultsHeader\">출발지/도착지 <p className=\"pre-but\">\n                {loading ? (\n                    <div>로딩 중...</div>\n                ) : (\n                    <button onClick={handleButtonClick} style={{ backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer' }}>AI Predict</button>\n                )}\n            </p></h1> <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                    {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                    {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                    {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                    {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n                </div>\n                \n                {renderResults()}\n            </Main>\n        );\n        };\n\nexport default Nav;\n","import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate,useLocation } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { ctime } from './Nav';\nimport { useTime } from '../data/TimeContext';\nimport { navPath } from './Nav';\n\nconst Pre = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    let ingtime=[0];\n    const { hour, minute, weekday } = useTime();\n    const currentTime = ctime;\n    /*\n    const [result, setResult] = useState([]);\n    */\n    const [result, setResult] = useState([]);\n\n\n    const location = useLocation();\n    \n    console.log(navPath);\n\n\n    useEffect(() => {\n        // 첫 번째 서비스에서 전달된 데이터\n        const firstServiceData = location.state?.results;\n\n        // 데이터가 존재하는 경우에만 두 번째 서비스 호출\n        if (firstServiceData) {\n            const fetchSecondServiceData = async () => {\n                try {\n                    const url = `http://localhost:8080/Predict?day=${encodeURIComponent(weekday)}`;\n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify(firstServiceData),\n                    });\n                    const secondServiceData = await response.json();\n                    setResult(secondServiceData);\n                    console.log('두 번째 서비스 응답 데이터:', secondServiceData);\n                } catch (error) {\n                    console.error('두 번째 서비스 요청 실패:', error);\n                }\n            };\n\n            fetchSecondServiceData();\n        }\n    }, [location]);\n\n    const renderResults = () => {\n        return result.map((result, index) => (\n            \n            \n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\">AI 예측 길찾기 결과 {index + 1}</h1>\n                <h3>출발 시간: {Math.floor((currentTime) / (60*60))}시 {Math.floor((currentTime) % (60*60)/60)}분 {Math.floor((currentTime)% 60)}초, ({weekday})</h3>\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <p className=\"scheduleTime\">도착 시간(시간표): {Math.floor((currentTime+result.totalTime) / (60*60))}시 {Math.floor((currentTime+result.totalTime) % (60*60)/60)}분 {Math.floor((currentTime+result.totalTime)% 60)}초</p>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">걸리는시간: {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        <p className=\"resultItem\">경로: {result.path.map((place, index) => {\n                        // 마지막 요소가 아니면 ->를 붙여줌\n                        if (index !== result.path.length - 1) {\n                            return `${place} -> `;\n                        } else {\n                            return place; // 마지막 요소는 ->를 붙이지 않음\n                        }\n                        })}</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번 환승: {line}({result.eachTransferStation[index]}) - {Math.floor((currentTime+ingtime[index]) / (60*60))}시 {Math.floor((currentTime+ingtime[index]) % (60*60)/60)}분 {Math.floor((currentTime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n    \n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n    \n        // 각 막대의 비율 계산\n    const totalBarWidth = result.totalTime;\n    let accumulatedWidth = 0;\n    let tt = 0; // tt 변수 초기화\n\n\n        result.eachTypeOfLine.forEach((line, index) => {\n            const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n            const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n            const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n            ingtime[index]=0;\n\n            // 각 막대의 총합이 1250이 되도록 비율 조정\n            const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n            const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n            const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n            const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n\n\n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n\n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1;\n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n            </div>\n        );\n        return transferBars;\n    };\n        const getLineColor = (line) => {\n            const lineColors = {\n                '1호선': '#0d3692',\n                '2호선': '#33a23d',\n                '3호선': '#fe5d10',\n                '4호선': '#00a2d1',\n                '5호선': '#8b50a4',\n                '6호선': '#c55c1d',\n                '7호선': '#54640d',\n                '8호선': '#f14c82',\n            };\n            return lineColors[line] || '#000'; // 기본 색상은 검정색\n        };\n        \n\n\n        return (\n            <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n                \n                <div className=\"resultsContainer\">\n                    <h1 className=\"resultsHeader\">출발지/도착지</h1> <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                    {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                    {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                    {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                    {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n                </div>\n                \n                {renderResults()}\n            </Main>\n        );\n        };\n\nexport default Pre;"],"names":["ctime","navPath","startStation","useSelector","state","endStation","_useState","useState","_useState2","_slicedToArray","loading","setLoading","navigate","useNavigate","_useTime","useTime","hour","minute","weekday","ingtime","_useState3","_useState4","results","setResults","useEffect","fetchDataFromSpring","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","data","wrap","_context","prev","next","concat","encodeURIComponent","fetch","method","headers","sent","json","t0","console","error","stop","apply","arguments","hourNum","parseInt","minuteNum","log","allPaths","forEach","result","push","path","makepath","renderTransferBars","transferBars","eachTransferStation","length","_jsxs","style","display","width","height","backgroundColor","getLineColor","startLine","position","whiteSpace","overflow","children","_jsx","src","train","alt","left","top","transform","maxWidth","maxHeight","color","bottom","Math","floor","totalTime","totalBarWidth","tt","eachTypeOfLine","line","index","goBarWidth","eachTime","transferBarWidth","eachWalkingTime","waitingBarWidth","eachWaitingTime","totalRatio","adjustedGoBarWidth","adjustedTransferBarWidth","adjustedWaitingBarWidth","walk","wait","_","lastIndex","lastGoBarWidth","Main","title","description","className","onClick","setTimeout","border","borderRadius","cursor","map","margin","_Fragment","place","currentTime","setResult","location","useLocation","_location$state","firstServiceData","fetchSecondServiceData","secondServiceData","body","JSON","stringify"],"sourceRoot":""}