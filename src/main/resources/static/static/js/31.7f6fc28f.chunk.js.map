{"version":3,"file":"static/js/31.7f6fc28f.chunk.js","mappings":"mUAUWA,EAAQ,EACRC,EAAU,GA0UrB,UAxUY,WACR,IAAMC,GAAeC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,YAAY,IACtDG,GAAaF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAU,IACxDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GACpBI,GAAYC,EAAAA,EAAAA,MAClBC,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAQC,EAAOJ,EAAPI,QAClBC,EAAQ,CAAC,GACbC,GAAkCb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,EAAqB,WACvBD,GAAcD,EAClB,EAEAG,GAA8BlB,EAAAA,EAAAA,UAAS,IACrCmB,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GADKE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,IAK1BG,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAmB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE0J,OAF1JF,EAAAC,KAAA,EAEdL,EAAG,2CAAAO,OAA8CC,mBAAmB1C,GAAa,SAAAyC,OAAQC,mBAAmBvC,GAAW,UAAAsC,OAASC,mBAAmB5C,GAAM,SAAA2C,OAAQzB,GAAOsB,EAAAE,KAAA,EACvJG,MAAMT,EAAK,CAC9BU,OAAQ,OACRC,QAAS,CACL,eAAgB,sBAErB,KAAD,EALY,OAARV,EAAQG,EAAAQ,KAAAR,EAAAE,KAAA,EAMKL,EAASY,OAAO,KAAD,EAA5BX,EAAIE,EAAAQ,KACVpB,EAAWU,GAAME,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEjBW,QAAQC,MAAM,4DAAcZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAlB,EAAA,mBAE5C,kBAdwB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAerBrD,GAAgBG,GAChByB,GAER,GAAG,CAAC5B,EAAcG,IAGlB,IAAMmD,EAAUC,SAASzC,EAAM,IACzB0C,EAAYD,SAASxC,EAAQ,IACnCjB,EAAkB,KAAVwD,EAA6B,GAAZE,EACzBP,QAAQQ,IAAI3D,GAGZ,IA2DM4D,EARW,SAACjC,GACd,IAAIiC,EAAW,GAIf,OAHAjC,EAAQkC,SAAQ,SAAAC,GACZF,EAASG,KAAKD,EAAOE,KACzB,IACOJ,CACX,CAEiBK,CAAStC,GAC1B1B,EAAU2D,EACVT,QAAQQ,IAAIC,GAEZ,IAAMM,EAAqB,SAACJ,GACxB,IAAMK,EAAe,GAKrB,GAA0C,IAAtCL,EAAOM,oBAAoBC,OAS3B,OAPAF,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAoBC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOe,WAAYC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpMC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAU,OAAQC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAE/E,EAAa,IAAE4D,EAAOe,UAAU,QAC3KP,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAEY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,cAAQ,KAAApD,OATjO,KAYGwB,EAIX,IAAM6B,EAAgBlC,EAAOiC,UAEzBE,EAAK,EAGTnC,EAAOoC,eAAerC,SAAQ,SAACsC,EAAMC,GACjC,IAAMC,EAAavC,EAAOwC,SAASF,GAASJ,EAAgB,KACtDO,EAAmBzC,EAAO0C,gBAAgBJ,GAASJ,EAAgB,KACnES,EAAkB3C,EAAO4C,gBAAgBN,GAASJ,EAAgB,KACxE7E,EAAQiF,GAAO,EAGf,IAAMO,EAAaN,EAAaE,EAAmBE,EAC7CG,EAAqBP,EAAaM,EAAa,KAC/CE,EAA2BN,EAAmBI,EAAa,KAC3DG,EAA0BL,EAAkBE,EAAa,KAG/DxC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAwBC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK0D,EAAU,MAAM3B,OAAQ,OAAQC,gBAAiBC,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,IAAKtB,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpQC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKiE,EAAkB,MAAMlB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACzMJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAEY,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,aAClR9B,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAa,IAAVmB,EAAclG,EAAe4D,EAAOM,oBAAoBgC,EAAQ,GAAI,IAAa,IAAVA,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,GAAI,SAAQ,KAAAzD,OAHpUyD,KAOnBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA8BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK4D,EAAgB,MAAM7B,OAAQ,OAAQC,gBAAiB,YAAaG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC5MC,EAAAA,EAAAA,KAAA,OAAKC,IAAK4B,EAAM1B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKkE,EAAwB,MAAMnB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC5MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,cAAQ,WAAAzD,OAF9MyD,KAMzBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA0BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK8D,EAAe,MAAM/B,OAAQ,OAAQC,gBAAiB,MAAOG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACjMC,EAAAA,EAAAA,KAAA,OAAKC,IAAK6B,EAAM3B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKmE,EAAuB,MAAMpB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC3MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,eAAS,OAAAzD,OAFnNyD,KAKrBtC,EAAOwC,SAASzC,SAAQ,SAACoD,EAAGb,GAEpBjF,EAAQiF,GADE,IAAVA,EACiBtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,GAEhFjF,EAAQiF,EAAQ,GAAKtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,EAE9H,IAEoBQ,EAAqBC,EAA2BC,EACpEb,EAAKA,EAAGnC,EAAOwC,SAASF,GAAOtC,EAAO0C,gBAAgBJ,GAAOtC,EAAO4C,gBAAgBN,EACxF,IAGA,IAAMc,EAAYpD,EAAOoC,eAAe7B,OAAS,EAC3C8C,GAAiD,IAA/BrD,EAAOwC,SAASY,GAAmBpD,EAAOiC,UAAYE,EAAInC,EAAOiC,WAAaC,EAAgB,KAWtH,OAPA7B,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA4BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAKwE,EAAc,MAAMzC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOoC,eAAegB,IAAapC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC3OC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,OAASC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEY,KAAKC,OAAOhC,EAAOiC,UAAYE,GAAK,IAAI,UAAGJ,KAAKC,MAAMhC,EAAOwC,SAASY,GAAa,IAAI,aACrP5C,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEnB,EAAOM,oBAAoBN,EAAOM,oBAAoBC,OAAS,GAAG,IAAEP,EAAOoC,eAAepC,EAAOoC,eAAe7B,OAAS,GAAG,SAAQ,KAAA1B,OAHpRuE,KAMZ/C,CACX,EACMS,EAAe,SAACuB,GAWlB,MAVmB,CACf,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,WAEOA,IAAS,MAC/B,EAKA,OACI7B,EAAAA,EAAAA,MAAC8C,EAAAA,EAAI,CAACC,MAAM,wCAAUC,YAAY,2DAAarC,SAAA,EAE3CX,EAAAA,EAAAA,MAAA,OAAKiD,UAAU,mBAAkBtC,SAAA,EAC7BX,EAAAA,EAAAA,MAAA,MAAIiD,UAAU,gBAAetC,SAAA,CAAC,0CAAQC,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,UAAStC,SACvDvE,GACGwE,EAAAA,EAAAA,KAAA,OAAAD,SAAK,4BAELC,EAAAA,EAAAA,KAAA,UAAQsC,QA7KF,WACtB7G,GAAW,GACX8G,YAAW,WACP9G,GAAW,GACXC,EAAS,OAAO,CAACR,MAAM,CAACuB,QAAQA,IACpC,GAAG,IACP,EAuKwD4C,MAAO,CACvCI,gBAAiB,UACjBgB,MAAO,QACP+B,OAAQ,OACRC,aAAc,MACdC,OAAQ,WACV3C,SAAC,qBAGXX,EAAAA,EAAAA,MAAA,KAAAW,SAAA,CAAG,oCAASjE,EAAK,UAAGC,EAAO,WAAIC,EAAQ,OACtChB,IAAgBoE,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM/E,KAChDG,IAAciE,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM5E,MAC7CH,IAAgBgF,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,qEAC1C5E,IAAc6E,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,wEAG9CX,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACO,SAAU,WAAYN,QAAS,gBAAgBS,SAAA,EACxDC,EAAAA,EAAAA,KAAA,UACIsC,QAAShG,EACT+C,MAAO,CACHI,gBAAiB,UACjBgB,MAAO,QACP+B,OAAQ,OACRC,aAAc,OACdC,OAAQ,UACRnD,MAAO,OACPC,OAAQ,OACRmD,SAAU,OACVC,OAAQ,QACV7C,SACL,UAGA3D,IACGgD,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACRO,SAAU,WACVS,IAAK,OACLD,KAAM,QACNE,UAAW,qBACXb,gBAAiB,QACjB+C,OAAQ,iBACRC,aAAc,MACdI,QAAS,OACTtD,MAAO,QACPuD,UAAW,4BACXC,UAAW,UACbhD,SAAA,EACEX,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAKC,EACLb,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qDAEPC,EAAAA,EAAAA,KAAA,UACAZ,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAK4B,EACLxC,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iEAEPC,EAAAA,EAAAA,KAAA,UACAZ,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAK6B,EACLzC,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iEAEPC,EAAAA,EAAAA,KAAA,UAAQsC,QAAShG,EAAoB+C,MAAO,CACxCI,gBAAiB,UACjBgB,MAAO,QACP+B,OAAQ,OACRC,aAAc,MACdC,OAAQ,UACRnD,MAAO,OACPsD,QAAS,QACTF,SAAU,OACVO,UAAW,QACbnD,SAAC,uBAlQZtD,EAAQ0G,KAAI,SAACvE,EAAQsC,GAAK,OAC7B9B,EAAAA,EAAAA,MAAA,OAAiBiD,UAAU,aAAYtC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,gBAAetC,UAACX,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEI,gBAAiB,WAAYM,SAAA,CAAC,UAAQmB,EAAQ,QAE3F9B,EAAAA,EAAAA,MAAA,MAAAW,SAAA,CAAI,+BAASY,KAAKC,MAAO9F,EAAK,MAAa,UAAG6F,KAAKC,MAAO9F,EAAK,KAAY,IAAI,UAAG6F,KAAKC,MAAO9F,EAAQ,IAAI,WAAIkB,EAAQ,QACtHoD,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,eAActC,SAAA,CAAC,mDAAcY,KAAKC,OAAO9F,EAAM8D,EAAOiC,WAAS,MAAa,UAAGF,KAAKC,OAAO9F,EAAM8D,EAAOiC,WAAS,KAAY,IAAI,UAAGF,KAAKC,OAAO9F,EAAM8D,EAAOiC,WAAY,IAAI,aAE3Lb,EAAAA,EAAAA,KAAA,SACEpB,EAAOE,OACJkB,EAAAA,EAAAA,KAAAoD,EAAAA,SAAA,CAAArD,UACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,iBAAKnB,EAAOE,KAAKqE,KAAI,SAACE,EAAOnC,GAEnD,OAAItC,EAAOM,qBAAuBN,EAAOM,oBAAoBoE,SAASD,IAC3DrD,EAAAA,EAAAA,KAAA,QAAkBX,MAAO,CAAEoB,MAAO,OAAQV,SAAEsD,GAAjCnC,IAEXlB,EAAAA,EAAAA,KAAA,QAAAD,SAAmBsD,GAARnC,EAE1B,IAAGqC,QAAO,SAAChG,EAAMiG,GAAI,MAAK,CAACjG,EAAM,OAAQiG,EAAK,UAItDxD,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,uBAAuBhD,MAAO,CAAEE,MAAO,SAAUC,OAAQ,OAAQC,gBAAiB,YAAamD,OAAQ,UAAW7C,SAC5Hf,EAAmBJ,MAExBoB,EAAAA,EAAAA,KAAA,SACCpB,EAAOE,OACJM,EAAAA,EAAAA,MAAAgE,EAAAA,SAAA,CAAArD,SAAA,EACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,oCAASY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,YACzGjC,EAAOoC,eAAemC,KAAI,SAAClC,EAAMC,GAAK,OACnC9B,EAAAA,EAAAA,MAAA,KAAeiD,UAAU,aAAYtC,SAAA,CAAEmB,EAAQ,EAAE,qCAAUD,EAAK,IAAErC,EAAOM,oBAAoBgC,GAAO,OAAKP,KAAKC,OAAO9F,EAAMmB,EAAQiF,IAAM,MAAa,UAAGP,KAAKC,OAAO9F,EAAMmB,EAAQiF,IAAM,KAAY,IAAI,UAAGP,KAAKC,OAAO9F,EAAMmB,EAAQiF,IAAS,IAAI,qCAA3OA,EAAsP,SA5BpQA,EAgCJ,MA0OlB,C,iKCjCA,UAtSY,WACR,IAAMlG,GAAeC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,YAAY,IACtDG,GAAaF,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAU,IACxDC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAEzCa,GAFUX,EAAA,GAAYA,EAAA,IACRK,EAAAA,EAAAA,MACN,CAAC,IACbC,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAQC,EAAOJ,EAAPI,QAChByH,EAAc3I,EAAAA,MACpBoB,GAAkCb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,EAAqB,WACvBD,GAAcD,EAClB,EACAG,GAA4BlB,EAAAA,EAAAA,UAAS,IACnCmB,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GADKqC,EAAMpC,EAAA,GAAEkH,EAASlH,EAAA,GAMlBmH,GAAWC,EAAAA,EAAAA,MAEjB3F,QAAQQ,IAAI1D,EAAAA,UAGZ4B,EAAAA,EAAAA,YAAU,WAAO,IAADkH,EAENC,EAAiC,QAAjBD,EAAGF,EAASzI,aAAK,IAAA2I,OAAA,EAAdA,EAAgBpH,QAGzC,GAAIqH,EAAkB,CAClB,IAAMC,EAAsB,eAAAlH,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA6G,EAAA,OAAAjH,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEqD,OAFrDF,EAAAC,KAAA,EAEjBL,EAAG,qCAAAO,OAAwCC,mBAAmB1B,IAAQsB,EAAAE,KAAA,EACrDG,MAAMT,EAAK,CAC9BU,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBoG,KAAMC,KAAKC,UAAUL,KACtB,KAAD,EANY,OAAR3G,EAAQG,EAAAQ,KAAAR,EAAAE,KAAA,EAOkBL,EAASY,OAAO,KAAD,EAAzCiG,EAAiB1G,EAAAQ,KACvB4F,EAAUM,GACV/F,QAAQQ,IAAI,0EAAoBuF,GAAmB1G,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SAEnDW,QAAQC,MAAM,oEAAiBZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAlB,EAAA,mBAE/C,kBAhB2B,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAkB5B0F,GACJ,CACJ,GAAG,CAACJ,IAEJ,IAqCM3E,EAAqB,SAACJ,GACxB,IAAMK,EAAe,GAKrB,GAA0C,IAAtCL,EAAOM,oBAAoBC,OAS3B,OAPAF,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAoBC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOe,WAAYC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpMC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAU,OAAQC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAE/E,EAAa,IAAE4D,EAAOe,UAAU,QAC3KP,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOe,YAAaI,SAAA,CAAEY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,cAAQ,KAAApD,OATjO,KAYGwB,EAIX,IAAM6B,EAAgBlC,EAAOiC,UAEzBE,EAAK,EAGTnC,EAAOoC,eAAerC,SAAQ,SAACsC,EAAMC,GACjC,IAAMC,EAAavC,EAAOwC,SAASF,GAASJ,EAAgB,KACtDO,EAAmBzC,EAAO0C,gBAAgBJ,GAASJ,EAAgB,KACnES,EAAkB3C,EAAO4C,gBAAgBN,GAASJ,EAAgB,KACxE7E,EAAQiF,GAAO,EAGf,IAAMO,EAAaN,EAAaE,EAAmBE,EAC7CG,EAAqBP,EAAaM,EAAa,KAC/CE,EAA2BN,EAAmBI,EAAa,KAC3DG,EAA0BL,EAAkBE,EAAa,KAG/DxC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAAwBC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK0D,EAAU,MAAM3B,OAAQ,OAAQC,gBAAiBC,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,IAAKtB,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACpQC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKiE,EAAkB,MAAMlB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACzMJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAEY,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAOwC,SAASF,GAAS,IAAI,aAClR9B,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAuB,IAAVwB,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,KAAMnB,SAAA,CAAa,IAAVmB,EAAclG,EAAe4D,EAAOM,oBAAoBgC,EAAQ,GAAI,IAAa,IAAVA,EAActC,EAAOe,UAAYf,EAAOoC,eAAeE,EAAQ,GAAI,SAAQ,KAAAzD,OAHpUyD,KAOnBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA8BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK4D,EAAgB,MAAM7B,OAAQ,OAAQC,gBAAiB,YAAaG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC5MC,EAAAA,EAAAA,KAAA,OAAKC,IAAK4B,EAAM1B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKkE,EAAwB,MAAMnB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC5MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO0C,gBAAgBJ,GAAS,IAAI,cAAQ,WAAAzD,OAF9MyD,KAMzBjC,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA0BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAK8D,EAAe,MAAM/B,OAAQ,OAAQC,gBAAiB,MAAOG,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EACjMC,EAAAA,EAAAA,KAAA,OAAKC,IAAK6B,EAAM3B,IAAI,OAAOd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,GAAD9C,OAAKmE,EAAuB,MAAMpB,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WAC3MJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAO,QAASV,SAAA,CAAEY,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,UAAGP,KAAKC,MAAMhC,EAAO4C,gBAAgBN,GAAS,IAAI,eAAS,OAAAzD,OAFnNyD,KAKrBtC,EAAOwC,SAASzC,SAAQ,SAACoD,EAAGb,GAEpBjF,EAAQiF,GADE,IAAVA,EACiBtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,GAEhFjF,EAAQiF,EAAQ,GAAKtC,EAAOwC,SAASF,GAAStC,EAAO0C,gBAAgBJ,GAAStC,EAAO4C,gBAAgBN,EAE9H,IAEoBQ,EAAqBC,EAA2BC,EACpEb,EAAKA,EAAGnC,EAAOwC,SAASF,GAAOtC,EAAO0C,gBAAgBJ,GAAOtC,EAAO4C,gBAAgBN,EACxF,IAGA,IAAMc,EAAYpD,EAAOoC,eAAe7B,OAAS,EAC3C8C,GAAiD,IAA/BrD,EAAOwC,SAASY,GAAmBpD,EAAOiC,UAAYE,EAAInC,EAAOiC,WAAaC,EAAgB,KAWtH,OAPA7B,EAAaJ,MACTO,EAAAA,EAAAA,MAAA,OAA4BC,MAAO,CAAEC,QAAS,eAAgBC,MAAM,GAAD9B,OAAKwE,EAAc,MAAMzC,OAAQ,OAAQC,gBAAiBC,EAAad,EAAOoC,eAAegB,IAAapC,SAAU,WAAYC,WAAY,SAAUC,SAAU,WAAYC,SAAA,EAC3OC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,SAASd,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,MAAOC,UAAW,wBAAyBC,SAAS,OAASC,UAAW,OAAQjB,MAAO,OAAQC,OAAQ,WACtLJ,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOM,OAAQ,QAASJ,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEY,KAAKC,OAAOhC,EAAOiC,UAAYE,GAAK,IAAI,UAAGJ,KAAKC,MAAMhC,EAAOwC,SAASY,GAAa,IAAI,aACrP5C,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAAEO,SAAU,WAAYQ,KAAM,MAAOC,IAAK,QAASC,UAAW,qBAAsBG,MAAOf,EAAad,EAAOoC,eAAegB,KAAcjC,SAAA,CAAEnB,EAAOM,oBAAoBN,EAAOM,oBAAoBC,OAAS,GAAG,IAAEP,EAAOoC,eAAepC,EAAOoC,eAAe7B,OAAS,GAAG,SAAQ,KAAA1B,OAHpRuE,KAMZ/C,CACX,EACMS,EAAe,SAACuB,GAWlB,MAVmB,CACf,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,UACP,gBAAO,WAEOA,IAAS,MAC/B,EAIA,OACI7B,EAAAA,EAAAA,MAAC8C,EAAAA,EAAI,CAACC,MAAM,wCAAUC,YAAY,2DAAarC,SAAA,EAE3CX,EAAAA,EAAAA,MAAA,OAAKiD,UAAU,mBAAkBtC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,gBAAetC,SAAC,0CAAY,KAACX,EAAAA,EAAAA,MAAA,KAAAW,SAAA,CAAG,oCAASjE,EAAK,UAAGC,EAAO,WAAIC,EAAQ,OACjFhB,IAAgBoE,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM/E,KAChDG,IAAciE,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,uBAAM5E,MAC7CH,IAAgBgF,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,qEAC1C5E,IAAc6E,EAAAA,EAAAA,KAAA,KAAGqC,UAAU,aAAYtC,SAAC,wEAE9CX,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACO,SAAU,WAAYN,QAAS,gBAAgBS,SAAA,EACxDC,EAAAA,EAAAA,KAAA,UACIsC,QAAShG,EACT+C,MAAO,CACHI,gBAAiB,UACjBgB,MAAO,QACP+B,OAAQ,OACRC,aAAc,OACdC,OAAQ,UACRnD,MAAO,OACPC,OAAQ,OACRmD,SAAU,OACVC,OAAQ,QACV7C,SACL,UAGA3D,IACGgD,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACRO,SAAU,WACVS,IAAK,OACLD,KAAM,QACNE,UAAW,qBACXb,gBAAiB,QACjB+C,OAAQ,iBACRC,aAAc,MACdI,QAAS,OACTtD,MAAO,QACPuD,UAAW,4BACXC,UAAW,UACbhD,SAAA,EACEX,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAKC,EACLb,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qDAEPC,EAAAA,EAAAA,KAAA,UACAZ,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAK4B,EACLxC,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iEAEPC,EAAAA,EAAAA,KAAA,UACAZ,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAACC,QAAS,OAAQ0D,WAAY,UAAUjD,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OACIC,IAAK6B,EACLzC,MAAO,CACHkB,SAAU,OACVC,UAAW,OACXjB,MAAO,OACPC,OAAQ,OACRyD,YAAa,WAGrBjD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iEAEPC,EAAAA,EAAAA,KAAA,UAAQsC,QAAShG,EAAoB+C,MAAO,CACxCI,gBAAiB,UACjBgB,MAAO,QACP+B,OAAQ,OACRC,aAAc,MACdC,OAAQ,UACRnD,MAAO,OACPsD,QAAS,QACTF,SAAU,OACVO,UAAW,QACbnD,SAAC,uBArOZnB,EAAOuE,KAAI,SAACvE,EAAQsC,GAAK,OAG5B9B,EAAAA,EAAAA,MAAA,OAAiBiD,UAAU,aAAYtC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAIqC,UAAU,gBAAetC,UAACX,EAAAA,EAAAA,MAAA,QAAMC,MAAO,CAACI,gBAAiB,WAAWM,SAAA,CAAC,qBAAmBmB,EAAQ,QACpG9B,EAAAA,EAAAA,MAAA,MAAAW,SAAA,CAAI,+BAASY,KAAKC,MAAO6C,EAAW,MAAe,UAAG9C,KAAKC,MAAO6C,EAAW,KAAY,IAAI,UAAG9C,KAAKC,MAAO6C,EAAc,IAAI,WAAIzH,EAAQ,QAC1IoD,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,eAActC,SAAA,CAAC,mCAAaY,KAAKC,OAAO6C,EAAY7E,EAAOiC,WAAS,MAAa,UAAGF,KAAKC,OAAO6C,EAAY7E,EAAOiC,WAAS,KAAY,IAAI,UAAGF,KAAKC,OAAO6C,EAAY7E,EAAOiC,WAAY,IAAI,aAC3Mb,EAAAA,EAAAA,KAAA,SACCpB,EAAOE,OACJkB,EAAAA,EAAAA,KAAAoD,EAAAA,SAAA,CAAArD,UACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,kBAAMnB,EAAOE,KAAKqE,KAAI,SAACE,EAAOnC,GAEpD,OAAItC,EAAOM,qBAAuBN,EAAOM,oBAAoBoE,SAASD,IAC3DrD,EAAAA,EAAAA,KAAA,QAAkBX,MAAO,CAAEoB,MAAO,OAAQV,SAAEsD,GAAjCnC,IAEXlB,EAAAA,EAAAA,KAAA,QAAAD,SAAmBsD,GAARnC,EAE1B,IAAGqC,QAAO,SAAChG,EAAMiG,GAAI,MAAK,CAACjG,EAAM,OAAQiG,EAAK,UAGtDxD,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,uBAAuBhD,MAAO,CAAEE,MAAO,SAAUC,OAAQ,OAAQC,gBAAiB,YAAamD,OAAQ,UAAW7C,SAC5Hf,EAAmBJ,MAExBoB,EAAAA,EAAAA,KAAA,SACCpB,EAAOE,OACJM,EAAAA,EAAAA,MAAAgE,EAAAA,SAAA,CAAArD,SAAA,EACIX,EAAAA,EAAAA,MAAA,KAAGiD,UAAU,aAAYtC,SAAA,CAAC,4CAAYY,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,UAAGF,KAAKC,MAAMhC,EAAOiC,UAAY,IAAI,YAC5GjC,EAAOoC,eAAemC,KAAI,SAAClC,EAAMC,GAAK,OACnC9B,EAAAA,EAAAA,MAAA,KAAeiD,UAAU,aAAYtC,SAAA,CAAEmB,EAAQ,EAAE,qCAAUD,EAAK,IAAErC,EAAOM,oBAAoBgC,GAAO,OAAKP,KAAKC,OAAO6C,EAAYxH,EAAQiF,IAAM,MAAa,UAAGP,KAAKC,OAAO6C,EAAYxH,EAAQiF,IAAM,KAAY,IAAI,UAAGP,KAAKC,OAAO6C,EAAYxH,EAAQiF,IAAS,IAAI,qCAA7PA,EAAwQ,SAzBtRA,EA6BJ,MA+MlB,C","sources":["pages/Nav.jsx","pages/Pre.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { useTime } from '../data/TimeContext';\n\nexport let ctime = 0;\nexport let navPath = [];\n\nconst Nav = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    const { hour, minute, weekday } = useTime();\n    let ingtime=[0];\n    const [showGuide, setShowGuide] = useState(false);\n\n    const handleButtonClicke = () => {\n        setShowGuide(!showGuide);\n    };\n\n    const [results, setResults] = useState([\n    ]);\n\n\n\n    useEffect(() => {\n        const fetchDataFromSpring = async () => {\n            try {\n                const url = `http://localhost:8080/SearchRoute?start=${encodeURIComponent(startStation)}&end=${encodeURIComponent(endStation)}&time=${encodeURIComponent(ctime)}&day=${weekday}`;\n                const response = await fetch(url, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n                const data = await response.json();\n                setResults(data);\n            } catch (error) {\n                console.error('데이터 가져오기 실패:', error);\n            }\n        };\n        if (startStation && endStation) {\n            fetchDataFromSpring();\n        }\n    }, [startStation, endStation]);\n\n\n    const hourNum = parseInt(hour, 10);\n    const minuteNum = parseInt(minute, 10);\n    ctime = hourNum * 3600 + minuteNum * 60;\n    console.log(ctime);\n\n\n    const handleButtonClick = () => {\n        setLoading(true);\n        setTimeout(() => {\n            setLoading(false);\n            navigate('/Pre',{state:{results:results}});\n        }, 1000);\n    };\n\n\n\n\n\n    const renderResults = () => {\n        return results.map((result, index) => (\n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\"><span style={{ backgroundColor: '#fff5b1' }}>Result {index + 1}</span>\n                </h1>\n                <h3>출발 시간 : {Math.floor((ctime) / (60*60))}시 {Math.floor((ctime) % (60*60)/60)}분 {Math.floor((ctime)% 60)}초 ({weekday})</h3>\n                <p className=\"scheduleTime\">도착 시간(시간표) : {Math.floor((ctime+result.totalTime) / (60*60))}시 {Math.floor((ctime+result.totalTime) % (60*60)/60)}분 {Math.floor((ctime+result.totalTime)% 60)}초</p>\n\n               <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">경로: {result.path.map((place, index) => {\n                            // eachTransferStation 배열에 포함된 역인지 확인\n                            if (result.eachTransferStation && result.eachTransferStation.includes(place)) {\n                                return <span key={index} style={{ color: 'red' }}>{place}</span>;\n                            } else {\n                                return <span key={index}>{place}</span>;\n                            }\n                        }).reduce((prev, curr) => [prev, ' -> ', curr])}</p>\n                    </>\n                )}\n\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">걸리는시간 : {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번째 환승역 : {line}({result.eachTransferStation[index]}) - {Math.floor((ctime+ingtime[index]) / (60*60))}시 {Math.floor((ctime+ingtime[index]) % (60*60)/60)}분 {Math.floor((ctime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n\n    const makepath = (results) => {\n        let allPaths = [];\n        results.forEach(result => {\n            allPaths.push(result.path);\n        });\n        return allPaths;\n    };\n\n    const allPaths = makepath(results);\n    navPath = allPaths;\n    console.log(allPaths); // 콘솔에 모든 경로 출력\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n\n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n\n        // 각 막대의 비율 계산\n        const totalBarWidth = result.totalTime;\n        let accumulatedWidth = 0;\n        let tt = 0; // tt 변수 초기화\n\n\n        result.eachTypeOfLine.forEach((line, index) => {\n            const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n            const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n            const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n            ingtime[index]=0;\n\n            // 각 막대의 총합이 1250이 되도록 비율 조정\n            const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n            const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n            const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n            const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n\n\n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n\n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1;\n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n            </div>\n        );\n        return transferBars;\n    };\n    const getLineColor = (line) => {\n        const lineColors = {\n            '1호선': '#0d3692',\n            '2호선': '#33a23d',\n            '3호선': '#fe5d10',\n            '4호선': '#00a2d1',\n            '5호선': '#8b50a4',\n            '6호선': '#c55c1d',\n            '7호선': '#54640d',\n            '8호선': '#f14c82',\n        };\n        return lineColors[line] || '#000'; // 기본 색상은 검정색\n    };\n\n\n\n\n    return (\n        <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n\n            <div className=\"resultsContainer\">\n                <h1 className=\"resultsHeader\">출발지/도착지 <p className=\"pre-but\">\n                    {loading ? (\n                        <div>로딩 중...</div>\n                    ) : (\n                        <button onClick={handleButtonClick} style={{\n                            backgroundColor: '#4CAF50',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '8px',\n                            cursor: 'pointer'\n                        }}>AI Predict</button>\n                    )}\n                </p></h1>\n                <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n            </div>\n\n            <div style={{position: 'relative', display: 'inline-block'}}>\n                <button\n                    onClick={handleButtonClicke}\n                    style={{\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '30px',\n                        cursor: 'pointer',\n                        width: '80px',       // 너비 설정\n                        height: '40px',       // 높이 설정\n                        fontSize: '16px',     // 폰트 크기 설정\n                        margin: '10px'        // 외부 여백 설정 (선택 사항)\n                    }}\n                >\n                    Guide\n                </button>\n                {showGuide && (\n                    <div style={{\n                        position: 'absolute',\n                        top: '50px', // 팝업 창의 위치 조정 (원하는 위치로 설정)\n                        left: '100px', // 화면 가운데 정렬을 위해 left를 50%로 설정\n                        transform: 'translate(-50%, 0)', // 화면 가운데 정렬을 위한 transform 사용\n                        backgroundColor: 'white',\n                        border: '1px solid #ccc',\n                        borderRadius: '5px',\n                        padding: '10px',\n                        width: '200px',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n                        textAlign: 'center' // 텍스트 가운데 정렬을 위한 textAlign 설정\n                    }}>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={train}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 타는 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={walk}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>환승역까지 도보 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={wait}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 기다리는 시간</p>\n                        </div>\n                        <button onClick={handleButtonClicke} style={{\n                            backgroundColor: '#007bff',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '5px',\n                            cursor: 'pointer',\n                            width: '100%',\n                            padding: '5px 0',\n                            fontSize: '14px',\n                            marginTop: '10px'\n                        }}>\n                            닫기\n                        </button>\n                    </div>\n                )}\n            </div>\n            {renderResults()}\n        </Main>\n    );\n};\n\nexport default Nav;\n","import React, { useEffect, useState } from 'react';\nimport Main from '../components/section/Main';\nimport { useSelector } from 'react-redux';\nimport { getCurrentTime, getDayType } from '../data/time';\nimport train from '../assets/img/nav/train.png';\nimport wait from '../assets/img/nav/waiting.png';\nimport walk from '../assets/img/nav/walk.png';\nimport { Link, useNavigate,useLocation } from 'react-router-dom'; // React Router를 사용한다고 가정합니다.\nimport { ctime } from './Nav';\nimport { useTime } from '../data/TimeContext';\nimport { navPath } from './Nav';\n\nconst Pre = () => {\n    const startStation = useSelector(state => state.startStation);\n    const endStation = useSelector(state => state.endStation);\n    const [loading, setLoading] = useState(false); // 로딩 상태 변수\n    const navigate  = useNavigate(); // useHistory 훅 사용\n    let ingtime=[0];\n    const { hour, minute, weekday } = useTime();\n    const currentTime = ctime;\n    const [showGuide, setShowGuide] = useState(false);\n\n    const handleButtonClicke = () => {\n        setShowGuide(!showGuide);\n    };\n    const [result, setResult] = useState([\n    ]);\n\n\n\n\n    const location = useLocation();\n\n    console.log(navPath);\n\n\n    useEffect(() => {\n        // 첫 번째 서비스에서 전달된 데이터\n        const firstServiceData = location.state?.results;\n\n        // 데이터가 존재하는 경우에만 두 번째 서비스 호출\n        if (firstServiceData) {\n            const fetchSecondServiceData = async () => {\n                try {\n                    const url = `http://localhost:8080/Predict?day=${encodeURIComponent(weekday)}`;\n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify(firstServiceData),\n                    });\n                    const secondServiceData = await response.json();\n                    setResult(secondServiceData);\n                    console.log('두 번째 서비스 응답 데이터:', secondServiceData);\n                } catch (error) {\n                    console.error('두 번째 서비스 요청 실패:', error);\n                }\n            };\n\n            fetchSecondServiceData();\n        }\n    }, [location]);\n\n    const renderResults = () => {\n        return result.map((result, index) => (\n\n\n            <div key={index} className=\"resultsMap\">\n                <h1 className=\"resultsHeader\"><span style={{backgroundColor: '#fff5b1'}}>AI Predict Result {index + 1}</span></h1>\n                <h3>출발 시간 : {Math.floor((currentTime) / (60 * 60))}시 {Math.floor((currentTime) % (60*60)/60)}분 {Math.floor((currentTime)% 60)}초 ({weekday})</h3>\n                <p className=\"scheduleTime\">도착 시간(AI) : {Math.floor((currentTime+result.totalTime) / (60*60))}시 {Math.floor((currentTime+result.totalTime) % (60*60)/60)}분 {Math.floor((currentTime+result.totalTime)% 60)}초</p>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">경로 : {result.path.map((place, index) => {\n                            // eachTransferStation 배열에 포함된 역인지 확인\n                            if (result.eachTransferStation && result.eachTransferStation.includes(place)) {\n                                return <span key={index} style={{ color: 'red' }}>{place}</span>;\n                            } else {\n                                return <span key={index}>{place}</span>;\n                            }\n                        }).reduce((prev, curr) => [prev, ' -> ', curr])}</p>\n                    </>\n                )}\n                <div className=\"visualRepresentation\" style={{ width: '1250px', height: '30px', backgroundColor: 'lightgray', margin: '20px 0' }}>\n                    {renderTransferBars(result)}\n                </div>\n                <br/>\n                {result.path && (\n                    <>\n                        <p className=\"resultItem\">총 걸리는 시간 : {Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</p>\n                        {result.eachTypeOfLine.map((line, index) => (\n                            <p key={index} className=\"resultItem\">{index + 1}번째 환승역 : {line}({result.eachTransferStation[index]}) - {Math.floor((currentTime+ingtime[index]) / (60*60))}시 {Math.floor((currentTime+ingtime[index]) % (60*60)/60)}분 {Math.floor((currentTime+ingtime[index])% 60)}초 열차 탑승</p>\n                        ))}\n                    </>\n                )}\n            </div>\n        ));\n    };\n\n    const renderTransferBars = (result) => {\n        const transferBars = [];\n        const iconSize = 20; // 이미지 크기\n        let i = 0;\n\n        // 환승역이 없는 경우 처리\n        if (result.eachTransferStation.length === 0) {\n            // 출발지에서 도착지까지 바로 이동하는 경우\n            transferBars.push(\n                <div key={`go${i}`} style={{ display: 'inline-block', width: '100%', height: '30px', backgroundColor: getLineColor(result.startLine), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: '100%', maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{startStation}({result.startLine})</span>\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.startLine) }}>{Math.floor(result.totalTime / 60)}분 {Math.floor(result.totalTime % 60)}초</span>\n                </div>\n            );\n            return transferBars;\n        }\n\n        // 각 막대의 비율 계산\n        const totalBarWidth = result.totalTime;\n        let accumulatedWidth = 0;\n        let tt = 0; // tt 변수 초기화\n\n\n        result.eachTypeOfLine.forEach((line, index) => {\n            const goBarWidth = result.eachTime[index] / totalBarWidth * 1250;\n            const transferBarWidth = result.eachWalkingTime[index] / totalBarWidth * 1250;\n            const waitingBarWidth = result.eachWaitingTime[index] / totalBarWidth * 1250;\n            ingtime[index]=0;\n\n            // 각 막대의 총합이 1250이 되도록 비율 조정\n            const totalRatio = goBarWidth + transferBarWidth + waitingBarWidth;\n            const adjustedGoBarWidth = goBarWidth / totalRatio * 1250;\n            const adjustedTransferBarWidth = transferBarWidth / totalRatio * 1250;\n            const adjustedWaitingBarWidth = waitingBarWidth / totalRatio * 1250;\n\n\n            transferBars.push(\n                <div key={`go${index}`} style={{ display: 'inline-block', width: `${goBarWidth}px`, height: '30px', backgroundColor: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedGoBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{Math.floor(result.eachTime[index] / 60)}분 {Math.floor(result.eachTime[index] % 60)}초</span>\n                    <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1]) }}>{(index === 0 ? startStation : result.eachTransferStation[index - 1])}({(index === 0 ? result.startLine : result.eachTypeOfLine[index - 1])})</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`transfer${index}`} style={{ display: 'inline-block', width: `${transferBarWidth}px`, height: '30px', backgroundColor: 'lightgray', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={walk} alt=\"walk\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedTransferBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWalkingTime[index] / 60)}분 {Math.floor(result.eachWalkingTime[index] % 60)}초</span>\n                </div>\n            );\n\n            transferBars.push(\n                <div key={`wait${index}`} style={{ display: 'inline-block', width: `${waitingBarWidth}px`, height: '30px', backgroundColor: 'red', position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                    <img src={wait} alt=\"wait\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `${adjustedWaitingBarWidth}px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                    <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: '#000' }}>{Math.floor(result.eachWaitingTime[index] / 60)}분 {Math.floor(result.eachWaitingTime[index] % 60)}초 </span>\n                </div>\n            );\n            result.eachTime.forEach((_, index) => {\n                if (index === 0) {\n                    ingtime[index] = result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                } else {\n                    ingtime[index] = ingtime[index - 1] + result.eachTime[index] + result.eachWalkingTime[index] + result.eachWaitingTime[index];\n                }\n            });\n\n            accumulatedWidth += adjustedGoBarWidth + adjustedTransferBarWidth + adjustedWaitingBarWidth;\n            tt = tt+result.eachTime[index]+result.eachWalkingTime[index]+result.eachWaitingTime[index];\n        });\n\n        // 마지막 열차 막대 추가\n        const lastIndex = result.eachTypeOfLine.length - 1;\n        const lastGoBarWidth = (result.eachTime[lastIndex] !== 0 ? result.totalTime - tt: result.totalTime) / totalBarWidth * 1250;\n        const lastTotalWidth = lastGoBarWidth;\n\n        const lastAdjustedGoBarWidth = lastGoBarWidth / lastTotalWidth * (1250 - accumulatedWidth);\n        transferBars.push(\n            <div key={`go${lastIndex}`} style={{ display: 'inline-block', width: `${lastGoBarWidth}px`, height: '30px', backgroundColor: getLineColor(result.eachTypeOfLine[lastIndex]), position: 'relative', whiteSpace: 'nowrap', overflow: 'visible' }}>\n                <img src={train} alt=\"subway\" style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', maxWidth: `50px`, maxHeight: '100%', width: 'auto', height: 'auto' }} />\n                <span style={{ position: 'absolute', left: '50%', bottom: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{Math.floor((result.totalTime - tt)/ 60)}분 {Math.floor(result.eachTime[lastIndex] % 60)}초</span>\n                <span style={{ position: 'absolute', left: '50%', top: '-20px', transform: 'translate(-50%, 0)', color: getLineColor(result.eachTypeOfLine[lastIndex]) }}>{result.eachTransferStation[result.eachTransferStation.length - 1]}({result.eachTypeOfLine[result.eachTypeOfLine.length - 1]})</span>\n            </div>\n        );\n        return transferBars;\n    };\n    const getLineColor = (line) => {\n        const lineColors = {\n            '1호선': '#0d3692',\n            '2호선': '#33a23d',\n            '3호선': '#fe5d10',\n            '4호선': '#00a2d1',\n            '5호선': '#8b50a4',\n            '6호선': '#c55c1d',\n            '7호선': '#54640d',\n            '8호선': '#f14c82',\n        };\n        return lineColors[line] || '#000'; // 기본 색상은 검정색\n    };\n\n\n\n    return (\n        <Main title=\"실시간 길찾기\" description=\"실시간 길찾기 페이지\">\n\n            <div className=\"resultsContainer\">\n                <h1 className=\"resultsHeader\">출발지/도착지</h1> <p>설정된 시간: {hour}시 {minute}분 ({weekday})</p>\n                {startStation && <p className=\"resultItem\">출발지: {startStation}</p>}\n                {endStation && <p className=\"resultItem\">도착지: {endStation}</p>}\n                {!startStation && <p className=\"resultItem\">출발지 정보가 없습니다.</p>}\n                {!endStation && <p className=\"resultItem\">도착지 정보가 없습니다.</p>}\n            </div>\n            <div style={{position: 'relative', display: 'inline-block'}}>\n                <button\n                    onClick={handleButtonClicke}\n                    style={{\n                        backgroundColor: '#007bff',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '30px',\n                        cursor: 'pointer',\n                        width: '80px',       // 너비 설정\n                        height: '40px',       // 높이 설정\n                        fontSize: '16px',     // 폰트 크기 설정\n                        margin: '10px'        // 외부 여백 설정 (선택 사항)\n                    }}\n                >\n                    Guide\n                </button>\n                {showGuide && (\n                    <div style={{\n                        position: 'absolute',\n                        top: '50px', // 팝업 창의 위치 조정 (원하는 위치로 설정)\n                        left: '100px', // 화면 가운데 정렬을 위해 left를 50%로 설정\n                        transform: 'translate(-50%, 0)', // 화면 가운데 정렬을 위한 transform 사용\n                        backgroundColor: 'white',\n                        border: '1px solid #ccc',\n                        borderRadius: '5px',\n                        padding: '10px',\n                        width: '200px',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n                        textAlign: 'center' // 텍스트 가운데 정렬을 위한 textAlign 설정\n                    }}>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={train}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 타는 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={walk}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>환승역까지 도보 시간</p>\n                        </div>\n                        <br/>\n                        <div style={{display: 'flex', alignItems: 'center'}}>\n                            <img\n                                src={wait}\n                                style={{\n                                    maxWidth: '50px',\n                                    maxHeight: '100%',\n                                    width: 'auto',\n                                    height: 'auto',\n                                    marginRight: '10px' // 이미지 오른쪽 여백 설정\n                                }}\n                            />\n                            <p>열차를 기다리는 시간</p>\n                        </div>\n                        <button onClick={handleButtonClicke} style={{\n                            backgroundColor: '#007bff',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '5px',\n                            cursor: 'pointer',\n                            width: '100%',\n                            padding: '5px 0',\n                            fontSize: '14px',\n                            marginTop: '10px'\n                        }}>\n                            닫기\n                        </button>\n                    </div>\n                )}\n            </div>\n\n            {renderResults()}\n        </Main>\n    );\n};\n\nexport default Pre;"],"names":["ctime","navPath","startStation","useSelector","state","endStation","_useState","useState","_useState2","_slicedToArray","loading","setLoading","navigate","useNavigate","_useTime","useTime","hour","minute","weekday","ingtime","_useState3","_useState4","showGuide","setShowGuide","handleButtonClicke","_useState5","_useState6","results","setResults","useEffect","fetchDataFromSpring","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","data","wrap","_context","prev","next","concat","encodeURIComponent","fetch","method","headers","sent","json","t0","console","error","stop","apply","arguments","hourNum","parseInt","minuteNum","log","allPaths","forEach","result","push","path","makepath","renderTransferBars","transferBars","eachTransferStation","length","_jsxs","style","display","width","height","backgroundColor","getLineColor","startLine","position","whiteSpace","overflow","children","_jsx","src","train","alt","left","top","transform","maxWidth","maxHeight","color","bottom","Math","floor","totalTime","totalBarWidth","tt","eachTypeOfLine","line","index","goBarWidth","eachTime","transferBarWidth","eachWalkingTime","waitingBarWidth","eachWaitingTime","totalRatio","adjustedGoBarWidth","adjustedTransferBarWidth","adjustedWaitingBarWidth","walk","wait","_","lastIndex","lastGoBarWidth","Main","title","description","className","onClick","setTimeout","border","borderRadius","cursor","fontSize","margin","padding","boxShadow","textAlign","alignItems","marginRight","marginTop","map","_Fragment","place","includes","reduce","curr","currentTime","setResult","location","useLocation","_location$state","firstServiceData","fetchSecondServiceData","secondServiceData","body","JSON","stringify"],"sourceRoot":""}